#!/usr/bin/env node
/**
 * Script to generate TypeScript module with embedded compressed IANA data.
 * This creates a browser-compatible module that doesn't require file system access.
 */

const fs = require('fs');
const path = require('path');

// Paths
const DATA_DIR = path.join(__dirname, '..', 'src', 'data', 'iana');
const PACKLET_DIR = path.join(__dirname, '..', 'src', 'packlets', 'iana');
const ZIP_FILE = path.join(DATA_DIR, 'iana-data.zip');
const OUTPUT_FILE = path.join(PACKLET_DIR, 'iana-data-embedded.ts');

console.log('🔄 Generating embedded IANA data module...');

try {
  // Read the ZIP file
  const zipBuffer = fs.readFileSync(ZIP_FILE);
  const base64Data = zipBuffer.toString('base64');

  console.log(`📦 Original ZIP size: ${Math.round(zipBuffer.length / 1024)}KB`);
  console.log(`📄 Base64 size: ${Math.round(base64Data.length / 1024)}KB`);

  // Generate TypeScript module
  const moduleContent = `/*
 * Copyright (c) 2025 Erik Fortune
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * GENERATED FILE - DO NOT EDIT MANUALLY
 *
 * This file contains the compressed IANA registry data embedded as base64.
 * Generated by scripts/generate-embedded-data.js
 *
 * Original ZIP size: ${Math.round(zipBuffer.length / 1024)}KB
 * Base64 size: ${Math.round(base64Data.length / 1024)}KB
 */

/**
 * Compressed IANA registry data in base64 format.
 * This provides browser-compatible access to the compressed registry data.
 * @internal
 */
const ianaDataBase64: string = '${base64Data}';

/**
 * Converts the embedded base64 data to a Uint8Array for ZIP processing.
 * This works in both Node.js and browser environments without polyfills.
 * @returns Uint8Array containing the compressed ZIP data.
 * @internal
 */
export function getIanaDataBuffer(): Uint8Array {
  // Convert base64 to Uint8Array in a browser-compatible way
  if (typeof Buffer !== 'undefined') {
    // Node.js environment
    return new Uint8Array(Buffer.from(ianaDataBase64, 'base64'));
  } else {
    // Browser environment - use atob (available in all modern browsers)
    const binaryString = atob(ianaDataBase64);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
  }
}

export default ianaDataBase64;
`;

  // Write the generated module
  fs.writeFileSync(OUTPUT_FILE, moduleContent);

  console.log(`✅ Generated ${path.relative(process.cwd(), OUTPUT_FILE)}`);
  console.log(`   Browser-compatible ZIP data embedded as TypeScript module`);
} catch (error) {
  console.error('❌ Failed to generate embedded data:', error.message);
  process.exit(1);
}
