{"version":3,"file":"testDataLoader.js","sourceRoot":"","sources":["../../../src/test/helpers/testDataLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { readFileSync, writeFileSync, mkdirSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { Result, succeed, fail } from '@fgv/ts-utils';\nimport { Config } from '@fgv/ts-res';\n\n/**\n * Base path for test fixtures - using existing test data in monorepo\n */\nconst PROJECT_ROOT = dirname(dirname(dirname(__dirname)));\nconst FIXTURES_PATH = join(PROJECT_ROOT, '../../data/test/ts-res');\nconst TEMP_PATH = join(PROJECT_ROOT, 'temp');\n\n/**\n * Generate a unique temp folder name with timestamp and random suffix\n */\nexport function createUniqueTempPath(prefix: string = 'test'): string {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 8);\n  const uniqueName = `${prefix}-${timestamp}-${random}`;\n  const tempPath = join(TEMP_PATH, uniqueName);\n\n  // Create the temp directory\n  mkdirSync(tempPath, { recursive: true });\n\n  return tempPath;\n}\n\n/**\n * Load a test configuration file from the existing test data\n */\nexport function loadTestConfiguration(\n  testSet: 'default' | 'custom-config' | 'extended-example',\n  filename?: string\n): Result<Config.Model.ISystemConfiguration> {\n  try {\n    let configPath: string;\n\n    if (testSet === 'default') {\n      configPath = join(FIXTURES_PATH, 'default', filename || 'default-config.json');\n    } else if (testSet === 'custom-config') {\n      configPath = join(FIXTURES_PATH, 'custom-config', filename || 'resources-config.json');\n    } else if (testSet === 'extended-example') {\n      configPath = join(FIXTURES_PATH, 'extended-example', filename || 'configuration.json');\n    } else {\n      return fail(`Unknown test set: ${testSet}`);\n    }\n\n    const configData = readFileSync(configPath, 'utf8');\n    const config = JSON.parse(configData) as Config.Model.ISystemConfiguration;\n    return succeed(config);\n  } catch (error) {\n    return fail(`Failed to load test configuration from ${testSet}/${filename}: ${error}`);\n  }\n}\n\n/**\n * Load test resource files from a test set\n */\nexport function loadTestResources(\n  testSet: 'default' | 'custom-config' | 'extended-example'\n): Result<Array<{ path: string; content: string }>> {\n  try {\n    const resourcesPath = join(FIXTURES_PATH, testSet, 'resources');\n    const fs = require('fs');\n\n    if (!existsSync(resourcesPath)) {\n      return fail(`Test resource directory for ${testSet} does not exist`);\n    }\n\n    const files: Array<{ path: string; content: string }> = [];\n\n    function readDirectory(dir: string, basePath: string = '') {\n      const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = join(dir, entry.name);\n        const relativePath = join(basePath, entry.name);\n\n        if (entry.isDirectory()) {\n          readDirectory(fullPath, relativePath);\n        } else if (entry.isFile() && entry.name.endsWith('.json')) {\n          const content = readFileSync(fullPath, 'utf8');\n          files.push({ path: relativePath, content });\n        }\n      }\n    }\n\n    readDirectory(resourcesPath);\n    return succeed(files);\n  } catch (error) {\n    return fail(`Failed to load test resources from ${testSet}: ${error}`);\n  }\n}\n\n/**\n * Write test data to a temp file\n */\nexport function writeTempFile(tempDir: string, filename: string, content: string): Result<string> {\n  try {\n    const filePath = join(tempDir, filename);\n    const fileDir = dirname(filePath);\n\n    // Ensure directory exists\n    if (!existsSync(fileDir)) {\n      mkdirSync(fileDir, { recursive: true });\n    }\n\n    writeFileSync(filePath, content, 'utf8');\n    return succeed(filePath);\n  } catch (error) {\n    return fail(`Failed to write temp file ${filename}: ${error}`);\n  }\n}\n\n/**\n * Write test data structure to temp directory\n */\nexport function writeTempResourceFiles(\n  tempDir: string,\n  files: Array<{ path: string; content: string }>\n): Result<string[]> {\n  try {\n    const writtenPaths: string[] = [];\n\n    for (const file of files) {\n      const result = writeTempFile(tempDir, file.path, file.content);\n      if (result.isFailure()) {\n        return fail(`Failed to write resource file ${file.path}: ${result.message}`);\n      }\n      writtenPaths.push(result.value);\n    }\n\n    return succeed(writtenPaths);\n  } catch (error) {\n    return fail(`Failed to write temp resource files: ${error}`);\n  }\n}\n\n/**\n * Load a test bundle file as buffer or text\n */\nexport function loadTestBundleFile(\n  filename: string = 'extended.resource-bundle.json',\n  asBuffer: boolean = false\n): Result<Buffer | string> {\n  try {\n    const bundlePath = join(FIXTURES_PATH, filename);\n\n    if (asBuffer) {\n      const buffer = readFileSync(bundlePath);\n      return succeed(buffer);\n    } else {\n      const text = readFileSync(bundlePath, 'utf8');\n      return succeed(text);\n    }\n  } catch (error) {\n    return fail(`Failed to load test bundle file ${filename}: ${error}`);\n  }\n}\n\n/**\n * Clean up temp directory (optional - temp folder is git-ignored)\n */\nexport function cleanupTempPath(tempPath: string): void {\n  try {\n    const fs = require('fs');\n    if (existsSync(tempPath)) {\n      fs.rmSync(tempPath, { recursive: true, force: true });\n    }\n  } catch (error) {\n    console.warn(`Warning: Failed to cleanup temp path ${tempPath}:`, error);\n  }\n}\n"]}