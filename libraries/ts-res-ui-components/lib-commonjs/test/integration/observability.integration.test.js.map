{"version":3,"file":"observability.integration.test.js","sourceRoot":"","sources":["../../../src/test/integration/observability.integration.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\nimport '@fgv/ts-utils-jest';\nimport { ObservabilityProvider, useObservability } from '../../contexts';\nimport * as ObservabilityTools from '../../namespaces/ObservabilityTools';\n\n// Test component that uses observability\nconst TestComponent: React.FC = () => {\n  const o11y = useObservability();\n\n  // Log some diagnostic messages\n  o11y.diag.info('Test component rendered');\n  o11y.diag.warn('Test warning message');\n  o11y.user.success('Test user message');\n\n  return <div data-testid=\"test-component\">Test Component</div>;\n};\n\ndescribe('Observability Integration', () => {\n  test('should provide observability context to components', () => {\n    // Use the test observability context\n    const testContext = ObservabilityTools.TestObservabilityContext;\n\n    const { getByTestId } = render(\n      <ObservabilityProvider observabilityContext={testContext}>\n        <TestComponent />\n      </ObservabilityProvider>\n    );\n\n    // Verify component rendered\n    expect(getByTestId('test-component')).toBeInTheDocument();\n  });\n\n  test('should work with default observability context', () => {\n    // Test that components work with default context (no provider)\n    const { getByTestId } = render(<TestComponent />);\n\n    // Should render without errors even with default context\n    expect(getByTestId('test-component')).toBeInTheDocument();\n  });\n\n  test('should create console observability context', () => {\n    // Test the observability factory\n    const context = ObservabilityTools.createConsoleObservabilityContext('info', 'info');\n\n    expect(context).toBeDefined();\n    expect(context.diag).toBeDefined();\n    expect(context.user).toBeDefined();\n    expect(typeof context.diag.info).toBe('function');\n    expect(typeof context.diag.warn).toBe('function');\n    expect(typeof context.diag.error).toBe('function');\n    expect(typeof context.user.info).toBe('function');\n    expect(typeof context.user.warn).toBe('function');\n    expect(typeof context.user.error).toBe('function');\n    expect(typeof context.user.success).toBe('function');\n  });\n\n  test('should work with no-op observability context', () => {\n    // Test the no-op context\n    const noOpContext = ObservabilityTools.createNoOpObservabilityContext();\n\n    const { getByTestId } = render(\n      <ObservabilityProvider observabilityContext={noOpContext}>\n        <TestComponent />\n      </ObservabilityProvider>\n    );\n\n    // Should render without errors\n    expect(getByTestId('test-component')).toBeInTheDocument();\n  });\n});\n"]}