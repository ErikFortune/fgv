{"version":3,"file":"useResolutionState.context.test.js","sourceRoot":"","sources":["../../../../src/test/unit/hooks/useResolutionState.context.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { useResolutionState } from '../../../hooks/useResolutionState';\nimport { Runtime } from '@fgv/ts-res';\nimport { createTsResSystemFromConfig } from '../../../utils/tsResIntegration';\n\nfunction buildProcessedResources() {\n  const system = createTsResSystemFromConfig().orThrow();\n  const compiledCollection = system.resourceManager\n    .getCompiledResourceCollection({ includeMetadata: true })\n    .orThrow();\n  const resolver = Runtime.ResourceResolver.create({\n    resourceManager: system.resourceManager,\n    qualifierTypes: system.qualifierTypes,\n    contextQualifierProvider: system.contextQualifierProvider\n  }).orThrow();\n  const resourceIds = Array.from(system.resourceManager.resources.keys());\n  return {\n    system,\n    compiledCollection,\n    resolver,\n    summary: { totalResources: resourceIds.length, resourceIds, errorCount: 0, warnings: [] }\n  } as any;\n}\n\ndescribe('useResolutionState basic', () => {\n  it('applies context and stamps conditions for new resources', async () => {\n    const onSystemUpdate = jest.fn();\n    const onMessage = jest.fn();\n\n    const processed = buildProcessedResources();\n    const { result } = renderHook(() => useResolutionState(processed, onMessage, onSystemUpdate));\n\n    // set context pending value and apply so effectiveContext includes it\n    act(() => {\n      result.current.actions.updateContextValue('language', 'en');\n    });\n\n    // start new resource\n    act(() => {\n      result.current.actions.startNewResource({ defaultTypeName: 'json' });\n    });\n\n    const draft = result.current.state.newResourceDraft!;\n    expect(draft).toBeTruthy();\n\n    // Apply context so effectiveContext has language=en\n    act(() => {\n      result.current.actions.applyContext();\n    });\n\n    // Set a proper resource ID (no longer allow temporary IDs to be saved)\n    act(() => {\n      result.current.actions.updateNewResourceId('platform.test.testResource');\n    });\n\n    // Save to pending\n    act(() => {\n      result.current.actions.saveNewResourceAsPending();\n    });\n\n    // Ensure a candidate exists and gets stamped by editing the pending resource\n    act(() => {\n      result.current.actions.saveEdit('platform.test.testResource', {} as any);\n    });\n\n    // Verify pending resource has conditions stamped\n    const pending = Array.from(result.current.state.pendingResources.values())[0] as any;\n    expect(pending?.candidates?.[0]?.conditions?.[0]?.qualifierName).toBe('language');\n    expect(pending?.candidates?.[0]?.conditions?.[0]?.value).toBe('en');\n  });\n});\n"]}