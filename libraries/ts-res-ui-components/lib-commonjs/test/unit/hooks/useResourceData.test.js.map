{"version":3,"file":"useResourceData.test.js","sourceRoot":"","sources":["../../../../src/test/unit/hooks/useResourceData.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport '@fgv/ts-utils-jest';\n\nimport { useResourceData } from '../../../hooks/useResourceData';\nimport { ProcessedResources, ExtendedProcessedResources } from '../../../types';\nimport { getDefaultSystemConfiguration } from '../../../utils/tsResIntegration';\nimport { Config } from '@fgv/ts-res';\n\n// Create minimal mock data for testing\nconst createMockProcessedResources = (): ProcessedResources => ({\n  system: {\n    resourceManager: {} as any,\n    qualifierTypes: {} as any,\n    qualifiers: {} as any,\n    resourceTypes: {} as any,\n    importManager: {} as any,\n    contextQualifierProvider: {} as any\n  },\n  compiledCollection: {} as any,\n  resolver: {} as any,\n  resourceCount: 5,\n  summary: {\n    totalResources: 5,\n    resourceIds: ['test1', 'test2'],\n    errorCount: 0,\n    warnings: []\n  }\n});\n\nconst createMockConfiguration = (): Config.Model.ISystemConfiguration => getDefaultSystemConfiguration();\n\nconst createMockProcessedResourcesWithUpdatedSystem = (\n  originalResources: ProcessedResources\n): ProcessedResources => ({\n  ...originalResources,\n  system: {\n    ...originalResources.system,\n    // Simulate updated resource manager with new candidates\n    resourceManager: { ...originalResources.system.resourceManager, updated: true } as any\n  },\n  resourceCount: originalResources.resourceCount + 1,\n  summary: {\n    ...originalResources.summary,\n    totalResources: originalResources.summary.totalResources + 1,\n    resourceIds: [...originalResources.summary.resourceIds, 'new-candidate']\n  }\n});\n\ndescribe('useResourceData', () => {\n  describe('updateProcessedResources', () => {\n    test('should preserve activeConfiguration when updating processed resources', () => {\n      const { result } = renderHook(() => useResourceData({}));\n\n      // First, set an active configuration\n      const mockConfig = createMockConfiguration();\n      act(() => {\n        result.current.actions.applyConfiguration(mockConfig);\n      });\n\n      // Verify configuration is set\n      expect(result.current.state.activeConfiguration).toBe(mockConfig);\n\n      // Create initial extended processed resources with configuration\n      const initialResources: ExtendedProcessedResources = {\n        ...createMockProcessedResources(),\n        activeConfiguration: mockConfig,\n        isLoadedFromBundle: false,\n        bundleMetadata: null\n      };\n\n      // Set the processed resources (simulating initial resource loading)\n      act(() => {\n        result.current.actions.updateProcessedResources(initialResources);\n      });\n\n      // Verify both the state and processed resources have the configuration\n      expect(result.current.state.activeConfiguration).toBe(mockConfig);\n      expect(result.current.state.processedResources?.activeConfiguration).toBe(mockConfig);\n\n      // Now simulate what happens when resolution editing updates resources\n      // This would be called with plain ProcessedResources (without activeConfiguration)\n      const updatedResources: ProcessedResources = {\n        ...createMockProcessedResources(),\n        resourceCount: 10, // Changed value to verify update\n        summary: {\n          totalResources: 10,\n          resourceIds: ['test1', 'test2', 'test3'],\n          errorCount: 0,\n          warnings: []\n        }\n      };\n\n      // Update processed resources (this is what resolution editing does)\n      act(() => {\n        result.current.actions.updateProcessedResources(updatedResources);\n      });\n\n      // CRITICAL TEST: activeConfiguration should be preserved\n      expect(result.current.state.activeConfiguration).toBe(mockConfig);\n      expect(result.current.state.processedResources?.activeConfiguration).toBe(mockConfig);\n\n      // Verify the update was applied\n      expect(result.current.state.processedResources?.resourceCount).toBe(10);\n      expect(result.current.state.processedResources?.summary.totalResources).toBe(10);\n      expect(result.current.state.processedResources?.summary.resourceIds).toHaveLength(3);\n    });\n\n    test('should preserve bundle metadata when updating processed resources', () => {\n      const { result } = renderHook(() => useResourceData({}));\n\n      const mockConfig = createMockConfiguration();\n      const mockBundleMetadata = {\n        name: 'Test Bundle',\n        version: '1.0.0',\n        timestamp: '2023-01-01T00:00:00Z'\n      } as any;\n\n      // Set initial state with bundle metadata\n      const initialResources: ExtendedProcessedResources = {\n        ...createMockProcessedResources(),\n        activeConfiguration: mockConfig,\n        isLoadedFromBundle: true,\n        bundleMetadata: mockBundleMetadata\n      };\n\n      act(() => {\n        result.current.actions.applyConfiguration(mockConfig);\n        result.current.actions.updateProcessedResources(initialResources);\n      });\n\n      // Update with plain ProcessedResources\n      const updatedResources: ProcessedResources = {\n        ...createMockProcessedResources(),\n        resourceCount: 15\n      };\n\n      act(() => {\n        result.current.actions.updateProcessedResources(updatedResources);\n      });\n\n      // Bundle metadata should be preserved\n      expect(result.current.state.processedResources?.isLoadedFromBundle).toBe(true);\n      expect(result.current.state.processedResources?.bundleMetadata).toBe(mockBundleMetadata);\n      expect(result.current.state.processedResources?.activeConfiguration).toBe(mockConfig);\n\n      // Update should still be applied\n      expect(result.current.state.processedResources?.resourceCount).toBe(15);\n    });\n\n    test('should handle updating resources when no previous configuration exists', () => {\n      const { result } = renderHook(() => useResourceData({}));\n\n      const mockResources: ProcessedResources = createMockProcessedResources();\n\n      act(() => {\n        result.current.actions.updateProcessedResources(mockResources);\n      });\n\n      // Should work without errors even when no previous configuration\n      expect(result.current.state.processedResources?.activeConfiguration).toBeUndefined();\n      expect(result.current.state.processedResources?.resourceCount).toBe(5);\n      expect(result.current.state.hasProcessedData).toBe(true);\n    });\n\n    test('should handle case where previous processedResources is null', () => {\n      const { result } = renderHook(() => useResourceData({}));\n\n      // Ensure initial state\n      expect(result.current.state.processedResources).toBeNull();\n\n      const mockConfig = createMockConfiguration();\n      const mockResources: ProcessedResources = createMockProcessedResources();\n\n      // Set configuration but no processed resources yet\n      act(() => {\n        result.current.actions.applyConfiguration(mockConfig);\n      });\n\n      // Now update processed resources for the first time\n      act(() => {\n        result.current.actions.updateProcessedResources(mockResources);\n      });\n\n      // Should have the resources but preserve the configuration\n      expect(result.current.state.processedResources?.activeConfiguration).toBeUndefined(); // No previous processedResources\n      expect(result.current.state.activeConfiguration).toBe(mockConfig); // State configuration preserved\n      expect(result.current.state.processedResources?.resourceCount).toBe(5);\n    });\n  });\n\n  describe('export functionality integration', () => {\n    test('should maintain configuration needed for export after resource updates', () => {\n      const { result } = renderHook(() => useResourceData({}));\n\n      const mockConfig = createMockConfiguration();\n\n      // Simulate the workflow: load config, import resources, edit resources\n      act(() => {\n        // 1. Load configuration\n        result.current.actions.applyConfiguration(mockConfig);\n      });\n\n      act(() => {\n        // 2. Import/process resources with configuration\n        const initialResources: ExtendedProcessedResources = {\n          ...createMockProcessedResources(),\n          activeConfiguration: mockConfig,\n          isLoadedFromBundle: false,\n          bundleMetadata: null\n        };\n        result.current.actions.updateProcessedResources(initialResources);\n      });\n\n      act(() => {\n        // 3. Simulate resource editing (resolution system updates with plain ProcessedResources)\n        const editedResources: ProcessedResources = {\n          ...createMockProcessedResources(),\n          resourceCount: 8 // Simulate edited resources\n        };\n        result.current.actions.updateProcessedResources(editedResources);\n      });\n\n      // 4. Export should still be possible (configuration available)\n      const finalState = result.current.state;\n      expect(finalState.processedResources?.activeConfiguration).toBe(mockConfig);\n      expect(finalState.activeConfiguration).toBe(mockConfig);\n\n      // Both state locations should have the configuration for export\n      expect(finalState.processedResources?.activeConfiguration).toBeTruthy();\n      expect(finalState.activeConfiguration).toBeTruthy();\n\n      // Resources should reflect the edits\n      expect(finalState.processedResources?.resourceCount).toBe(8);\n    });\n  });\n\n  describe('resource editing workflow regression test', () => {\n    test('should preserve updated resource system when applying edits with extended metadata', () => {\n      const { result } = renderHook(() => useResourceData({}));\n\n      // 1. Set up initial configuration and resources (like loading from files)\n      const mockConfig = createMockConfiguration();\n      const mockBundleMetadata = {\n        version: '1.0.0',\n        description: 'Test bundle',\n        dateBuilt: new Date('2024-01-01').toISOString(),\n        checksum: 'mock-checksum-123'\n      };\n\n      act(() => {\n        result.current.actions.applyConfiguration(mockConfig);\n      });\n\n      // 2. Load initial resources with extended properties\n      const initialResources: ExtendedProcessedResources = {\n        ...createMockProcessedResources(),\n        activeConfiguration: mockConfig,\n        isLoadedFromBundle: true,\n        bundleMetadata: mockBundleMetadata\n      };\n\n      act(() => {\n        result.current.actions.updateProcessedResources(initialResources);\n      });\n\n      // Verify initial state\n      expect(result.current.state.processedResources?.resourceCount).toBe(5);\n      expect(result.current.state.processedResources?.summary.resourceIds).toHaveLength(2);\n      expect(result.current.state.processedResources?.activeConfiguration).toBe(mockConfig);\n\n      // 3. Simulate resource editing workflow (what was broken)\n      // The resolution system applies edits and returns updated ProcessedResources\n      const originalResources = result.current.state.processedResources!;\n      const updatedResources = createMockProcessedResourcesWithUpdatedSystem(originalResources);\n\n      act(() => {\n        result.current.actions.updateProcessedResources(updatedResources);\n      });\n\n      // 4. Verify the fix: updated system should be preserved, extended properties maintained\n      const finalState = result.current.state.processedResources!;\n\n      // The core resource system should be updated (this was the bug)\n      expect(finalState.resourceCount).toBe(6); // Updated count\n      expect(finalState.summary.totalResources).toBe(6);\n      expect(finalState.summary.resourceIds).toContain('new-candidate'); // New candidate added\n      expect((finalState.system.resourceManager as any).updated).toBe(true); // System updated\n\n      // Extended metadata should still be preserved\n      expect(finalState.activeConfiguration).toBe(mockConfig);\n      expect(finalState.isLoadedFromBundle).toBe(true);\n      expect(finalState.bundleMetadata).toBe(mockBundleMetadata);\n    });\n  });\n});\n"]}