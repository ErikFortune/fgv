{"version":3,"file":"ResourcePicker.test.js","sourceRoot":"","sources":["../../../src/test/unit/ResourcePicker.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Basic unit tests for ResourcePicker component\n *\n * Note: These are simplified tests that focus on the core functionality\n * without requiring full testing library setup. For comprehensive testing,\n * the component should be tested in the actual application context.\n */\n\nimport {\n  filterTreeBranch,\n  mergeWithPendingResources,\n  adjustResourcePath,\n  getResourceDisplayName,\n  buildResourceTree,\n  flattenTree,\n  searchResources\n} from '../../components/pickers/ResourcePicker/utils/treeNavigation';\nimport { PendingResource } from '../../components/pickers/ResourcePicker/types';\n\ndescribe('ResourcePicker Utilities', () => {\n  describe('filterTreeBranch', () => {\n    const sampleResourceIds = [\n      'strings',\n      'strings.common',\n      'strings.common.ok',\n      'strings.common.cancel',\n      'strings.errors',\n      'strings.errors.validation',\n      'app',\n      'app.ui',\n      'app.ui.buttons'\n    ];\n\n    test('returns all resources when no rootPath provided', () => {\n      const result = filterTreeBranch(sampleResourceIds);\n      expect(result).toEqual(sampleResourceIds);\n    });\n\n    test('filters to specific branch', () => {\n      const result = filterTreeBranch(sampleResourceIds, 'strings');\n\n      expect(result).toContain('strings');\n      expect(result).toContain('strings.common');\n      expect(result).toContain('strings.common.ok');\n      expect(result).not.toContain('app');\n    });\n\n    test('filters with hideRootNode = true', () => {\n      const result = filterTreeBranch(sampleResourceIds, 'strings', true);\n\n      expect(result).not.toContain('strings');\n      expect(result).toContain('strings.common');\n      expect(result).toContain('strings.common.ok');\n    });\n\n    test('handles non-existent rootPath', () => {\n      const result = filterTreeBranch(sampleResourceIds, 'nonexistent');\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('mergeWithPendingResources', () => {\n    const existingIds = ['strings.common.ok', 'strings.common.cancel', 'app.ui.buttons'];\n\n    test('returns original list when no pending resources', () => {\n      const result = mergeWithPendingResources(existingIds);\n      expect(result).toEqual(existingIds);\n    });\n\n    test('adds new pending resources', () => {\n      const pending: PendingResource[] = [\n        { id: 'strings.new-resource', type: 'new', displayName: 'New Resource' }\n      ];\n\n      const result = mergeWithPendingResources(existingIds, pending);\n\n      expect(result).toContain('strings.new-resource');\n      expect(result).toContain('strings.common.ok');\n    });\n\n    test('removes deleted resources', () => {\n      const pending: PendingResource[] = [{ id: 'strings.common.ok', type: 'deleted' }];\n\n      const result = mergeWithPendingResources(existingIds, pending);\n\n      expect(result).not.toContain('strings.common.ok');\n      expect(result).toContain('strings.common.cancel');\n    });\n\n    test('handles modified resources', () => {\n      const pending: PendingResource[] = [\n        { id: 'strings.common.modified', type: 'modified', displayName: 'Modified Resource' }\n      ];\n\n      const result = mergeWithPendingResources(existingIds, pending);\n\n      expect(result).toContain('strings.common.modified');\n      expect(result).toContain('strings.common.ok');\n    });\n\n    test('sorts the final result', () => {\n      const pending: PendingResource[] = [\n        { id: 'z-last', type: 'new' },\n        { id: 'a-first', type: 'new' }\n      ];\n\n      const result = mergeWithPendingResources(existingIds, pending);\n\n      const sortedResult = [...result].sort();\n      expect(result).toEqual(sortedResult);\n    });\n  });\n\n  describe('adjustResourcePath', () => {\n    test('returns original path when no rootPath provided', () => {\n      const result = adjustResourcePath('strings.common.ok');\n      expect(result).toBe('strings.common.ok');\n    });\n\n    test('returns original path when hideRootNode is false', () => {\n      const result = adjustResourcePath('strings.common.ok', 'strings', false);\n      expect(result).toBe('strings.common.ok');\n    });\n\n    test('adjusts path when hideRootNode is true', () => {\n      const result = adjustResourcePath('strings.common.ok', 'strings', true);\n      expect(result).toBe('common.ok');\n    });\n\n    test('returns original path when not under rootPath', () => {\n      const result = adjustResourcePath('app.ui.buttons', 'strings', true);\n      expect(result).toBe('app.ui.buttons');\n    });\n  });\n\n  describe('getResourceDisplayName', () => {\n    test('returns full path when using dot notation', () => {\n      const result = getResourceDisplayName('strings.common.ok');\n      expect(result).toBe('strings.common.ok');\n    });\n\n    test('handles adjusted paths with hideRootNode', () => {\n      const result = getResourceDisplayName('strings.common.ok', 'strings', true);\n      expect(result).toBe('common.ok');\n    });\n\n    test('handles single segment paths', () => {\n      const result = getResourceDisplayName('strings');\n      expect(result).toBe('strings');\n    });\n  });\n\n  describe('buildResourceTree', () => {\n    test('throws error on duplicate conflicts', () => {\n      const conflictingIds = ['test', 'test.child']; // 'test' is both leaf and parent\n\n      expect(() => buildResourceTree(conflictingIds)).toThrow('test: Duplicate resource at path.');\n    });\n\n    test('handles empty input', () => {\n      const result = buildResourceTree([]);\n      expect(result).toEqual([]);\n    });\n\n    // Note: buildResourceTree appears to be designed for a specific tree format\n    // that doesn't work well with our dot-notation resource IDs.\n    // For now, we'll focus on testing the other utility functions.\n  });\n\n  describe('flattenTree', () => {\n    test('handles empty tree', () => {\n      const result = flattenTree([]);\n      expect(result).toEqual([]);\n    });\n\n    // Note: flattenTree tests depend on buildResourceTree working correctly,\n    // which has complexities with our current resource ID format.\n    // The function itself is simple - it just traverses nodes and collects IDs.\n  });\n\n  describe('searchResources', () => {\n    const sampleIds = [\n      'strings.common.ok',\n      'strings.common.cancel',\n      'strings.errors.validation',\n      'app.ui.buttons',\n      'app.config.settings'\n    ];\n\n    test('returns all resources when no search term', () => {\n      const result = searchResources(sampleIds, '');\n      expect(result).toEqual(sampleIds);\n    });\n\n    test('filters by search term', () => {\n      const result = searchResources(sampleIds, 'common');\n\n      expect(result).toContain('strings.common.ok');\n      expect(result).toContain('strings.common.cancel');\n      expect(result).not.toContain('strings.errors.validation');\n    });\n\n    test('search is case insensitive', () => {\n      const result = searchResources(sampleIds, 'COMMON');\n\n      expect(result).toContain('strings.common.ok');\n      expect(result).toContain('strings.common.cancel');\n    });\n\n    test('searches within current branch only', () => {\n      const result = searchResources(sampleIds, 'config', 'current-branch', 'app');\n\n      expect(result).toContain('app.config.settings');\n      expect(result).not.toContain('strings.common.ok');\n    });\n\n    test('searches all branches when scope is all', () => {\n      const result = searchResources(sampleIds, 'settings', 'all');\n\n      expect(result).toContain('app.config.settings');\n    });\n  });\n});\n\n// Basic type checking tests\ndescribe('ResourcePicker Types', () => {\n  test('PendingResource type allows all required types', () => {\n    const newResource: PendingResource = {\n      id: 'test.new',\n      type: 'new',\n      displayName: 'Test New Resource'\n    };\n\n    const modifiedResource: PendingResource = {\n      id: 'test.modified',\n      type: 'modified'\n    };\n\n    const deletedResource: PendingResource = {\n      id: 'test.deleted',\n      type: 'deleted'\n    };\n\n    // Should compile without errors\n    expect(newResource.type).toBe('new');\n    expect(modifiedResource.type).toBe('modified');\n    expect(deletedResource.type).toBe('deleted');\n  });\n});\n\n// Integration tests that can run without DOM\ndescribe('ResourcePicker Integration', () => {\n  test('branch isolation works with pending resources', () => {\n    const existingIds = ['strings.common.ok', 'app.ui.buttons'];\n    const pending: PendingResource[] = [\n      { id: 'strings.new-feature', type: 'new' },\n      { id: 'app.new-config', type: 'new' }\n    ];\n\n    // Merge pending resources\n    const allIds = mergeWithPendingResources(existingIds, pending);\n\n    // Apply branch isolation\n    const stringsOnly = filterTreeBranch(allIds, 'strings');\n\n    expect(stringsOnly).toContain('strings.common.ok');\n    expect(stringsOnly).toContain('strings.new-feature');\n    expect(stringsOnly).not.toContain('app.ui.buttons');\n    expect(stringsOnly).not.toContain('app.new-config');\n  });\n\n  test('complex branch isolation with multiple pending changes', () => {\n    const existingIds = [\n      'strings.common.ok',\n      'strings.errors.validation',\n      'app.ui.buttons',\n      'images.icons.home'\n    ];\n\n    const pending: PendingResource[] = [\n      { id: 'strings.new-section', type: 'new' },\n      { id: 'strings.common.modified', type: 'modified' },\n      { id: 'strings.common.ok', type: 'deleted' },\n      { id: 'app.deleted-feature', type: 'deleted' }\n    ];\n\n    const allIds = mergeWithPendingResources(existingIds, pending);\n    const stringsOnly = filterTreeBranch(allIds, 'strings', true);\n\n    // Should include new and modified in strings branch\n    expect(stringsOnly).toContain('strings.new-section');\n    expect(stringsOnly).toContain('strings.common.modified');\n    expect(stringsOnly).toContain('strings.errors.validation');\n\n    // Should exclude deleted and other branches\n    expect(stringsOnly).not.toContain('strings.common.ok'); // deleted\n    expect(stringsOnly).not.toContain('strings'); // hideRootNode = true\n    expect(stringsOnly).not.toContain('app.ui.buttons');\n    expect(stringsOnly).not.toContain('images.icons.home');\n  });\n});\n"]}