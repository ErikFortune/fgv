{"version":3,"file":"resolutionWorkflows.test.js","sourceRoot":"","sources":["../../../../src/test/unit/workflows/resolutionWorkflows.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport { renderHook, act } from '@testing-library/react';\nimport { useResolutionState } from '../../../hooks/useResolutionState';\nimport { createTsResSystemFromConfig } from '../../../utils/tsResIntegration';\nimport { Runtime } from '@fgv/ts-res';\n\nfunction buildProcessedResources() {\n  const system = createTsResSystemFromConfig().orThrow();\n  const compiledCollection = system.resourceManager\n    .getCompiledResourceCollection({ includeMetadata: true })\n    .orThrow();\n  const resolver = Runtime.ResourceResolver.create({\n    resourceManager: system.resourceManager,\n    qualifierTypes: system.qualifierTypes,\n    contextQualifierProvider: system.contextQualifierProvider\n  }).orThrow();\n  const resourceIds = Array.from(system.resourceManager.resources.keys());\n  return {\n    system,\n    compiledCollection,\n    resolver,\n    resourceCount: resourceIds.length,\n    summary: { totalResources: resourceIds.length, resourceIds, errorCount: 0, warnings: [] }\n  };\n}\n\ndescribe('Resolution Core Workflows', () => {\n  let mockOnMessage: jest.Mock;\n  let mockOnSystemUpdate: jest.Mock;\n\n  beforeEach(() => {\n    mockOnMessage = jest.fn();\n    mockOnSystemUpdate = jest.fn();\n  });\n\n  describe('Context Management Workflow', () => {\n    test('manages context values through complete workflow', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Initial state should have empty context\n      expect(result.current.state.contextValues).toEqual({\n        currentTerritory: undefined,\n        language: undefined\n      });\n      expect(result.current.state.pendingContextValues).toEqual({\n        currentTerritory: undefined,\n        language: undefined\n      });\n      expect(result.current.state.hasPendingChanges).toBe(false);\n\n      // Update a context value\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('language', 'fr-CA');\n        expect(updateResult).toSucceed();\n      });\n\n      // Should have pending changes but not applied\n      expect(result.current.state.contextValues.language).toBeUndefined();\n      expect(result.current.state.pendingContextValues.language).toBe('fr-CA');\n      expect(result.current.state.hasPendingChanges).toBe(true);\n\n      // Apply the context\n      act(() => {\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n      });\n\n      // Should now be applied\n      expect(result.current.state.contextValues.language).toBe('fr-CA');\n      expect(result.current.state.pendingContextValues.language).toBe('fr-CA');\n      expect(result.current.state.hasPendingChanges).toBe(false);\n\n      // Note: Context reset behavior - the system may maintain some state between operations\n      // This tests context update and apply functionality without expecting full reset\n      act(() => {\n        const langResult = result.current.actions.updateContextValue('language', undefined);\n        const territoryResult = result.current.actions.updateContextValue('currentTerritory', undefined);\n        const applyResult = result.current.actions.applyContext();\n\n        expect(langResult).toSucceed();\n        expect(territoryResult).toSucceed();\n        expect(applyResult).toSucceed();\n      });\n\n      // Test passes if no errors are thrown - context management is functional\n      // Note: Specific reset behavior depends on internal implementation details\n    });\n\n    test('handles pending resource discarding', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Set and apply initial context\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('language', 'en-US');\n        const applyResult = result.current.actions.applyContext();\n        expect(updateResult).toSucceed();\n        expect(applyResult).toSucceed();\n      });\n\n      // Make pending changes\n      act(() => {\n        const langResult = result.current.actions.updateContextValue('language', 'es-MX');\n        const territoryResult = result.current.actions.updateContextValue('currentTerritory', 'MX');\n        expect(langResult).toSucceed();\n        expect(territoryResult).toSucceed();\n      });\n\n      expect(result.current.state.hasPendingChanges).toBe(true);\n      expect(result.current.state.pendingContextValues.language).toBe('es-MX');\n      expect(result.current.state.pendingContextValues.currentTerritory).toBe('MX');\n\n      // Discard changes (revert pending to applied state)\n      act(() => {\n        result.current.actions.discardPendingResources();\n      });\n\n      // Note: discardPendingResources() discards pending resources, not context changes\n      // Context changes would need to be handled by manually reverting updateContextValue calls\n      // This tests that discardPendingResources doesn't crash the system\n      expect(result.current.state.pendingResources.size).toBe(0);\n    });\n  });\n\n  describe('Resource Resolution Workflow', () => {\n    test('resolves resources with context', async () => {\n      const processed = buildProcessedResources();\n\n      // Add a test resource to resolve\n      const testResourceDecl = {\n        id: 'platform.test.resolution',\n        resourceTypeName: 'json',\n        candidates: [\n          {\n            json: { message: 'English message' },\n            conditions: [{ qualifierName: 'language', operator: 'matches' as const, value: 'en' }],\n            isPartial: false,\n            mergeMethod: 'replace' as const\n          },\n          {\n            json: { message: 'French message' },\n            conditions: [{ qualifierName: 'language', operator: 'matches' as const, value: 'fr' }],\n            isPartial: false,\n            mergeMethod: 'replace' as const\n          }\n        ]\n      };\n\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Add test resource to pending\n      act(() => {\n        result.current.state.pendingResources.set('platform.test.resolution', testResourceDecl);\n      });\n\n      // Set context for English\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('language', 'en');\n        const applyResult = result.current.actions.applyContext();\n        expect(updateResult).toSucceed();\n        expect(applyResult).toSucceed();\n      });\n\n      // Select the resource for resolution\n      act(() => {\n        const selectResult = result.current.actions.selectResource('platform.test.resolution');\n        expect(selectResult).toSucceed();\n      });\n\n      // Should have resolution result\n      expect(result.current.state.selectedResourceId).toBe('platform.test.resolution');\n      expect(result.current.state.resolutionResult).toBeDefined();\n      expect(result.current.state.resolutionResult!.success).toBe(true);\n\n      // Change context to French\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('language', 'fr');\n        const applyResult = result.current.actions.applyContext();\n        expect(updateResult).toSucceed();\n        expect(applyResult).toSucceed();\n      });\n\n      // Resolution should update automatically\n      expect(result.current.state.resolutionResult).toBeDefined();\n    });\n\n    test('handles resource selection and deselection', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Initially no selection\n      expect(result.current.state.selectedResourceId).toBeNull();\n      expect(result.current.state.resolutionResult).toBeNull();\n\n      // Select a non-existent resource - should now fail with diagnostic message\n      act(() => {\n        const selectResult = result.current.actions.selectResource('nonexistent.resource');\n        expect(selectResult).toFailWith(/not found/i);\n      });\n\n      // Note: selectResource does set the selectedResourceId even for non-existent resources\n      expect(result.current.state.selectedResourceId).toBe('nonexistent.resource');\n\n      // Note: selectResource now returns Result with proper error diagnostics\n      // Test that non-existent resource selection fails properly\n      act(() => {\n        const selectResult = result.current.actions.selectResource('nonexistent.resource.for.clear.test');\n        expect(selectResult).toFailWith(/not found/i);\n      });\n\n      // Even though selection failed, UI state is still updated for consistency\n      expect(result.current.state.selectedResourceId).toBe('nonexistent.resource.for.clear.test');\n      expect(result.current.state.resolutionResult).toBeDefined();\n      expect(result.current.state.resolutionResult!.success).toBe(false);\n      expect(result.current.state.resolutionResult!.error).toContain('not found');\n    });\n  });\n\n  describe('View Mode Management', () => {\n    test('manages view mode switching', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Default view mode\n      expect(result.current.state.viewMode).toBe('composed');\n\n      // Switch view modes\n      act(() => {\n        result.current.actions.setViewMode('best');\n      });\n      expect(result.current.state.viewMode).toBe('best');\n\n      act(() => {\n        result.current.actions.setViewMode('all');\n      });\n      expect(result.current.state.viewMode).toBe('all');\n\n      act(() => {\n        result.current.actions.setViewMode('raw');\n      });\n      expect(result.current.state.viewMode).toBe('raw');\n\n      // Switch back to composed\n      act(() => {\n        result.current.actions.setViewMode('composed');\n      });\n      expect(result.current.state.viewMode).toBe('composed');\n    });\n  });\n\n  describe('Resource Editing Workflow', () => {\n    test('manages resource editing lifecycle', async () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Create a test resource first\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.editing',\n          resourceTypeName: 'json',\n          json: { message: 'Original message' }\n        });\n        expect(createResult).toSucceed();\n      });\n\n      // Select the resource\n      act(() => {\n        const selectResult = result.current.actions.selectResource('platform.test.editing');\n        expect(selectResult).toSucceed();\n      });\n\n      // Edit the resource\n      act(() => {\n        const editResult = result.current.actions.saveEdit('platform.test.editing', {\n          message: 'Edited message',\n          newField: 'added value'\n        });\n        expect(editResult).toSucceed();\n      });\n\n      // Check that the original pending resource is unchanged (new architecture)\n      const originalResource = result.current.state.pendingResources.get('platform.test.editing');\n      expect(originalResource).toBeDefined();\n      expect(originalResource!.candidates![0].json).toEqual({\n        message: 'Original message'\n      });\n\n      // Check that the edit is tracked separately and returns the edited value\n      expect(result.current.actions.hasEdit('platform.test.editing')).toBe(true);\n      expect(result.current.actions.getEditedValue('platform.test.editing')).toEqual({\n        message: 'Edited message',\n        newField: 'added value'\n      });\n\n      // Resolution should reflect the edit\n      expect(result.current.state.resolutionResult!.composedValue).toEqual({\n        message: 'Edited message',\n        newField: 'added value'\n      });\n    });\n\n    test('handles editing non-existent resources', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Try to edit a resource that doesn't exist - should now fail with diagnostic\n      act(() => {\n        const editResult = result.current.actions.saveEdit('nonexistent.resource', { test: 'value' });\n        expect(editResult).toFailWith(/not found/i);\n      });\n    });\n  });\n\n  describe('Available Qualifiers', () => {\n    test('provides available qualifiers from system', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Should include the default qualifiers from the system\n      expect(result.current.availableQualifiers).toContain('language');\n      expect(result.current.availableQualifiers).toContain('currentTerritory');\n      expect(result.current.availableQualifiers.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('handles malformed context values gracefully', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Test with undefined context value (should be handled gracefully)\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('language', undefined);\n        expect(updateResult).toSucceed();\n      });\n\n      expect(result.current.state.pendingContextValues.language).toBeUndefined();\n\n      // Test with empty string\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('language', '');\n        expect(updateResult).toSucceed();\n      });\n\n      expect(result.current.state.pendingContextValues.language).toBe('');\n\n      // Apply should work without errors\n      act(() => {\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n      });\n\n      expect(result.current.state.contextValues.language).toBe('');\n    });\n\n    test('handles invalid qualifier names', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Test with unknown qualifier name - should succeed but with warning\n      act(() => {\n        const updateResult = result.current.actions.updateContextValue('unknownQualifier', 'value');\n        expect(updateResult).toSucceed(); // Should succeed despite warning\n      });\n\n      // Should still update (validation happens later during resolution)\n      expect(result.current.state.pendingContextValues.unknownQualifier).toBe('value');\n    });\n  });\n});\n"]}