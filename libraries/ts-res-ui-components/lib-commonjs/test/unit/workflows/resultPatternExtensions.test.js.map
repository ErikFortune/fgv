{"version":3,"file":"resultPatternExtensions.test.js","sourceRoot":"","sources":["../../../../src/test/unit/workflows/resultPatternExtensions.test.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,8BAA4B;AAC5B,kDAAyD;AACzD,0EAAuE;AACvE,sEAA8E;AAC9E,wCAAsC;AAEtC,SAAS,uBAAuB;IAC9B,MAAM,MAAM,GAAG,IAAA,8CAA2B,GAAE,CAAC,OAAO,EAAE,CAAC;IACvD,MAAM,kBAAkB,GAAG,MAAM,CAAC,eAAe;SAC9C,6BAA6B,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;SACxD,OAAO,EAAE,CAAC;IACb,MAAM,QAAQ,GAAG,gBAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC;QAC/C,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,wBAAwB,EAAE,MAAM,CAAC,wBAAwB;KAC1D,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;IACxE,OAAO;QACL,MAAM;QACN,kBAAkB;QAClB,QAAQ;QACR,aAAa,EAAE,WAAW,CAAC,MAAM;QACjC,OAAO,EAAE,EAAE,cAAc,EAAE,WAAW,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;KAC1F,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,aAAwB,CAAC;IAC7B,IAAI,kBAA6B,CAAC;IAElC,UAAU,CAAC,GAAG,EAAE;QACd,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC1B,kBAAkB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,6EAA6E;YAC7E,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,wDAAwD;YACxD,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACxD,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,6CAA6C;YAC7C,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACzD,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,sBAAsB;YACtB,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACxD,MAAM,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC/C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,gDAAgD;YAChD,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACtE,EAAE,EAAE,mBAAmB;oBACvB,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;iBACzB,CAAC,CAAC;gBACH,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC1F,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,6DAA6D;YAC7D,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACxD,MAAM,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC/C,4CAA4C;oBAC5C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,iFAAiF;YACjF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,sBAAsB;YACtB,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,gCAAgC;YAChC,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC5D,MAAM,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;oBACjD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,iCAAiC;YACjC,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACtE,EAAE,EAAE,2BAA2B;oBAC/B,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;iBACzB,CAAC,CAAC;gBACH,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,2BAA2B,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;gBAClG,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,+DAA+D;YAC/D,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC5D,MAAM,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;oBACjD,4CAA4C;oBAC5C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,8CAA8C;YAC9C,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;gBAC1F,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,6BAA6B;YAC7B,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;gBACtE,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,0BAA0B,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,4BAA4B;YAC5B,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACtE,EAAE,EAAE,sBAAsB;oBAC1B,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE;iBACrC,CAAC,CAAC;gBACH,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,mBAAmB;YACnB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErF,6BAA6B;YAC7B,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;gBAC1F,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,mBAAmB;YACnB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtF,uCAAuC;YACvC,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;gBAC1F,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YACjF,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,uCAAuC;YACvC,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACtE,EAAE,EAAE,wBAAwB;oBAC5B,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,OAAO,EAAE,mBAAmB,EAAE;iBACvC,CAAC,CAAC;gBACH,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;gBACrF,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,mBAAmB;YACnB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;YAE/E,+BAA+B;YAC/B,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,CAAC;gBAC5F,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC3D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,sBAAsB;YACtB,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,8CAA8C;YAC9C,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;gBACzE,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;YAEH,0CAA0C;YAC1C,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACvE,EAAE,EAAE,sBAAsB;oBAC1B,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;iBACpC,CAAC,CAAC;gBACH,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,EAAE,CAAC;gBAElC,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACvE,EAAE,EAAE,sBAAsB;oBAC1B,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE;iBACrC,CAAC,CAAC;gBACH,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,EAAE,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,8CAA8C;YAC9C,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,sBAAsB,EAAE;oBACzE,OAAO,EAAE,uBAAuB;iBACjC,CAAC,CAAC;gBACH,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,qDAAqD;YACrD,MAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;YAC1F,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACnC,IAAA,WAAG,EAAC,GAAG,EAAE;oBACP,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC7F,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;gBACjC,CAAC,CAAC,CAAC;YACL,CAAC;YAED,8DAA8D;YAC9D,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;gBACzE,MAAM,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC/C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBAC7C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,4BAA4B;oBACnE,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,4BAA4B;oBAC3E,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe;oBACnD,oEAAoE;oBACpE,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;oBAEjE,iCAAiC;oBACjC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAC5B,IAAI,CAAC,yBAAyB;wBAC5B,IAAI,CAAC,wBAAwB;wBAC7B,IAAI,CAAC,gBAAgB;wBACrB,IAAI,CAAC,aAAa,CACrB,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,4EAA4E;YAC5E,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;gBACzE,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,4DAA4D;YAC5D,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC;YAE7F,4BAA4B;YAC5B,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACtE,EAAE,EAAE,qBAAqB;oBACzB,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,OAAO,EAAE,kBAAkB,EAAE;iBACtC,CAAC,CAAC;gBACH,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,kEAAkE;YAClE,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;gBACzE,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC9D,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,+CAA+C;YAC/C,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,oBAAoB;gBACpB,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;gBACtE,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,0BAA0B,CAAC,CAAC;gBAE5D,8BAA8B;gBAC9B,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;gBAC1E,MAAM,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC,0BAA0B,CAAC,CAAC;gBAE7D,yCAAyC;gBACzC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;gBAEhC,2DAA2D;gBAC3D,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACzD,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACzD,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;gBACjC,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Tests for Result Pattern Extensions\n * Demonstrates enhanced diagnostic capabilities of Result-based methods\n */\n\nimport '@fgv/ts-utils-jest';\nimport { renderHook, act } from '@testing-library/react';\nimport { useResolutionState } from '../../../hooks/useResolutionState';\nimport { createTsResSystemFromConfig } from '../../../utils/tsResIntegration';\nimport { Runtime } from '@fgv/ts-res';\n\nfunction buildProcessedResources() {\n  const system = createTsResSystemFromConfig().orThrow();\n  const compiledCollection = system.resourceManager\n    .getCompiledResourceCollection({ includeMetadata: true })\n    .orThrow();\n  const resolver = Runtime.ResourceResolver.create({\n    resourceManager: system.resourceManager,\n    qualifierTypes: system.qualifierTypes,\n    contextQualifierProvider: system.contextQualifierProvider\n  }).orThrow();\n  const resourceIds = Array.from(system.resourceManager.resources.keys());\n  return {\n    system,\n    compiledCollection,\n    resolver,\n    resourceCount: resourceIds.length,\n    summary: { totalResources: resourceIds.length, resourceIds, errorCount: 0, warnings: [] }\n  };\n}\n\ndescribe('Result Pattern Extensions', () => {\n  let mockOnMessage: jest.Mock;\n  let mockOnSystemUpdate: jest.Mock;\n\n  beforeEach(() => {\n    mockOnMessage = jest.fn();\n    mockOnSystemUpdate = jest.fn();\n  });\n\n  describe('Enhanced Cache Management', () => {\n    test('resetCache provides detailed diagnostics', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Apply context creates resolver automatically, so resetCache should succeed\n      act(() => {\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n      });\n\n      // Cache reset should succeed since resolver was created\n      act(() => {\n        const resetResult = result.current.actions.resetCache();\n        expect(resetResult).toSucceed();\n      });\n\n      // Multiple resets should continue to succeed\n      act(() => {\n        const resetResult2 = result.current.actions.resetCache();\n        expect(resetResult2).toSucceed();\n      });\n    });\n  });\n\n  describe('Enhanced Edit Management', () => {\n    test('clearEdits now works correctly with pending resources', async () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Apply context first\n      act(() => {\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n      });\n\n      // Initially no edits to clear\n      act(() => {\n        const clearResult = result.current.actions.clearEdits();\n        expect(clearResult).toSucceedAndSatisfy((data) => {\n          expect(data.clearedCount).toBe(0);\n        });\n      });\n\n      // BUG: pending resource edits cannot be cleared\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.bug',\n          resourceTypeName: 'json',\n          json: { original: true }\n        });\n        expect(createResult).toSucceed();\n      });\n\n      act(() => {\n        const editResult = result.current.actions.saveEdit('platform.test.bug', { edited: true });\n        expect(editResult).toSucceed();\n      });\n\n      // FIXED: This now clears the pending resource edit correctly\n      act(() => {\n        const clearResult = result.current.actions.clearEdits();\n        expect(clearResult).toSucceedAndSatisfy((data) => {\n          // Bug is fixed - count is now 1 as expected\n          expect(data.clearedCount).toBe(1);\n        });\n      });\n\n      // Verify the pending resource edit is now cleared (falls back to original value)\n      expect(result.current.actions.getEditedValue('platform.test.bug')).toEqual({ original: true });\n    });\n\n    test('discardEdits now works correctly with pending resources', async () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Apply context first\n      act(() => {\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n      });\n\n      // No edits to discard initially\n      act(() => {\n        const discardResult = result.current.actions.discardEdits();\n        expect(discardResult).toSucceedAndSatisfy((data) => {\n          expect(data.discardedCount).toBe(0);\n        });\n      });\n\n      // Test the bug with discardEdits\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.discard.bug',\n          resourceTypeName: 'json',\n          json: { original: true }\n        });\n        expect(createResult).toSucceed();\n      });\n\n      act(() => {\n        const editResult = result.current.actions.saveEdit('platform.test.discard.bug', { edited: true });\n        expect(editResult).toSucceed();\n      });\n\n      // FIXED: This now discards the pending resource edit correctly\n      act(() => {\n        const discardResult = result.current.actions.discardEdits();\n        expect(discardResult).toSucceedAndSatisfy((data) => {\n          // Bug is fixed - count is now 1 as expected\n          expect(data.discardedCount).toBe(1);\n        });\n      });\n    });\n  });\n\n  describe('Enhanced Pending Resource Management', () => {\n    test('removePendingResource validates resource existence', async () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Try to remove non-existent pending resource\n      act(() => {\n        const removeResult = result.current.actions.removePendingResource('nonexistent.resource');\n        expect(removeResult).toFailWith(/not found/i);\n      });\n\n      // Try with empty resource ID\n      act(() => {\n        const removeResult = result.current.actions.removePendingResource('');\n        expect(removeResult).toFailWith(/not a valid resource ID/i);\n      });\n\n      // Create a pending resource\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.remove',\n          resourceTypeName: 'json',\n          json: { message: 'Will be removed' }\n        });\n        expect(createResult).toSucceed();\n      });\n\n      // Verify it exists\n      expect(result.current.state.pendingResources.has('platform.test.remove')).toBe(true);\n\n      // Now removal should succeed\n      act(() => {\n        const removeResult = result.current.actions.removePendingResource('platform.test.remove');\n        expect(removeResult).toSucceed();\n      });\n\n      // Verify it's gone\n      expect(result.current.state.pendingResources.has('platform.test.remove')).toBe(false);\n\n      // Try to remove it again - should fail\n      act(() => {\n        const removeResult = result.current.actions.removePendingResource('platform.test.remove');\n        expect(removeResult).toFailWith(/not found/i);\n      });\n    });\n\n    test('removePendingResource clears selection if resource was selected', async () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Create and select a pending resource\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.selected',\n          resourceTypeName: 'json',\n          json: { message: 'Selected resource' }\n        });\n        expect(createResult).toSucceed();\n      });\n\n      act(() => {\n        const selectResult = result.current.actions.selectResource('platform.test.selected');\n        expect(selectResult).toSucceed();\n      });\n\n      // Verify selection\n      expect(result.current.state.selectedResourceId).toBe('platform.test.selected');\n\n      // Remove the selected resource\n      act(() => {\n        const removeResult = result.current.actions.removePendingResource('platform.test.selected');\n        expect(removeResult).toSucceed();\n      });\n\n      // Selection should be cleared\n      expect(result.current.state.selectedResourceId).toBeNull();\n      expect(result.current.state.resolutionResult).toBeNull();\n    });\n  });\n\n  describe('Enhanced Pending Resource Application', () => {\n    test('applyPendingResources provides detailed diagnostics', async () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Apply context first\n      act(() => {\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n      });\n\n      // Initially no changes to apply - should fail\n      await act(async () => {\n        const applyResult = await result.current.actions.applyPendingResources();\n        expect(applyResult).toFailWith(/no pending changes/i);\n      });\n\n      // Create some pending resources and edits\n      await act(async () => {\n        const createResult1 = await result.current.actions.createPendingResource({\n          id: 'platform.test.apply1',\n          resourceTypeName: 'json',\n          json: { message: 'First resource' }\n        });\n        expect(createResult1).toSucceed();\n\n        const createResult2 = await result.current.actions.createPendingResource({\n          id: 'platform.test.apply2',\n          resourceTypeName: 'json',\n          json: { message: 'Second resource' }\n        });\n        expect(createResult2).toSucceed();\n      });\n\n      // Add an edit to one of the pending resources\n      act(() => {\n        const editResult = result.current.actions.saveEdit('platform.test.apply1', {\n          message: 'Edited first resource'\n        });\n        expect(editResult).toSucceed();\n      });\n\n      // Add an edit to an existing resource (if any exist)\n      const existingResourceIds = Array.from(processed.system.resourceManager.resources.keys());\n      if (existingResourceIds.length > 0) {\n        act(() => {\n          const editResult = result.current.actions.saveEdit(existingResourceIds[0], { edited: true });\n          expect(editResult).toSucceed();\n        });\n      }\n\n      // Now apply all changes - should provide detailed diagnostics\n      await act(async () => {\n        const applyResult = await result.current.actions.applyPendingResources();\n        expect(applyResult).toSucceedAndSatisfy((data) => {\n          expect(data.appliedCount).toBeGreaterThan(0);\n          expect(data.newResourceCount).toBe(2); // Two new resources created\n          expect(data.pendingResourceEditCount).toBe(1); // One pending resource edit\n          expect(data.deletionCount).toBe(0); // No deletions\n          // May have existing resource edits if existing resources were found\n          expect(data.existingResourceEditCount).toBeGreaterThanOrEqual(0);\n\n          // Verify total count matches sum\n          expect(data.appliedCount).toBe(\n            data.existingResourceEditCount +\n              data.pendingResourceEditCount +\n              data.newResourceCount +\n              data.deletionCount\n          );\n        });\n      });\n\n      // After successful application, another attempt should fail with no changes\n      await act(async () => {\n        const applyResult = await result.current.actions.applyPendingResources();\n        expect(applyResult).toFailWith(/no pending changes/i);\n      });\n    });\n\n    test('applyPendingResources fails gracefully with system errors', async () => {\n      const processed = buildProcessedResources();\n      // Pass undefined for system update handler to trigger error\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, undefined));\n\n      // Create a pending resource\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.error',\n          resourceTypeName: 'json',\n          json: { message: 'Will cause error' }\n        });\n        expect(createResult).toSucceed();\n      });\n\n      // Apply should fail with proper error message for missing handler\n      await act(async () => {\n        const applyResult = await result.current.actions.applyPendingResources();\n        expect(applyResult).toFailWith(/no system update handler/i);\n      });\n    });\n  });\n\n  describe('Error Handling Edge Cases', () => {\n    test('methods handle various error conditions gracefully', () => {\n      const processed = buildProcessedResources();\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Test edge cases with detailed error messages\n      act(() => {\n        // Empty resource ID\n        const removeResult = result.current.actions.removePendingResource('');\n        expect(removeResult).toFailWith(/not a valid resource ID/i);\n\n        // Whitespace-only resource ID\n        const removeResult2 = result.current.actions.removePendingResource('   ');\n        expect(removeResult2).toFailWith(/not a valid resource ID/i);\n\n        // Apply context first to create resolver\n        const applyResult = result.current.actions.applyContext();\n        expect(applyResult).toSucceed();\n\n        // Cache operations should succeed after context is applied\n        const resetResult1 = result.current.actions.resetCache();\n        const resetResult2 = result.current.actions.resetCache();\n        expect(resetResult1).toSucceed();\n        expect(resetResult2).toSucceed();\n      });\n    });\n  });\n});\n"]}