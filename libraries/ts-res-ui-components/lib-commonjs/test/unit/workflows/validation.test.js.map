{"version":3,"file":"validation.test.js","sourceRoot":"","sources":["../../../../src/test/unit/workflows/validation.test.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,8BAA4B;AAC5B,wCAAgD;AAChD,kDAAyD;AACzD,0EAAuE;AACvE,sEAA8E;AAE9E,SAAS,uBAAuB;IAC9B,MAAM,MAAM,GAAG,IAAA,8CAA2B,GAAE,CAAC,OAAO,EAAE,CAAC;IACvD,MAAM,kBAAkB,GAAG,MAAM,CAAC,eAAe;SAC9C,6BAA6B,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;SACxD,OAAO,EAAE,CAAC;IACb,MAAM,QAAQ,GAAG,gBAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC;QAC/C,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,wBAAwB,EAAE,MAAM,CAAC,wBAAwB;KAC1D,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;IACxE,OAAO;QACL,MAAM;QACN,kBAAkB;QAClB,QAAQ;QACR,aAAa,EAAE,WAAW,CAAC,MAAM;QACjC,OAAO,EAAE,EAAE,cAAc,EAAE,WAAW,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;KAC1F,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IACjD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAI,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC/D,sDAAsD;YACtD,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAoB;YACxE,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,qBAAqB;YACnG,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,sBAAsB;YACvF,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB;YAC5F,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B;YACxF,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,4BAA4B;YAC1F,MAAM,CAAC,iBAAQ,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,uBAAuB;QACvG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,IAAI,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,SAAS,GAAG,uBAAuB,EAAE,CAAC;YAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAChC,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAErC,2BAA2B;YAC3B,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAErF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,uCAAkB,EAAC,SAAS,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC,CAAC;YAEtG,qDAAqD;YACrD,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE;gBACvC,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa;gBACjD,oBAAoB,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB;aAChE,CAAC,CAAC;YAEH,IAAA,WAAG,EAAC,GAAG,EAAE;gBACP,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE;gBACjC,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa;gBACjD,oBAAoB,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB;aAChE,CAAC,CAAC;YAEH,iDAAiD;YACjD,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBACtE,EAAE,EAAE,2BAA2B;oBAC/B,gBAAgB,EAAE,MAAM;oBACxB,IAAI,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;iBAClC,CAAC,CAAC;gBAEH,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;gBAC5C,IAAI,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC;oBAC7B,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC1D,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YAC/F,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE;gBACvC,EAAE,EAAE,2BAA2B;gBAC/B,QAAQ,EAAE,eAAe;gBACzB,UAAU,EAAE,eAAe,EAAE,UAAU;gBACvC,wBAAwB,EAAE,eAAe,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU;aACvE,CAAC,CAAC;YAEH,kCAAkC;YAClC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,eAAgB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEpD,oCAAoC;YACpC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Minimal reproduction tests for validation behavior\n */\n\nimport '@fgv/ts-utils-jest';\nimport { Validate, Runtime } from '@fgv/ts-res';\nimport { renderHook, act } from '@testing-library/react';\nimport { useResolutionState } from '../../../hooks/useResolutionState';\nimport { createTsResSystemFromConfig } from '../../../utils/tsResIntegration';\n\nfunction buildProcessedResources() {\n  const system = createTsResSystemFromConfig().orThrow();\n  const compiledCollection = system.resourceManager\n    .getCompiledResourceCollection({ includeMetadata: true })\n    .orThrow();\n  const resolver = Runtime.ResourceResolver.create({\n    resourceManager: system.resourceManager,\n    qualifierTypes: system.qualifierTypes,\n    contextQualifierProvider: system.contextQualifierProvider\n  }).orThrow();\n  const resourceIds = Array.from(system.resourceManager.resources.keys());\n  return {\n    system,\n    compiledCollection,\n    resolver,\n    resourceCount: resourceIds.length,\n    summary: { totalResources: resourceIds.length, resourceIds, errorCount: 0, warnings: [] }\n  };\n}\n\ndescribe('Validation Behavior Investigation', () => {\n  describe('Resource ID Validation', () => {\n    test('Validate.isValidResourceId behavior with edge cases', () => {\n      // Test the actual ts-res validation function directly\n      expect(Validate.isValidResourceId('')).toBe(false); // Empty should fail\n      expect(Validate.isValidResourceId('invalid format with spaces')).toBe(false); // Spaces should fail\n      expect(Validate.isValidResourceId('invalid-format')).toBe(true); // Hyphens should pass\n      expect(Validate.isValidResourceId('platform.test.resource')).toBe(true); // Dots should pass\n      expect(Validate.isValidResourceId('123invalid')).toBe(false); // Can't start with number\n      expect(Validate.isValidResourceId('_validStart')).toBe(true); // Can start with underscore\n      expect(Validate.isValidResourceId('valid_with-hyphens.and.dots')).toBe(true); // Complex valid format\n    });\n  });\n\n  describe('Context Conditions Investigation', () => {\n    test('Debug context application in resource creation workflow', async () => {\n      const processed = buildProcessedResources();\n      const mockOnMessage = jest.fn();\n      const mockOnSystemUpdate = jest.fn();\n\n      // Log available qualifiers\n      console.log('Available qualifiers:', Array.from(processed.system.qualifiers.keys()));\n\n      const { result } = renderHook(() => useResolutionState(processed, mockOnMessage, mockOnSystemUpdate));\n\n      // Test 1: Set context step by step and log the state\n      console.log('=== SETTING CONTEXT ===');\n      act(() => {\n        result.current.actions.updateContextValue('language', 'en-US');\n      });\n      console.log('After updateContextValue:', {\n        contextValues: result.current.state.contextValues,\n        pendingContextValues: result.current.state.pendingContextValues\n      });\n\n      act(() => {\n        result.current.actions.applyContext();\n      });\n      console.log('After applyContext:', {\n        contextValues: result.current.state.contextValues,\n        pendingContextValues: result.current.state.pendingContextValues\n      });\n\n      // Test 2: Create resource and inspect the result\n      console.log('=== CREATING RESOURCE ===');\n      await act(async () => {\n        const createResult = await result.current.actions.createPendingResource({\n          id: 'platform.test.contextTest',\n          resourceTypeName: 'json',\n          json: { message: 'Context test' }\n        });\n\n        console.log('Create result:', createResult);\n        if (createResult.isFailure()) {\n          console.error('Creation failed:', createResult.message);\n        }\n      });\n\n      // Test 3: Inspect the created resource\n      const pendingResource = result.current.state.pendingResources.get('platform.test.contextTest');\n      console.log('Created pending resource:', {\n        id: 'platform.test.contextTest',\n        resource: pendingResource,\n        candidates: pendingResource?.candidates,\n        firstCandidateConditions: pendingResource?.candidates?.[0]?.conditions\n      });\n\n      // Verify the resource was created\n      expect(pendingResource).toBeDefined();\n      expect(pendingResource!.candidates?.length).toBe(1);\n\n      // Log any messages from the process\n      console.log('Hook messages:', mockOnMessage.mock.calls);\n    });\n  });\n});\n"]}