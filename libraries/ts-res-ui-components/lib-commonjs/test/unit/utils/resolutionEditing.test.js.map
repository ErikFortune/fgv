{"version":3,"file":"resolutionEditing.test.js","sourceRoot":"","sources":["../../../../src/test/unit/utils/resolutionEditing.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport { succeed, fail } from '@fgv/ts-utils';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport {\n  validateEditedResource,\n  computeResourceDelta,\n  createCandidateDeclarations,\n  extractResolutionContext,\n  createEditCollisionKey,\n  checkEditConflicts,\n  type EditedResourceInfo,\n  type EditValidationResult\n} from '../../../utils/resolutionEditing';\n\ndescribe('resolutionEditing utilities', () => {\n  describe('validateEditedResource', () => {\n    test('validates valid JSON objects', () => {\n      const validValue = { message: 'Hello', count: 42 };\n      const result = validateEditedResource(validValue);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('validates simple values', () => {\n      expect(validateEditedResource('string')).toEqual({\n        isValid: true,\n        errors: [],\n        warnings: []\n      });\n\n      expect(validateEditedResource(123)).toEqual({\n        isValid: true,\n        errors: [],\n        warnings: []\n      });\n\n      expect(validateEditedResource(true)).toEqual({\n        isValid: true,\n        errors: [],\n        warnings: []\n      });\n    });\n\n    test('rejects null values', () => {\n      const result = validateEditedResource(null);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Resource value cannot be null or undefined');\n    });\n\n    test('rejects undefined values', () => {\n      const result = validateEditedResource(undefined as unknown as JsonValue);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Resource value cannot be null or undefined');\n    });\n\n    // removed: circular reference detection is intentionally not enforced\n\n    test('handles complex nested objects', () => {\n      const complexObj = {\n        level1: {\n          level2: {\n            level3: {\n              value: 'deep value',\n              array: [1, 2, { nested: true }]\n            }\n          }\n        },\n        other: 'value'\n      };\n\n      const result = validateEditedResource(complexObj);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('handles arrays with objects', () => {\n      const arrayValue = [{ id: 1, name: 'first' }, { id: 2, name: 'second' }, 'simple string', 123];\n\n      const result = validateEditedResource(arrayValue);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('detects JSON serialization errors', () => {\n      // Create an object with a property that can't be serialized\n      const badObj = {\n        name: 'test'\n      };\n\n      // Add a circular reference to cause JSON serialization to fail\n      (badObj as any).self = badObj;\n\n      const result = validateEditedResource(badObj);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors[0]).toContain('Invalid JSON');\n    });\n  });\n\n  describe('computeResourceDelta', () => {\n    test('returns null for identical values', () => {\n      const baseValue = { message: 'Hello' };\n      const resolvedValue = { message: 'Hello' };\n      const editedValue = { message: 'Hello' };\n\n      const result = computeResourceDelta(baseValue, resolvedValue, editedValue);\n\n      expect(result).toSucceed();\n      expect(result.orThrow()).toBe(null);\n    });\n\n    test('computes delta for simple changes', () => {\n      const baseValue = { message: 'Hello' };\n      const resolvedValue = { message: 'Hello' };\n      const editedValue = { message: 'Hello World' };\n\n      const result = computeResourceDelta(baseValue, resolvedValue, editedValue);\n\n      expect(result).toSucceed();\n      // The exact delta format depends on ts-json implementation\n      expect(result.orThrow()).toBeDefined();\n    });\n\n    test('computes delta for additions', () => {\n      const baseValue = { message: 'Hello' };\n      const resolvedValue = { message: 'Hello' };\n      const editedValue = { message: 'Hello', newField: 'added' };\n\n      const result = computeResourceDelta(baseValue, resolvedValue, editedValue);\n\n      expect(result).toSucceed();\n      expect(result.orThrow()).toBeDefined();\n    });\n\n    test('handles deletion by computing appropriate delta', () => {\n      const baseValue = { message: 'Hello', extra: 'field' };\n      const resolvedValue = { message: 'Hello', extra: 'field' };\n      const editedValue = { message: 'Hello' };\n\n      const result = computeResourceDelta(baseValue, resolvedValue, editedValue);\n\n      expect(result).toSucceed();\n      expect(result.orThrow()).toBeDefined();\n    });\n\n    test('falls back to full replacement on diff failure', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n      // The function should return the edited value as fallback when diff fails\n      // Since we can't easily mock the diff function in this context, we'll test the actual fallback behavior\n      const editedValue = { message: 'Edited' };\n      const resolvedValue = { original: 'value' };\n      const result = computeResourceDelta(undefined, resolvedValue, editedValue);\n\n      expect(result).toSucceed();\n      // The result should contain the actual diff result, not exactly the edited value\n      expect(result.orThrow()).toBeDefined();\n\n      consoleSpy.mockRestore();\n    });\n\n    test('handles complex nested objects', () => {\n      const resolvedValue = {\n        user: { name: 'John', age: 30 },\n        settings: { theme: 'dark', language: 'en' }\n      };\n      const editedValue = {\n        user: { name: 'Jane', age: 30 },\n        settings: { theme: 'light', language: 'en' }\n      };\n\n      const result = computeResourceDelta(undefined, resolvedValue, editedValue);\n\n      expect(result).toSucceed();\n      expect(result.orThrow()).toBeDefined();\n    });\n  });\n\n  describe('createCandidateDeclarations', () => {\n    test('creates declarations for edited resources', () => {\n      const editedResources = new Map([\n        [\n          'resource1',\n          {\n            originalValue: { message: 'Hello' },\n            editedValue: { message: 'Hello World' },\n            delta: { message: 'Hello World' }\n          }\n        ]\n      ]);\n      const currentContext = { language: 'en', territory: 'US' };\n\n      const result = createCandidateDeclarations(editedResources, currentContext);\n\n      expect(result).toHaveLength(1);\n      // priority is no longer injected; verify essentials only\n      expect(result[0].id).toBe('resource1');\n      expect(result[0].json).toEqual({ message: 'Hello World' });\n      expect(result[0].isPartial).toBe(true);\n      expect(result[0].mergeMethod).toBe('augment');\n      expect(result[0].conditions).toEqual([\n        { qualifierName: 'language', operator: 'matches', value: 'en' },\n        { qualifierName: 'territory', operator: 'matches', value: 'US' }\n      ]);\n    });\n\n    test('skips resources with no delta', () => {\n      const editedResources = new Map([\n        [\n          'resource1',\n          {\n            originalValue: { message: 'Hello' },\n            editedValue: { message: 'Hello' },\n            delta: null // No changes\n          }\n        ],\n        [\n          'resource2',\n          {\n            originalValue: { message: 'Hi' },\n            editedValue: { message: 'Hi there' },\n            delta: { message: 'Hi there' }\n          }\n        ]\n      ]);\n      const currentContext = { language: 'en' };\n\n      const result = createCandidateDeclarations(editedResources, currentContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].id).toBe('resource2');\n    });\n\n    test('handles empty context', () => {\n      const editedResources = new Map([\n        [\n          'resource1',\n          {\n            originalValue: { message: 'Hello' },\n            editedValue: { message: 'Hello World' },\n            delta: { message: 'Hello World' }\n          }\n        ]\n      ]);\n      const currentContext = {};\n\n      const result = createCandidateDeclarations(editedResources, currentContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].conditions).toBeUndefined();\n    });\n\n    test('filters out empty context values', () => {\n      const editedResources = new Map([\n        [\n          'resource1',\n          {\n            originalValue: { message: 'Hello' },\n            editedValue: { message: 'Hello World' },\n            delta: { message: 'Hello World' }\n          }\n        ]\n      ]);\n      const currentContext = {\n        language: 'en',\n        territory: '', // Empty string\n        platform: '   ', // Whitespace only\n        theme: 'dark'\n      };\n\n      const result = createCandidateDeclarations(editedResources, currentContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].conditions).toHaveLength(2); // Only language and theme\n      expect(result[0].conditions).toEqual([\n        { qualifierName: 'language', operator: 'matches', value: 'en' },\n        { qualifierName: 'theme', operator: 'matches', value: 'dark' }\n      ]);\n    });\n\n    test('handles multiple edited resources', () => {\n      const editedResources = new Map([\n        [\n          'resource1',\n          {\n            originalValue: { msg: 'A' },\n            editedValue: { msg: 'A1' },\n            delta: { msg: 'A1' }\n          }\n        ],\n        [\n          'resource2',\n          {\n            originalValue: { msg: 'B' },\n            editedValue: { msg: 'B1' },\n            delta: { msg: 'B1' }\n          }\n        ]\n      ]);\n      const currentContext = { language: 'en' };\n\n      const result = createCandidateDeclarations(editedResources, currentContext);\n\n      expect(result).toHaveLength(2);\n      expect(result.map((r) => r.id)).toEqual(['resource1', 'resource2']);\n    });\n  });\n\n  describe('extractResolutionContext', () => {\n    test('filters out empty and undefined values', () => {\n      const mockResolver = {} as any;\n      const contextValues = {\n        language: 'en',\n        territory: '',\n        platform: undefined as any,\n        theme: 'dark',\n        empty: '   '\n      };\n\n      const result = extractResolutionContext(mockResolver, contextValues);\n\n      expect(result).toEqual({\n        language: 'en',\n        theme: 'dark'\n      });\n    });\n\n    test('trims whitespace from values', () => {\n      const mockResolver = {} as any;\n      const contextValues = {\n        language: '  en  ',\n        territory: ' US '\n      };\n\n      const result = extractResolutionContext(mockResolver, contextValues);\n\n      expect(result).toEqual({\n        language: 'en',\n        territory: 'US'\n      });\n    });\n\n    test('handles empty context', () => {\n      const mockResolver = {} as any;\n      const contextValues = {};\n\n      const result = extractResolutionContext(mockResolver, contextValues);\n\n      expect(result).toEqual({});\n    });\n\n    test('handles all empty values', () => {\n      const mockResolver = {} as any;\n      const contextValues = {\n        language: '',\n        territory: '   ',\n        platform: undefined as any\n      };\n\n      const result = extractResolutionContext(mockResolver, contextValues);\n\n      expect(result).toEqual({});\n    });\n  });\n\n  describe('createEditCollisionKey', () => {\n    test('creates consistent key for same inputs', () => {\n      const resourceId = 'resource1';\n      const context = { language: 'en', territory: 'US' };\n\n      const key1 = createEditCollisionKey(resourceId, context);\n      const key2 = createEditCollisionKey(resourceId, context);\n\n      expect(key1).toBe(key2);\n      expect(key1).toMatch(/^resource1\\?/);\n    });\n\n    test('sorts context entries for consistency', () => {\n      const resourceId = 'resource1';\n      const context1 = { language: 'en', territory: 'US' };\n      const context2 = { territory: 'US', language: 'en' };\n\n      const key1 = createEditCollisionKey(resourceId, context1);\n      const key2 = createEditCollisionKey(resourceId, context2);\n\n      expect(key1).toBe(key2);\n    });\n\n    test('creates different keys for different resources', () => {\n      const context = { language: 'en' };\n      const key1 = createEditCollisionKey('resource1', context);\n      const key2 = createEditCollisionKey('resource2', context);\n\n      expect(key1).not.toBe(key2);\n    });\n\n    test('creates different keys for different contexts', () => {\n      const resourceId = 'resource1';\n      const key1 = createEditCollisionKey(resourceId, { language: 'en' });\n      const key2 = createEditCollisionKey(resourceId, { language: 'fr' });\n\n      expect(key1).not.toBe(key2);\n    });\n\n    test('handles empty context', () => {\n      const key = createEditCollisionKey('resource1', {});\n      expect(key).toBe('resource1?');\n    });\n\n    test('properly encodes context values', () => {\n      const resourceId = 'resource1';\n      const context = { language: 'en', territory: 'US' };\n      const key = createEditCollisionKey(resourceId, context);\n\n      expect(key).toContain('language=en');\n      expect(key).toContain('territory=US');\n      expect(key).toContain('&');\n    });\n  });\n\n  describe('checkEditConflicts', () => {\n    let mockResourceManager: any;\n\n    beforeEach(() => {\n      mockResourceManager = {\n        getBuiltResource: jest.fn()\n      };\n    });\n\n    test('returns no conflicts for single candidate resources', () => {\n      const mockResource = {\n        candidates: [{ value: 'single candidate' }]\n      };\n      mockResourceManager.getBuiltResource.mockReturnValue(succeed(mockResource));\n\n      const editedResources = new Map([['resource1', { some: 'edit' }]]);\n      const currentContext = { language: 'en' };\n\n      const result = checkEditConflicts(mockResourceManager, editedResources, currentContext);\n\n      expect(result.conflicts).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('warns about multiple candidates', () => {\n      const mockResource = {\n        candidates: [{ value: 'candidate 1' }, { value: 'candidate 2' }, { value: 'candidate 3' }]\n      };\n      mockResourceManager.getBuiltResource.mockReturnValue(succeed(mockResource));\n\n      const editedResources = new Map([['resource1', { some: 'edit' }]]);\n      const currentContext = { language: 'en' };\n\n      const result = checkEditConflicts(mockResourceManager, editedResources, currentContext);\n\n      expect(result.conflicts).toEqual([]);\n      expect(result.warnings).toHaveLength(1);\n      expect(result.warnings[0]).toContain('Resource resource1 has 3 candidates');\n    });\n\n    test('handles resource manager errors gracefully', () => {\n      mockResourceManager.getBuiltResource.mockReturnValue(fail('Resource not found'));\n\n      const editedResources = new Map([['resource1', { some: 'edit' }]]);\n      const currentContext = { language: 'en' };\n\n      const result = checkEditConflicts(mockResourceManager, editedResources, currentContext);\n\n      expect(result.conflicts).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('handles multiple edited resources', () => {\n      const singleCandidate = { candidates: [{ value: 'single' }] };\n      const multipleCandidate = { candidates: [{ value: 'one' }, { value: 'two' }] };\n\n      mockResourceManager.getBuiltResource\n        .mockReturnValueOnce(succeed(singleCandidate))\n        .mockReturnValueOnce(succeed(multipleCandidate));\n\n      const editedResources = new Map<string, JsonValue>([\n        ['resource1', { some: 'edit' }],\n        ['resource2', { other: 'edit' }]\n      ]);\n      const currentContext = { language: 'en' };\n\n      const result = checkEditConflicts(mockResourceManager, editedResources, currentContext);\n\n      expect(result.conflicts).toEqual([]);\n      expect(result.warnings).toHaveLength(1);\n      expect(result.warnings[0]).toContain('Resource resource2 has 2 candidates');\n    });\n\n    test('handles empty edited resources', () => {\n      const editedResources = new Map();\n      const currentContext = { language: 'en' };\n\n      const result = checkEditConflicts(mockResourceManager, editedResources, currentContext);\n\n      expect(result.conflicts).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('handles exceptions in resource manager gracefully', () => {\n      mockResourceManager.getBuiltResource.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n\n      const editedResources = new Map([['resource1', { some: 'edit' }]]);\n      const currentContext = { language: 'en' };\n\n      const result = checkEditConflicts(mockResourceManager, editedResources, currentContext);\n\n      expect(result.conflicts).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n  });\n});\n"]}