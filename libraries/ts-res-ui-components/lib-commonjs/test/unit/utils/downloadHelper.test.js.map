{"version":3,"file":"downloadHelper.test.js","sourceRoot":"","sources":["../../../../src/test/unit/utils/downloadHelper.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport { DownloadUtils } from '../../../utils/downloadHelper';\n\ndescribe('DownloadUtils', () => {\n  // Mock DOM APIs\n  let mockLink: HTMLAnchorElement;\n  let mockBlob: Blob;\n  let mockURL: string;\n  let appendChildSpy: jest.SpyInstance;\n  let removeChildSpy: jest.SpyInstance;\n  let createObjectURLSpy: jest.SpyInstance;\n  let revokeObjectURLSpy: jest.SpyInstance;\n  let clickSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    // Mock DOM elements and APIs\n    mockLink = {\n      href: '',\n      download: '',\n      style: { display: '' },\n      click: jest.fn()\n    } as unknown as HTMLAnchorElement;\n\n    mockURL = 'blob:mock-url';\n\n    // Mock document methods\n    jest.spyOn(document, 'createElement').mockImplementation((tagName: string) => {\n      if (tagName === 'a') {\n        return mockLink;\n      }\n      return {} as HTMLElement;\n    });\n\n    appendChildSpy = jest.spyOn(document.body, 'appendChild').mockImplementation(() => mockLink);\n    removeChildSpy = jest.spyOn(document.body, 'removeChild').mockImplementation(() => mockLink);\n\n    // Mock URL methods\n    createObjectURLSpy = jest.spyOn(URL, 'createObjectURL').mockReturnValue(mockURL);\n    revokeObjectURLSpy = jest.spyOn(URL, 'revokeObjectURL').mockImplementation(() => {});\n\n    // Mock click\n    clickSpy = mockLink.click as jest.Mock;\n\n    // Mock Blob constructor\n    global.Blob = jest.fn().mockImplementation((content: BlobPart[], options?: BlobPropertyBag) => {\n      mockBlob = {\n        size: content.join('').length,\n        type: options?.type || 'text/plain'\n      } as Blob;\n      return mockBlob;\n    }) as jest.MockedClass<typeof Blob>;\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('createTimestamp', () => {\n    test('should use custom format when provided', () => {\n      const customFormat = '2024-01-15-10-30-00';\n      const result = DownloadUtils.createTimestamp(customFormat);\n      expect(result).toBe(customFormat);\n    });\n\n    test('should generate ISO timestamp with colons replaced when no custom format', () => {\n      // Mock Date to return a fixed timestamp\n      const fixedDate = new Date('2024-01-15T10:30:45.123Z');\n      jest.spyOn(global, 'Date').mockImplementation(() => fixedDate);\n\n      const result = DownloadUtils.createTimestamp();\n      expect(result).toBe('2024-01-15T10-30-45');\n\n      jest.restoreAllMocks();\n    });\n\n    test('should handle date formatting correctly', () => {\n      const result = DownloadUtils.createTimestamp();\n      // Should be in format YYYY-MM-DDTHH-mm-ss (colons replaced with dashes)\n      expect(result).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}$/);\n    });\n  });\n\n  describe('generateFilename', () => {\n    test('should succeed with basic filename', () => {\n      const result = DownloadUtils.generateFilename('test-file');\n      expect(result).toSucceedAndSatisfy((filename) => {\n        expect(filename).toMatch(/^test-file-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      });\n    });\n\n    test('should fail with empty base filename', () => {\n      expect(DownloadUtils.generateFilename('')).toFailWith(/Base filename cannot be empty/);\n      expect(DownloadUtils.generateFilename('   ')).toFailWith(/Base filename cannot be empty/);\n    });\n\n    test('should trim whitespace from base filename', () => {\n      const result = DownloadUtils.generateFilename('  test-file  ');\n      expect(result).toSucceedAndSatisfy((filename) => {\n        expect(filename).toMatch(/^test-file-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      });\n    });\n\n    test('should add type when provided', () => {\n      const result = DownloadUtils.generateFilename('base', 'source');\n      expect(result).toSucceedAndSatisfy((filename) => {\n        expect(filename).toMatch(/^base-source-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      });\n    });\n\n    test('should skip timestamp when includeTimestamp is false', () => {\n      const result = DownloadUtils.generateFilename('test-file', 'type', {\n        includeTimestamp: false\n      });\n      expect(result).toSucceedWith('test-file-type.json');\n    });\n\n    test('should use custom extension', () => {\n      const result = DownloadUtils.generateFilename('test-file', undefined, {\n        extension: 'txt',\n        includeTimestamp: false\n      });\n      expect(result).toSucceedWith('test-file.txt');\n    });\n\n    test('should use custom timestamp format', () => {\n      const customTimestamp = '2024-01-15-custom';\n      const result = DownloadUtils.generateFilename('test-file', undefined, {\n        timestampFormat: customTimestamp\n      });\n      expect(result).toSucceedWith(`test-file-${customTimestamp}.json`);\n    });\n\n    test('should apply filename transformer', () => {\n      const transformer = (filename: string) => `transformed-${filename}`;\n      const result = DownloadUtils.generateFilename('test-file', undefined, {\n        includeTimestamp: false,\n        filenameTransformer: transformer\n      });\n      expect(result).toSucceedWith('transformed-test-file.json');\n    });\n\n    test('should handle complex filename generation with all options', () => {\n      const options: DownloadUtils.DownloadOptions = {\n        extension: 'txt',\n        timestampFormat: '2024-custom',\n        filenameTransformer: (name) => `prefix-${name}-suffix`\n      };\n\n      const result = DownloadUtils.generateFilename('base', 'type', options);\n      expect(result).toSucceedWith('prefix-base-type-2024-custom-suffix.txt');\n    });\n  });\n\n  describe('downloadFile', () => {\n    test('should successfully download string data with default options', () => {\n      const result = DownloadUtils.downloadFile('test content', 'test');\n\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(['test content'], { type: 'application/json' });\n      expect(createObjectURLSpy).toHaveBeenCalledWith(mockBlob);\n      expect(mockLink.href).toBe(mockURL);\n      expect(mockLink.download).toMatch(/^ts-res-export-test-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      expect(mockLink.style.display).toBe('none');\n      expect(appendChildSpy).toHaveBeenCalledWith(mockLink);\n      expect(clickSpy).toHaveBeenCalled();\n      expect(removeChildSpy).toHaveBeenCalledWith(mockLink);\n      expect(revokeObjectURLSpy).toHaveBeenCalledWith(mockURL);\n    });\n\n    test('should stringify JSON data when extension is json', () => {\n      const testData = { key: 'value', nested: { count: 42 } };\n      const result = DownloadUtils.downloadFile(testData, 'test');\n\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(\n        ['{\\n  \"key\": \"value\",\\n  \"nested\": {\\n    \"count\": 42\\n  }\\n}'],\n        { type: 'application/json' }\n      );\n    });\n\n    test('should convert non-string data to string for non-json extensions', () => {\n      const testData = { key: 'value' };\n      const result = DownloadUtils.downloadFile(testData, 'test', { extension: 'txt' });\n\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(['[object Object]'], { type: 'text/plain' });\n    });\n\n    test('should use custom MIME type when provided', () => {\n      const result = DownloadUtils.downloadFile('content', 'test', {\n        mimeType: 'text/csv',\n        extension: 'csv'\n      });\n\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(['content'], { type: 'text/csv' });\n    });\n\n    test('should use custom base filename', () => {\n      const result = DownloadUtils.downloadFile('content', 'test', {\n        baseFilename: 'custom-name',\n        includeTimestamp: false\n      });\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toBe('custom-name-test.json');\n    });\n\n    test('should fail when filename generation fails', () => {\n      const result = DownloadUtils.downloadFile('content', 'test', {\n        baseFilename: '' // This will cause filename generation to fail\n      });\n\n      expect(result).toFailWith(/Failed to generate filename: Base filename cannot be empty/);\n      expect(global.Blob).not.toHaveBeenCalled();\n    });\n\n    test('should handle DOM errors and format them correctly', () => {\n      // Mock createElement to throw an error\n      jest.spyOn(document, 'createElement').mockImplementation(() => {\n        throw new Error('DOM error');\n      });\n\n      const result = DownloadUtils.downloadFile('content', 'test');\n\n      expect(result).toFailWith(/Failed to download file: DOM error/);\n    });\n\n    test('should handle Blob creation errors', () => {\n      // Mock Blob constructor to throw an error\n      global.Blob = jest.fn().mockImplementation(() => {\n        throw new Error('Blob creation failed');\n      }) as jest.MockedClass<typeof Blob>;\n\n      const result = DownloadUtils.downloadFile('content', 'test');\n\n      expect(result).toFailWith(/Failed to download file: Blob creation failed/);\n    });\n\n    test('should handle URL.createObjectURL errors', () => {\n      createObjectURLSpy.mockImplementation(() => {\n        throw new Error('URL creation failed');\n      });\n\n      const result = DownloadUtils.downloadFile('content', 'test');\n\n      expect(result).toFailWith(/Failed to download file: URL creation failed/);\n    });\n\n    test('should pass through all download options', () => {\n      const options: DownloadUtils.DownloadOptions = {\n        baseFilename: 'custom-base',\n        extension: 'csv',\n        includeTimestamp: false,\n        mimeType: 'text/csv',\n        filenameTransformer: (name) => `processed-${name}`\n      };\n\n      const result = DownloadUtils.downloadFile('data', 'export', options);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toBe('processed-custom-base-export.csv');\n      expect(global.Blob).toHaveBeenCalledWith(['data'], { type: 'text/csv' });\n    });\n  });\n\n  describe('downloadTsResJson', () => {\n    test('should download with ts-res specific defaults', () => {\n      const testData = { resources: ['a', 'b'] };\n      const result = DownloadUtils.downloadTsResJson(testData, 'bundle');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      expect(global.Blob).toHaveBeenCalledWith([JSON.stringify(testData, null, 2)], {\n        type: 'application/json'\n      });\n    });\n\n    test('should handle complex data structures', () => {\n      const complexData = {\n        config: { version: '1.0' },\n        resources: [\n          { id: 'res1', value: 'test' },\n          { id: 'res2', value: 'another' }\n        ]\n      };\n\n      const result = DownloadUtils.downloadTsResJson(complexData, 'complex');\n      expect(result).toSucceed();\n    });\n\n    test('should propagate download errors', () => {\n      // Mock createElement to throw an error\n      jest.spyOn(document, 'createElement').mockImplementation(() => {\n        throw new Error('Download failed');\n      });\n\n      const result = DownloadUtils.downloadTsResJson({}, 'test');\n      expect(result).toFailWith(/Failed to download file: Download failed/);\n    });\n  });\n\n  describe('downloadBundle', () => {\n    test('should download bundle with enhanced naming', () => {\n      const bundleData = { config: {}, resources: {} };\n      const result = DownloadUtils.downloadBundle(bundleData, 5, 'my-config');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /^ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-5res-my-config\\.json$/\n      );\n    });\n\n    test('should clean config name by removing invalid characters', () => {\n      const result = DownloadUtils.downloadBundle({}, 3, 'my config@#$%name!');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-3res-my-config----name-/\n      );\n    });\n\n    test('should handle missing resource count', () => {\n      const result = DownloadUtils.downloadBundle({}, undefined, 'config-name');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-config-name\\.json$/\n      );\n      expect(mockLink.download).not.toMatch(/\\d+res/);\n    });\n\n    test('should handle zero resource count', () => {\n      const result = DownloadUtils.downloadBundle({}, 0, 'empty-config');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-empty-config\\.json$/\n      );\n      expect(mockLink.download).not.toMatch(/0res/);\n    });\n\n    test('should handle missing config name', () => {\n      const result = DownloadUtils.downloadBundle({}, 7);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-7res\\.json$/);\n    });\n\n    test('should handle both missing resource count and config name', () => {\n      const result = DownloadUtils.downloadBundle({});\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-bundle-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n    });\n\n    test('should propagate download errors', () => {\n      global.Blob = jest.fn().mockImplementation(() => {\n        throw new Error('Bundle download failed');\n      }) as jest.MockedClass<typeof Blob>;\n\n      const result = DownloadUtils.downloadBundle({}, 5, 'config');\n      expect(result).toFailWith(/Failed to download file: Bundle download failed/);\n    });\n  });\n\n  describe('downloadResources', () => {\n    test('should download resources with enhanced naming', () => {\n      const resourceData = [{ id: 'res1' }, { id: 'res2' }];\n      const result = DownloadUtils.downloadResources(resourceData, 10, 'my-collection');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /^ts-res-resources-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-10items-my-collection\\.json$/\n      );\n    });\n\n    test('should clean collection name', () => {\n      const result = DownloadUtils.downloadResources({}, 2, 'special!@#collection$%^name');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /ts-res-resources-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-2items-special---collection---name/\n      );\n    });\n\n    test('should handle missing resource count', () => {\n      const result = DownloadUtils.downloadResources({}, undefined, 'collection');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /ts-res-resources-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-collection\\.json$/\n      );\n      expect(mockLink.download).not.toMatch(/\\d+items/);\n    });\n\n    test('should handle zero resource count', () => {\n      const result = DownloadUtils.downloadResources({}, 0, 'empty');\n\n      expect(result).toSucceed();\n      expect(mockLink.download).not.toMatch(/0items/);\n    });\n\n    test('should handle missing collection name', () => {\n      const result = DownloadUtils.downloadResources({}, 15);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(\n        /^ts-res-resources-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-15items\\.json$/\n      );\n    });\n\n    test('should propagate download errors', () => {\n      createObjectURLSpy.mockImplementation(() => {\n        throw new Error('Resource download failed');\n      });\n\n      const result = DownloadUtils.downloadResources({}, 5, 'test');\n      expect(result).toFailWith(/Failed to download file: Resource download failed/);\n    });\n  });\n\n  describe('downloadCompiledResources', () => {\n    test('should download compiled resources with specific naming', () => {\n      const compiledData = { compiled: true };\n      const result = DownloadUtils.downloadCompiledResources(compiledData, 8);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-compiled-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-8res\\.json$/);\n    });\n\n    test('should handle missing resource count', () => {\n      const result = DownloadUtils.downloadCompiledResources({});\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-compiled-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      expect(mockLink.download).not.toMatch(/\\d+res/);\n    });\n\n    test('should handle zero resource count', () => {\n      const result = DownloadUtils.downloadCompiledResources({}, 0);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).not.toMatch(/0res/);\n    });\n\n    test('should use correct file extension and MIME type', () => {\n      const result = DownloadUtils.downloadCompiledResources({}, 3);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/\\.json$/);\n      expect(global.Blob).toHaveBeenCalledWith([expect.any(String)], { type: 'application/json' });\n    });\n\n    test('should propagate download errors', () => {\n      appendChildSpy.mockImplementation(() => {\n        throw new Error('Compiled download failed');\n      });\n\n      const result = DownloadUtils.downloadCompiledResources({}, 5);\n      expect(result).toFailWith(/Failed to download file: Compiled download failed/);\n    });\n  });\n\n  describe('downloadSourceResources', () => {\n    test('should download source resources with specific naming', () => {\n      const sourceData = { source: true };\n      const result = DownloadUtils.downloadSourceResources(sourceData, 12);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-source-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-12res\\.json$/);\n    });\n\n    test('should handle missing resource count', () => {\n      const result = DownloadUtils.downloadSourceResources({});\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/^ts-res-source-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n      expect(mockLink.download).not.toMatch(/\\d+res/);\n    });\n\n    test('should handle zero resource count', () => {\n      const result = DownloadUtils.downloadSourceResources({}, 0);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).not.toMatch(/0res/);\n    });\n\n    test('should use correct file extension and MIME type', () => {\n      const result = DownloadUtils.downloadSourceResources({}, 6);\n\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/\\.json$/);\n      expect(global.Blob).toHaveBeenCalledWith([expect.any(String)], { type: 'application/json' });\n    });\n\n    test('should propagate download errors', () => {\n      removeChildSpy.mockImplementation(() => {\n        throw new Error('Source download failed');\n      });\n\n      const result = DownloadUtils.downloadSourceResources({}, 8);\n      expect(result).toFailWith(/Failed to download file: Source download failed/);\n    });\n  });\n\n  describe('edge cases and error handling', () => {\n    test('should handle undefined data with json extension', () => {\n      const result = DownloadUtils.downloadFile(undefined, 'test', { extension: 'json' });\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith([undefined], { type: 'application/json' });\n    });\n\n    test('should handle undefined data with text extension', () => {\n      const result = DownloadUtils.downloadFile(undefined, 'test', { extension: 'txt' });\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(['undefined'], { type: 'text/plain' });\n    });\n\n    test('should handle null data with json extension', () => {\n      const result = DownloadUtils.downloadFile(null, 'test', { extension: 'json' });\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(['null'], { type: 'application/json' });\n    });\n\n    test('should handle null data with text extension', () => {\n      const result = DownloadUtils.downloadFile(null, 'test', { extension: 'txt' });\n      expect(result).toSucceed();\n      expect(global.Blob).toHaveBeenCalledWith(['null'], { type: 'text/plain' });\n    });\n\n    test('should handle complex nested objects', () => {\n      const complexObject = {\n        level1: {\n          level2: {\n            level3: {\n              array: [1, 2, { nested: 'value' }],\n              boolean: true,\n              nullValue: null,\n              undefinedValue: undefined\n            }\n          }\n        }\n      };\n\n      const result = DownloadUtils.downloadFile(complexObject, 'complex');\n      expect(result).toSucceed();\n    });\n\n    test('should handle circular references in JSON', () => {\n      const circular: unknown = { name: 'test' };\n      (circular as { circular?: unknown }).circular = circular;\n\n      // JSON.stringify should throw for circular references\n      const result = DownloadUtils.downloadFile(circular, 'test');\n      expect(result).toFailWith(/Failed to download file:/);\n    });\n\n    test('should handle very large filenames', () => {\n      const longBaseName = 'a'.repeat(200);\n      const result = DownloadUtils.generateFilename(longBaseName, 'type');\n      expect(result).toSucceed(); // Should not fail, just create a long filename\n    });\n\n    test('should handle special characters in type parameter', () => {\n      const result = DownloadUtils.downloadFile('content', 'special!@#$%type');\n      expect(result).toSucceed();\n      expect(mockLink.download).toMatch(/special!@#\\$%type/);\n    });\n  });\n\n  describe('DOM cleanup verification', () => {\n    test('should cleanup DOM elements and URL even if click fails', () => {\n      clickSpy.mockImplementation(() => {\n        throw new Error('Click failed');\n      });\n\n      const result = DownloadUtils.downloadFile('content', 'test');\n\n      expect(result).toFailWith(/Failed to download file: Click failed/);\n      // Cleanup does not happen when captureResult catches the error\n      expect(removeChildSpy).not.toHaveBeenCalled();\n      expect(revokeObjectURLSpy).not.toHaveBeenCalled();\n    });\n\n    test('should cleanup URL even if removeChild fails', () => {\n      removeChildSpy.mockImplementation(() => {\n        throw new Error('RemoveChild failed');\n      });\n\n      const result = DownloadUtils.downloadFile('content', 'test');\n\n      expect(result).toFailWith(/Failed to download file: RemoveChild failed/);\n      // URL is not revoked when captureResult catches the error\n      expect(revokeObjectURLSpy).not.toHaveBeenCalled();\n    });\n  });\n});\n"]}