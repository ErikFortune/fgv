{"version":3,"file":"configurationUtils.test.js","sourceRoot":"","sources":["../../../../src/test/unit/utils/configurationUtils.test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;AAEH,8BAA4B;AAE5B,0EAc2C;AAE3C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,aAAgD,CAAC;IAErD,UAAU,CAAC,GAAG,EAAE;QACd,aAAa,GAAG,IAAA,4CAAuB,GAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC/C,MAAM,MAAM,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAEzC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvC,IAAI,EAAE,UAAU;gBAChB,UAAU,EAAE,UAAU;gBACtB,aAAa,EAAE;oBACb,gBAAgB,EAAE,IAAI;iBACvB;aACF,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvC,IAAI,EAAE,WAAW;gBACjB,UAAU,EAAE,WAAW;gBACvB,aAAa,EAAE;oBACb,gBAAgB,EAAE,KAAK;iBACxB;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBACnC,IAAI,EAAE,kBAAkB;gBACxB,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,WAAW;gBACrB,eAAe,EAAE,GAAG;aACrB,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBACnC,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,UAAU;gBACpB,eAAe,EAAE,GAAG;aACrB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBACtC,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAE1C,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACtD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,aAAa,CAAC,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,MAAM,GAAG,EAAE,GAAG,aAAa,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;YACxD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,yDAAyD;YACzD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACtD,MAAM,MAAM,GAAG,EAAE,GAAG,aAAa,EAAE,CAAC;YACpC,OAAQ,MAAc,CAAC,cAAc,CAAC;YACtC,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,cAAc,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;aACG,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC/D,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;aACS,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC5D,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,cAAc,EAAE;oBACd,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE;oBAC5C,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE;iBAC9C;aAC8C,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,+CAA+C;YAC/C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAChD,MAAM,MAAM,GAAG,EAAE,GAAG,aAAa,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;YACpD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;aACb,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACxD,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;aACT,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC7D,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC;aACjF,CAAC;YACF,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,wFAAwF;YACxF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACvD,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,GAAG,EAAE;oBAChE,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,EAAE,EAAE;iBACjE;aACF,CAAC;YACF,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,+CAA+C;YAC/C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YACpE,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE;oBAC/D,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,0BAA0B;iBACxE;aAC8C,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,MAAM,MAAM,GAAG,EAAE,GAAG,aAAa,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC;YACvD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,wDAAwD;YACxD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACxD,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,aAAa,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aACQ,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC5D,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;aACY,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,MAAM,MAAM,GAAG;gBACb,GAAG,aAAa;gBAChB,aAAa,EAAE;oBACb,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;oBACtC,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE;iBACvC;aACF,CAAC;YACF,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,+CAA+C;YAC/C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YACpE,MAAM,MAAM,GAAG;gBACb,cAAc,EAAE;oBACd,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,qBAAqB;oBAC3C,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC,eAAe;iBAC5C;gBACD,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,eAAe,EAAE,GAAG,EAAE,EAAE,eAAe;oBAChF,EAAE,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,iCAAiC;iBAChF;gBACD,aAAa,EAAE;oBACb,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,mBAAmB;oBACtC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,eAAe;iBACvC;aAC8C,CAAC;YAClD,MAAM,MAAM,GAAG,IAAA,0CAAqB,EAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC9C,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,aAAa,CAAC,CAAC;YAEjD,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,aAAa,CAAC,CAAC;YACjD,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;YAE3C,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9D,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC/C,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,aAAa,CAAC,CAAC;YAChD,MAAM,CAAC,UAAU,CAAC,CAAC,CAAS,CAAC,cAAc,GAAG,OAAO,CAAC;YAEvD,MAAM,CAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAS,CAAC,cAAc,CAAC,CAAC,aAAa,EAAE,CAAC;YAC5E,MAAM,CAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAE1C,MAAM,CAAC,IAAA,0CAAqB,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACtD,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;YAE5C,MAAM,CAAC,IAAA,0CAAqB,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,IAAA,0CAAqB,EAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACtD,MAAM,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAS,CAAC;YACtC,MAAM,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAS,CAAC;YAEtC,MAAM,CAAC,IAAA,0CAAqB,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC7C,MAAM,OAAO,GAAG,EAAE,GAAG,aAAa,EAAE,WAAW,EAAE,IAAI,EAAS,CAAC;YAC/D,MAAM,OAAO,GAAG,EAAE,GAAG,aAAa,EAAE,WAAW,EAAE,SAAS,EAAS,CAAC;YAEpE,MAAM,CAAC,IAAA,0CAAqB,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,MAAM,QAAQ,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAE1C,MAAM,OAAO,GAAG,IAAA,8CAAyB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE7D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC1C,MAAM,QAAQ,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;YAE5C,MAAM,OAAO,GAAG,IAAA,8CAAyB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE7D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC5D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACtC,MAAM,QAAQ,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,GAAG,CAAC;YAE5C,MAAM,OAAO,GAAG,IAAA,8CAAyB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE7D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACxD,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACzC,MAAM,QAAQ,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,IAAA,8CAAyB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE7D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,IAAA,4CAAuB,GAAE,CAAC;YAC1C,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;YAC5C,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,GAAG,CAAC;YAE5C,MAAM,OAAO,GAAG,IAAA,8CAAyB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE7D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC5D,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACxD,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC/B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YAC1B,MAAM,OAAO,GAAG,IAAA,8CAAyB,EAAC,aAAa,EAAE,aAAa,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;YAEzB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;YAC7E,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,aAAa,CAAC,CAAC;YAElD,MAAM,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,QAAgB,EAAE,EAAE;gBACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBACpD,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB;gBACrD,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;YACjD,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAErF,MAAM,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,QAAgB,EAAE,EAAE;gBACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBACpD,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE;YACjC,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YAEpF,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,kCAAkC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,MAAM,cAAc,GAAG,aAAoB,CAAC;YAC5C,cAAc,CAAC,IAAI,GAAG,cAAc,CAAC,CAAC,4BAA4B;YAElE,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,cAAc,CAAC,CAAC;YAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YACxB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,IAAA,wCAAmB,EAAC,aAAa,CAAC,CAAC,OAAO,EAAE,CAAC;YAC9D,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,QAAQ,CAAC,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,QAA2C,EAAE,EAAE;gBACjF,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAClC,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,gBAAgB,CAAC,CAAC;YAErD,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,gCAAgC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACrC,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,UAAU,CAAC,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC/B,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,MAAM,CAAC,CAAC;YAE3C,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,aAAa,GAAG;gBACpB,cAAc,EAAE,EAAE;gBAClB,UAAU,EAAE,EAAE;gBACd,aAAa,EAAE,EAAE;aAClB,CAAC;YACF,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YAElE,4CAA4C;YAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,MAAM,aAAa,GAAG;gBACpB,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,qBAAqB;gBACzD,UAAU,EAAE,EAAE;gBACd,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aACxD,CAAC;YACF,MAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YAElE,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,gDAAgD,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACtC,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAE9C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC9D,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAC9C,MAAM,eAAe,GAAG,CAAC,SAAS,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;YAEnG,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAEvD,eAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACnC,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;gBAC1D,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC/B,MAAM,CAAC,QAAS,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YAChD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAC9C,MAAM,eAAe,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC;YAElE,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,eAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAChD,MAAM,CAAC,eAAgB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,IAAA,4CAAuB,GAAE,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC3D,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAC9C,MAAM,gBAAgB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,kBAAkB,CAAC,CAAC;YAE5E,MAAM,CAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,gBAAiB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACpD,MAAM,CAAC,gBAAiB,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC/E,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAC9C,MAAM,wBAAwB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,mBAAmB,CAAC,CAAC;YACrF,MAAM,yBAAyB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,oBAAoB,CAAC,CAAC;YAEvF,MAAM,CAAC,wBAAyB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAChE,MAAM,CAAC,yBAA0B,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACnD,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAE9C,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC7B,MAAM,UAAU,GAAG,IAAA,0CAAqB,EAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBACjE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;YAE9C,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC7B,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;gBACjC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAC;gBACnC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,UAAU,EAAE,CAAC;gBAC1C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;gBACrE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAClD,MAAM,QAAQ,GAAG,IAAA,kDAA6B,GAAE,CAAC;YAEjD,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC/C,MAAM,QAAQ,GAAG,IAAA,kDAA6B,EAAC,OAAO,CAAC,CAAC;YAExD,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,0DAA0D,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACnC,MAAM,QAAQ,GAAG,IAAA,kDAA6B,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAEhE,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,0DAA0D,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACrD,MAAM,QAAQ,GAAG,IAAA,kDAA6B,EAAC,eAAe,CAAC,CAAC;YAEhE,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,mEAAmE,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAChD,MAAM,SAAS,GAAG,IAAA,kDAA6B,EAAC,MAAM,CAAC,CAAC;YACxD,4CAA4C;YAC5C,MAAM,SAAS,GAAG,IAAA,kDAA6B,EAAC,MAAM,CAAC,CAAC;YAExD,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;gBAC5B,oCAAoC;gBACpC,UAAU,CAAC,GAAG,EAAE;oBACd,MAAM,SAAS,GAAG,IAAA,kDAA6B,EAAC,MAAM,CAAC,CAAC;oBACxD,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACxC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC5C,MAAM,QAAQ,GAAG,IAAA,kDAA6B,EAAC,EAAE,CAAC,CAAC;YAEnD,sDAAsD;YACtD,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport { Config } from '@fgv/ts-res';\nimport {\n  getDefaultConfiguration,\n  validateConfiguration,\n  cloneConfiguration,\n  compareConfigurations,\n  trackConfigurationChanges,\n  exportConfiguration,\n  importConfiguration,\n  getConfigurationTemplates,\n  generateConfigurationFilename,\n  type ConfigurationValidationResult,\n  type ConfigurationChanges,\n  type ConfigurationTemplate,\n  type ConfigurationExportOptions\n} from '../../../utils/configurationUtils';\n\ndescribe('configurationUtils', () => {\n  let defaultConfig: Config.Model.ISystemConfiguration;\n\n  beforeEach(() => {\n    defaultConfig = getDefaultConfiguration();\n  });\n\n  describe('getDefaultConfiguration', () => {\n    test('returns valid default configuration', () => {\n      const config = getDefaultConfiguration();\n\n      expect(config.qualifierTypes).toHaveLength(2);\n      expect(config.qualifierTypes[0]).toEqual({\n        name: 'language',\n        systemType: 'language',\n        configuration: {\n          allowContextList: true\n        }\n      });\n      expect(config.qualifierTypes[1]).toEqual({\n        name: 'territory',\n        systemType: 'territory',\n        configuration: {\n          allowContextList: false\n        }\n      });\n\n      expect(config.qualifiers).toHaveLength(2);\n      expect(config.qualifiers[0]).toEqual({\n        name: 'currentTerritory',\n        token: 'geo',\n        typeName: 'territory',\n        defaultPriority: 850\n      });\n      expect(config.qualifiers[1]).toEqual({\n        name: 'language',\n        token: 'lang',\n        typeName: 'language',\n        defaultPriority: 800\n      });\n\n      expect(config.resourceTypes).toHaveLength(1);\n      expect(config.resourceTypes[0]).toEqual({\n        name: 'json',\n        typeName: 'json'\n      });\n    });\n\n    test('returns different instances on multiple calls', () => {\n      const config1 = getDefaultConfiguration();\n      const config2 = getDefaultConfiguration();\n\n      expect(config1).not.toBe(config2);\n      expect(config1).toEqual(config2);\n    });\n  });\n\n  describe('validateConfiguration', () => {\n    test('validates valid configuration successfully', () => {\n      const result = validateConfiguration(defaultConfig);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('reports error for missing qualifierTypes', () => {\n      const config = { ...defaultConfig, qualifierTypes: [] };\n      const result = validateConfiguration(config);\n\n      // Empty qualifierTypes array is actually valid in ts-res\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('reports error for undefined qualifierTypes', () => {\n      const config = { ...defaultConfig };\n      delete (config as any).qualifierTypes;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for qualifier type without name', () => {\n      const config = {\n        ...defaultConfig,\n        qualifierTypes: [{ systemType: 'language' }]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for qualifier type without systemType', () => {\n      const config = {\n        ...defaultConfig,\n        qualifierTypes: [{ name: 'language' }]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for duplicate qualifier type names', () => {\n      const config = {\n        ...defaultConfig,\n        qualifierTypes: [\n          { name: 'language', systemType: 'language' },\n          { name: 'language', systemType: 'territory' }\n        ]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      // Duplicate names are actually valid in ts-res\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('reports warning for empty qualifiers', () => {\n      const config = { ...defaultConfig, qualifiers: [] };\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(true);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('reports error for qualifier without name', () => {\n      const config = {\n        ...defaultConfig,\n        qualifiers: [{ typeName: 'language', defaultPriority: 100 }]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for qualifier without typeName', () => {\n      const config = {\n        ...defaultConfig,\n        qualifiers: [{ name: 'language', defaultPriority: 100 }]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for qualifier with unknown typeName', () => {\n      const config = {\n        ...defaultConfig,\n        qualifiers: [{ name: 'unknown', typeName: 'unknownType', defaultPriority: 100 }]\n      };\n      const result = validateConfiguration(config);\n\n      // Unknown typeName is actually valid in ts-res (it just references a non-existent type)\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('reports error for duplicate qualifier names', () => {\n      const config = {\n        ...defaultConfig,\n        qualifiers: [\n          { name: 'language', typeName: 'language', defaultPriority: 100 },\n          { name: 'language', typeName: 'territory', defaultPriority: 90 }\n        ]\n      };\n      const result = validateConfiguration(config);\n\n      // Duplicate names are actually valid in ts-res\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('reports error for qualifier with invalid defaultPriority', () => {\n      const config = {\n        ...defaultConfig,\n        qualifiers: [\n          { name: 'language', typeName: 'language', defaultPriority: -1 },\n          { name: 'territory', typeName: 'territory' } // Missing defaultPriority\n        ]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for missing resourceTypes', () => {\n      const config = { ...defaultConfig, resourceTypes: [] };\n      const result = validateConfiguration(config);\n\n      // Empty resourceTypes array is actually valid in ts-res\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('reports error for resource type without name', () => {\n      const config = {\n        ...defaultConfig,\n        resourceTypes: [{ typeName: 'string' }]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for resource type without typeName', () => {\n      const config = {\n        ...defaultConfig,\n        resourceTypes: [{ name: 'string' }]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('reports error for duplicate resource type names', () => {\n      const config = {\n        ...defaultConfig,\n        resourceTypes: [\n          { name: 'string', typeName: 'string' },\n          { name: 'string', typeName: 'object' }\n        ]\n      };\n      const result = validateConfiguration(config);\n\n      // Duplicate names are actually valid in ts-res\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    test('handles complex validation scenario with multiple errors', () => {\n      const config = {\n        qualifierTypes: [\n          { name: 'language' }, // Missing systemType\n          { systemType: 'territory' } // Missing name\n        ],\n        qualifiers: [\n          { name: 'lang', typeName: 'unknownType', defaultPriority: 100 }, // Unknown type\n          { typeName: 'language', defaultPriority: -1 } // Missing name, invalid priority\n        ],\n        resourceTypes: [\n          { name: 'type1' }, // Missing typeName\n          { typeName: 'string' } // Missing name\n        ]\n      } as unknown as Config.Model.ISystemConfiguration;\n      const result = validateConfiguration(config);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('cloneConfiguration', () => {\n    test('creates deep copy of configuration', () => {\n      const cloned = cloneConfiguration(defaultConfig);\n\n      expect(cloned).not.toBe(defaultConfig);\n      expect(cloned).toEqual(defaultConfig);\n      expect(cloned.qualifierTypes).not.toBe(defaultConfig.qualifierTypes);\n      expect(cloned.qualifiers).not.toBe(defaultConfig.qualifiers);\n      expect(cloned.resourceTypes).not.toBe(defaultConfig.resourceTypes);\n    });\n\n    test('modifications to clone do not affect original', () => {\n      const cloned = cloneConfiguration(defaultConfig);\n      cloned.qualifierTypes[0].name = 'modified';\n\n      expect(defaultConfig.qualifierTypes[0].name).toBe('language');\n      expect(cloned.qualifierTypes[0].name).toBe('modified');\n    });\n\n    test('handles nested object modifications', () => {\n      const cloned = cloneConfiguration(defaultConfig);\n      (cloned.qualifiers[0] as any).customProperty = 'added';\n\n      expect((defaultConfig.qualifiers[0] as any).customProperty).toBeUndefined();\n      expect((cloned.qualifiers[0] as any).customProperty).toBe('added');\n    });\n  });\n\n  describe('compareConfigurations', () => {\n    test('returns true for identical configurations', () => {\n      const config1 = getDefaultConfiguration();\n      const config2 = getDefaultConfiguration();\n\n      expect(compareConfigurations(config1, config2)).toBe(true);\n    });\n\n    test('returns false for different configurations', () => {\n      const config1 = getDefaultConfiguration();\n      const config2 = getDefaultConfiguration();\n      config2.qualifierTypes[0].name = 'modified';\n\n      expect(compareConfigurations(config1, config2)).toBe(false);\n    });\n\n    test('returns true for same reference', () => {\n      expect(compareConfigurations(defaultConfig, defaultConfig)).toBe(true);\n    });\n\n    test('returns false for different property order', () => {\n      const config1 = { a: 1, b: 2 } as any;\n      const config2 = { b: 2, a: 1 } as any;\n\n      expect(compareConfigurations(config1, config2)).toBe(false);\n    });\n\n    test('handles null and undefined values', () => {\n      const config1 = { ...defaultConfig, description: null } as any;\n      const config2 = { ...defaultConfig, description: undefined } as any;\n\n      expect(compareConfigurations(config1, config2)).toBe(false);\n    });\n  });\n\n  describe('trackConfigurationChanges', () => {\n    test('reports no changes for identical configurations', () => {\n      const original = getDefaultConfiguration();\n      const current = getDefaultConfiguration();\n\n      const changes = trackConfigurationChanges(original, current);\n\n      expect(changes.hasChanges).toBe(false);\n      expect(changes.changedSections).toEqual([]);\n      expect(changes.timestamp).toBeInstanceOf(Date);\n    });\n\n    test('detects qualifierTypes changes', () => {\n      const original = getDefaultConfiguration();\n      const current = getDefaultConfiguration();\n      current.qualifierTypes[0].name = 'modified';\n\n      const changes = trackConfigurationChanges(original, current);\n\n      expect(changes.hasChanges).toBe(true);\n      expect(changes.changedSections).toContain('qualifierTypes');\n      expect(changes.changedSections).toHaveLength(1);\n    });\n\n    test('detects qualifiers changes', () => {\n      const original = getDefaultConfiguration();\n      const current = getDefaultConfiguration();\n      current.qualifiers[0].defaultPriority = 200;\n\n      const changes = trackConfigurationChanges(original, current);\n\n      expect(changes.hasChanges).toBe(true);\n      expect(changes.changedSections).toContain('qualifiers');\n      expect(changes.changedSections).toHaveLength(1);\n    });\n\n    test('detects resourceTypes changes', () => {\n      const original = getDefaultConfiguration();\n      const current = getDefaultConfiguration();\n      current.resourceTypes.push({ name: 'array', typeName: 'array' });\n\n      const changes = trackConfigurationChanges(original, current);\n\n      expect(changes.hasChanges).toBe(true);\n      expect(changes.changedSections).toContain('resourceTypes');\n      expect(changes.changedSections).toHaveLength(1);\n    });\n\n    test('detects multiple changes', () => {\n      const original = getDefaultConfiguration();\n      const current = getDefaultConfiguration();\n      current.qualifierTypes[0].name = 'modified';\n      current.qualifiers[0].defaultPriority = 200;\n\n      const changes = trackConfigurationChanges(original, current);\n\n      expect(changes.hasChanges).toBe(true);\n      expect(changes.changedSections).toContain('qualifierTypes');\n      expect(changes.changedSections).toContain('qualifiers');\n      expect(changes.changedSections).toHaveLength(2);\n    });\n\n    test('timestamp is recent', () => {\n      const before = new Date();\n      const changes = trackConfigurationChanges(defaultConfig, defaultConfig);\n      const after = new Date();\n\n      expect(changes.timestamp.getTime()).toBeGreaterThanOrEqual(before.getTime());\n      expect(changes.timestamp.getTime()).toBeLessThanOrEqual(after.getTime());\n    });\n  });\n\n  describe('exportConfiguration', () => {\n    test('exports configuration as pretty JSON by default', () => {\n      const result = exportConfiguration(defaultConfig);\n\n      expect(result).toSucceedAndSatisfy((exported: string) => {\n        expect(JSON.parse(exported)).toEqual(defaultConfig);\n        expect(exported).toContain('\\n'); // Pretty formatted\n        expect(exported).toContain('  '); // Indentation\n      });\n    });\n\n    test('exports configuration as compact JSON', () => {\n      const result = exportConfiguration(defaultConfig, { format: 'json', pretty: false });\n\n      expect(result).toSucceedAndSatisfy((exported: string) => {\n        expect(JSON.parse(exported)).toEqual(defaultConfig);\n        expect(exported).not.toContain('\\n'); // No formatting\n      });\n    });\n\n    test('fails for YAML format', () => {\n      const result = exportConfiguration(defaultConfig, { format: 'yaml', pretty: true });\n\n      expect(result).toFailWith(/YAML export not implemented yet/i);\n    });\n\n    test('handles export errors gracefully', () => {\n      const circularConfig = defaultConfig as any;\n      circularConfig.self = circularConfig; // Create circular reference\n\n      const result = exportConfiguration(circularConfig);\n\n      expect(result).toFail();\n      expect(result.message).toContain('Failed to export configuration');\n    });\n  });\n\n  describe('importConfiguration', () => {\n    test('imports valid JSON configuration', () => {\n      const exported = exportConfiguration(defaultConfig).orThrow();\n      const result = importConfiguration(exported);\n\n      expect(result).toSucceedAndSatisfy((imported: Config.Model.ISystemConfiguration) => {\n        expect(imported).toEqual(defaultConfig);\n      });\n    });\n\n    test('fails for invalid JSON', () => {\n      const result = importConfiguration('invalid json {');\n\n      expect(result).toFailWith(/Failed to parse configuration/i);\n    });\n\n    test('fails for non-object data', () => {\n      const result = importConfiguration('\"string\"');\n\n      expect(result).toFailWith(/Cannot convert field/i);\n    });\n\n    test('fails for null data', () => {\n      const result = importConfiguration('null');\n\n      expect(result).toFailWith(/Cannot convert field/i);\n    });\n\n    test('fails for invalid configuration structure', () => {\n      const invalidConfig = {\n        qualifierTypes: [],\n        qualifiers: [],\n        resourceTypes: []\n      };\n      const result = importConfiguration(JSON.stringify(invalidConfig));\n\n      // Empty arrays are actually valid in ts-res\n      expect(result).toSucceed();\n    });\n\n    test('validates imported configuration', () => {\n      const invalidConfig = {\n        qualifierTypes: [{ name: 'lang' }], // Missing systemType\n        qualifiers: [],\n        resourceTypes: [{ name: 'string', typeName: 'string' }]\n      };\n      const result = importConfiguration(JSON.stringify(invalidConfig));\n\n      expect(result).toFailWith(/Discriminator property systemType not present/i);\n    });\n  });\n\n  describe('getConfigurationTemplates', () => {\n    test('returns array of templates', () => {\n      const templates = getConfigurationTemplates();\n\n      expect(templates).toBeInstanceOf(Array);\n      expect(templates.length).toBeGreaterThan(0);\n    });\n\n    test('includes all predefined configurations from ts-res', () => {\n      const templates = getConfigurationTemplates();\n      const expectedConfigs = ['default', 'language-priority', 'territory-priority', 'extended-example'];\n\n      expect(templates).toHaveLength(expectedConfigs.length);\n\n      expectedConfigs.forEach((configId) => {\n        const template = templates.find((t) => t.id === configId);\n        expect(template).toBeDefined();\n        expect(template!.configuration).toBeDefined();\n      });\n    });\n\n    test('default template has correct properties', () => {\n      const templates = getConfigurationTemplates();\n      const defaultTemplate = templates.find((t) => t.id === 'default');\n\n      expect(defaultTemplate).toBeDefined();\n      expect(defaultTemplate!.category).toBe('basic');\n      expect(defaultTemplate!.configuration).toEqual(getDefaultConfiguration());\n    });\n\n    test('extended-example template has advanced category', () => {\n      const templates = getConfigurationTemplates();\n      const extendedTemplate = templates.find((t) => t.id === 'extended-example');\n\n      expect(extendedTemplate).toBeDefined();\n      expect(extendedTemplate!.category).toBe('advanced');\n      expect(extendedTemplate!.configuration.qualifierTypes.length).toBeGreaterThan(2);\n    });\n\n    test('language-priority and territory-priority have intermediate category', () => {\n      const templates = getConfigurationTemplates();\n      const languagePriorityTemplate = templates.find((t) => t.id === 'language-priority');\n      const territoryPriorityTemplate = templates.find((t) => t.id === 'territory-priority');\n\n      expect(languagePriorityTemplate!.category).toBe('intermediate');\n      expect(territoryPriorityTemplate!.category).toBe('intermediate');\n    });\n\n    test('all templates have valid configurations', () => {\n      const templates = getConfigurationTemplates();\n\n      templates.forEach((template) => {\n        const validation = validateConfiguration(template.configuration);\n        expect(validation.isValid).toBe(true);\n      });\n    });\n\n    test('all templates have required properties', () => {\n      const templates = getConfigurationTemplates();\n\n      templates.forEach((template) => {\n        expect(template.id).toBeTruthy();\n        expect(template.name).toBeTruthy();\n        expect(template.description).toBeTruthy();\n        expect(template.category).toMatch(/^(basic|intermediate|advanced)$/);\n        expect(template.configuration).toBeDefined();\n      });\n    });\n  });\n\n  describe('generateConfigurationFilename', () => {\n    test('generates filename without config name', () => {\n      const filename = generateConfigurationFilename();\n\n      expect(filename).toMatch(/^ts-res-config-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n    });\n\n    test('generates filename with config name', () => {\n      const filename = generateConfigurationFilename('myapp');\n\n      expect(filename).toMatch(/^myapp-config-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n    });\n\n    test('generates YAML filename', () => {\n      const filename = generateConfigurationFilename('myapp', 'yaml');\n\n      expect(filename).toMatch(/^myapp-config-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.yaml$/);\n    });\n\n    test('handles special characters in config name', () => {\n      const filename = generateConfigurationFilename('my/app:config');\n\n      expect(filename).toMatch(/^my\\/app:config-config-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n    });\n\n    test('generates unique filenames over time', () => {\n      const filename1 = generateConfigurationFilename('test');\n      // Small delay to ensure different timestamp\n      const filename2 = generateConfigurationFilename('test');\n\n      if (filename1 === filename2) {\n        // If same, wait a bit and try again\n        setTimeout(() => {\n          const filename3 = generateConfigurationFilename('test');\n          expect(filename3).not.toBe(filename1);\n        }, 1);\n      } else {\n        expect(filename2).not.toBe(filename1);\n      }\n    });\n\n    test('handles empty string config name', () => {\n      const filename = generateConfigurationFilename('');\n\n      // Empty string is falsy, so it uses default base name\n      expect(filename).toMatch(/^ts-res-config-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}\\.json$/);\n    });\n  });\n});\n"]}