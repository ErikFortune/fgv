{"version":3,"file":"fileProcessing.test.js","sourceRoot":"","sources":["../../../../src/test/unit/utils/fileProcessing.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport {\n  readFilesFromInput,\n  filesToDirectory,\n  exportAsJson,\n  exportUsingFileSystemAPI\n} from '../../../utils/fileProcessing';\nimport { ImportedFile } from '../../../types';\n\ndescribe('fileProcessing utilities', () => {\n  describe('readFilesFromInput', () => {\n    test('reads single file from FileList', async () => {\n      const mockFile = new File(['test content'], 'test.json', { type: 'application/json' });\n      const fileList = {\n        length: 1,\n        0: mockFile,\n        item: (index: number) => (index === 0 ? mockFile : null)\n      } as FileList;\n\n      const result = await readFilesFromInput(fileList);\n\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        name: 'test.json',\n        path: 'test.json',\n        content: 'test content',\n        type: 'application/json'\n      });\n    });\n\n    test('reads multiple files from FileList', async () => {\n      const mockFile1 = new File(['content 1'], 'file1.json', { type: 'application/json' });\n      const mockFile2 = new File(['content 2'], 'file2.json', { type: 'application/json' });\n      const fileList = {\n        length: 2,\n        0: mockFile1,\n        1: mockFile2,\n        item: (index: number) => (index === 0 ? mockFile1 : index === 1 ? mockFile2 : null)\n      } as FileList;\n\n      const result = await readFilesFromInput(fileList);\n\n      expect(result).toHaveLength(2);\n      expect(result[0]).toEqual({\n        name: 'file1.json',\n        path: 'file1.json',\n        content: 'content 1',\n        type: 'application/json'\n      });\n      expect(result[1]).toEqual({\n        name: 'file2.json',\n        path: 'file2.json',\n        content: 'content 2',\n        type: 'application/json'\n      });\n    });\n\n    test('handles file with webkitRelativePath', async () => {\n      const mockFile = new File(['test content'], 'test.json', {\n        type: 'application/json',\n        webkitRelativePath: 'folder/test.json'\n      } as any);\n\n      const fileList = {\n        length: 1,\n        0: mockFile,\n        item: (index: number) => (index === 0 ? mockFile : null)\n      } as FileList;\n\n      const result = await readFilesFromInput(fileList);\n\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        name: 'test.json',\n        path: 'folder/test.json',\n        content: 'test content',\n        type: 'application/json'\n      });\n    });\n\n    test('handles empty FileList', async () => {\n      const fileList = {\n        length: 0,\n        item: () => null\n      } as FileList;\n\n      const result = await readFilesFromInput(fileList);\n\n      expect(result).toEqual([]);\n    });\n\n    test('handles FileReader error', async () => {\n      const mockFile = new File(['test content'], 'test.json', { type: 'application/json' });\n\n      // Override the global FileReader for this test\n      const originalFileReader = global.FileReader;\n      global.FileReader = class MockErrorFileReader {\n        onload: ((event: any) => void) | null = null;\n        onerror: ((event: any) => void) | null = null;\n        readAsText() {\n          setTimeout(() => {\n            if (this.onerror) {\n              this.onerror(new Error('Read error'));\n            }\n          }, 0);\n        }\n      } as any;\n\n      const fileList = {\n        length: 1,\n        0: mockFile,\n        item: (index: number) => (index === 0 ? mockFile : null)\n      } as FileList;\n\n      await expect(readFilesFromInput(fileList)).rejects.toThrow('Failed to read file test.json');\n\n      // Restore original FileReader\n      global.FileReader = originalFileReader;\n    });\n  });\n\n  describe('filesToDirectory', () => {\n    test('creates root directory from files without paths', () => {\n      const files: ImportedFile[] = [\n        { name: 'file1.json', content: 'content1' },\n        { name: 'file2.json', content: 'content2' }\n      ];\n\n      const result = filesToDirectory(files);\n\n      expect(result).toEqual({\n        name: 'root',\n        path: '',\n        files: [\n          { name: 'file1.json', content: 'content1' },\n          { name: 'file2.json', content: 'content2' }\n        ],\n        subdirectories: []\n      });\n    });\n\n    test('creates directory structure from files with paths', () => {\n      const files: ImportedFile[] = [\n        { name: 'root.json', path: 'root.json', content: 'root content' },\n        { name: 'sub1.json', path: 'folder1/sub1.json', content: 'sub1 content' },\n        { name: 'sub2.json', path: 'folder1/sub2.json', content: 'sub2 content' },\n        { name: 'nested.json', path: 'folder1/subfolder/nested.json', content: 'nested content' }\n      ];\n\n      const result = filesToDirectory(files);\n\n      expect(result.name).toBe('root');\n      expect(result.path).toBe('');\n      expect(result.files).toHaveLength(1);\n      expect(result.files[0]).toEqual({ name: 'root.json', path: 'root.json', content: 'root content' });\n      expect(result.subdirectories).toHaveLength(1);\n\n      const folder1 = result.subdirectories![0];\n      expect(folder1.name).toBe('folder1');\n      expect(folder1.path).toBe('folder1');\n      expect(folder1.files).toHaveLength(2);\n      expect(folder1.files[0]).toEqual({\n        name: 'sub1.json',\n        path: 'folder1/sub1.json',\n        content: 'sub1 content'\n      });\n      expect(folder1.files[1]).toEqual({\n        name: 'sub2.json',\n        path: 'folder1/sub2.json',\n        content: 'sub2 content'\n      });\n      expect(folder1.subdirectories).toHaveLength(1);\n\n      const subfolder = folder1.subdirectories![0];\n      expect(subfolder.name).toBe('subfolder');\n      expect(subfolder.path).toBe('folder1/subfolder');\n      expect(subfolder.files).toHaveLength(1);\n      expect(subfolder.files[0]).toEqual({\n        name: 'nested.json',\n        path: 'folder1/subfolder/nested.json',\n        content: 'nested content'\n      });\n    });\n\n    test('handles complex nested directory structure', () => {\n      const files: ImportedFile[] = [\n        { name: 'a.json', path: 'dir1/dir2/a.json', content: 'a' },\n        { name: 'b.json', path: 'dir1/b.json', content: 'b' },\n        { name: 'c.json', path: 'dir3/c.json', content: 'c' }\n      ];\n\n      const result = filesToDirectory(files);\n\n      expect(result.subdirectories).toHaveLength(2);\n\n      const dir1 = result.subdirectories!.find((d) => d.name === 'dir1');\n      const dir3 = result.subdirectories!.find((d) => d.name === 'dir3');\n\n      expect(dir1).toBeDefined();\n      expect(dir1!.files).toHaveLength(1);\n      expect(dir1!.files[0].name).toBe('b.json');\n      expect(dir1!.subdirectories).toHaveLength(1);\n      expect(dir1!.subdirectories![0].name).toBe('dir2');\n\n      expect(dir3).toBeDefined();\n      expect(dir3!.files).toHaveLength(1);\n      expect(dir3!.files[0].name).toBe('c.json');\n      expect(dir3!.subdirectories).toHaveLength(0);\n    });\n\n    test('handles empty file list', () => {\n      const result = filesToDirectory([]);\n\n      expect(result).toEqual({\n        name: 'root',\n        path: '',\n        files: [],\n        subdirectories: []\n      });\n    });\n\n    test('handles files with mixed path and no-path entries', () => {\n      const files: ImportedFile[] = [\n        { name: 'root.json', content: 'root' },\n        { name: 'sub.json', path: 'folder/sub.json', content: 'sub' }\n      ];\n\n      const result = filesToDirectory(files);\n\n      expect(result.files).toHaveLength(1);\n      expect(result.files[0].name).toBe('root.json');\n      expect(result.subdirectories).toHaveLength(1);\n      expect(result.subdirectories![0].name).toBe('folder');\n    });\n  });\n\n  describe('exportAsJson', () => {\n    beforeEach(() => {\n      // Reset mocks before each test\n      jest.clearAllMocks();\n    });\n\n    test('creates blob and triggers download', () => {\n      const testData = { test: 'data' };\n      const filename = 'test.json';\n\n      // Test completes without errors\n      expect(() => exportAsJson(testData, filename)).not.toThrow();\n\n      // Verify that URL methods were called (functional behavior)\n      expect(URL.createObjectURL).toHaveBeenCalled();\n      expect(URL.revokeObjectURL).toHaveBeenCalled();\n\n      // Verify blob was created with correct type\n      const blobArg = (URL.createObjectURL as jest.Mock).mock.calls[0][0];\n      expect(blobArg).toBeInstanceOf(Blob);\n      expect(blobArg.type).toBe('application/json');\n    });\n\n    test('handles complex data structures', () => {\n      const complexData = {\n        array: [1, 2, 3],\n        nested: { inner: 'value' },\n        nullValue: null,\n        boolValue: true\n      };\n\n      exportAsJson(complexData, 'complex.json');\n\n      expect(URL.createObjectURL).toHaveBeenCalled();\n      const blobArg = (URL.createObjectURL as jest.Mock).mock.calls[0][0];\n      expect(blobArg).toBeInstanceOf(Blob);\n    });\n  });\n\n  describe('exportUsingFileSystemAPI', () => {\n    test('returns false when File System Access API is not available', async () => {\n      const originalShowSaveFilePicker = (window as any).showSaveFilePicker;\n      delete (window as any).showSaveFilePicker;\n\n      const result = await exportUsingFileSystemAPI({ test: 'data' }, 'test.json');\n\n      expect(result).toBe(false);\n\n      (window as any).showSaveFilePicker = originalShowSaveFilePicker;\n    });\n\n    test('successfully exports when File System Access API is available', async () => {\n      const mockWritable = {\n        write: jest.fn().mockResolvedValue(undefined),\n        close: jest.fn().mockResolvedValue(undefined)\n      };\n      const mockFileHandle = {\n        createWritable: jest.fn().mockResolvedValue(mockWritable)\n      };\n      const mockShowSaveFilePicker = jest.fn().mockResolvedValue(mockFileHandle);\n\n      (window as any).showSaveFilePicker = mockShowSaveFilePicker;\n\n      const testData = { test: 'data' };\n      const result = await exportUsingFileSystemAPI(testData, 'test.json', 'Test files');\n\n      expect(result).toBe(true);\n      expect(mockShowSaveFilePicker).toHaveBeenCalledWith({\n        suggestedName: 'test.json',\n        types: [\n          {\n            description: 'Test files',\n            accept: {\n              'application/json': ['.json']\n            }\n          }\n        ]\n      });\n      expect(mockFileHandle.createWritable).toHaveBeenCalledTimes(1);\n      expect(mockWritable.write).toHaveBeenCalledWith(JSON.stringify(testData, null, 2));\n      expect(mockWritable.close).toHaveBeenCalledTimes(1);\n    });\n\n    test('returns false when user cancels (AbortError)', async () => {\n      const mockShowSaveFilePicker = jest\n        .fn()\n        .mockRejectedValue(Object.assign(new Error('User cancelled'), { name: 'AbortError' }));\n\n      (window as any).showSaveFilePicker = mockShowSaveFilePicker;\n\n      const result = await exportUsingFileSystemAPI({ test: 'data' }, 'test.json');\n\n      expect(result).toBe(false);\n    });\n\n    test('throws error for non-AbortError exceptions', async () => {\n      const mockShowSaveFilePicker = jest.fn().mockRejectedValue(new Error('Permission denied'));\n\n      (window as any).showSaveFilePicker = mockShowSaveFilePicker;\n\n      await expect(exportUsingFileSystemAPI({ test: 'data' }, 'test.json')).rejects.toThrow(\n        'Permission denied'\n      );\n    });\n\n    test('uses default description when none provided', async () => {\n      const mockWritable = {\n        write: jest.fn().mockResolvedValue(undefined),\n        close: jest.fn().mockResolvedValue(undefined)\n      };\n      const mockFileHandle = {\n        createWritable: jest.fn().mockResolvedValue(mockWritable)\n      };\n      const mockShowSaveFilePicker = jest.fn().mockResolvedValue(mockFileHandle);\n\n      (window as any).showSaveFilePicker = mockShowSaveFilePicker;\n\n      await exportUsingFileSystemAPI({ test: 'data' }, 'test.json');\n\n      expect(mockShowSaveFilePicker).toHaveBeenCalledWith({\n        suggestedName: 'test.json',\n        types: [\n          {\n            description: 'JSON files',\n            accept: {\n              'application/json': ['.json']\n            }\n          }\n        ]\n      });\n    });\n  });\n});\n"]}