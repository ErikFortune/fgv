{"version":3,"file":"resolutionUtils.test.js","sourceRoot":"","sources":["../../../../src/test/unit/utils/resolutionUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport { succeed, fail } from '@fgv/ts-utils';\nimport {\n  createResolverWithContext,\n  resolveResourceDetailed,\n  getAvailableQualifiers,\n  hasPendingContextChanges,\n  evaluateConditionsForCandidate,\n  type ResolutionOptions\n} from '../../../utils/resolutionUtils';\nimport { ProcessedResources, ResolutionResult } from '../../../types';\n\ndescribe('resolutionUtils', () => {\n  let mockProcessedResources: ProcessedResources;\n  let mockResolver: any;\n\n  beforeEach(() => {\n    mockProcessedResources = {\n      system: {\n        resourceManager: {\n          getBuiltResource: jest.fn()\n        } as any,\n        qualifiers: {\n          validating: {\n            get: jest.fn()\n          }\n        } as any,\n        qualifierTypes: {} as any,\n        resourceTypes: {} as any,\n        importManager: {} as any,\n        contextQualifierProvider: {} as any\n      },\n      compiledCollection: {\n        resources: [\n          {\n            id: 'resource1' as unknown as any,\n            decision: 0 as unknown as any,\n            type: {} as any,\n            candidates: []\n          },\n          {\n            id: 'resource2' as unknown as any,\n            decision: 1 as unknown as any,\n            type: {} as any,\n            candidates: []\n          }\n        ],\n        qualifiers: [\n          { name: 'language' as unknown as any, type: {} as any, defaultPriority: 100 as unknown as any },\n          { name: 'territory' as unknown as any, type: {} as any, defaultPriority: 90 as unknown as any }\n        ],\n        qualifierTypes: [],\n        resourceTypes: [],\n        conditions: [\n          {\n            qualifierIndex: 0 as unknown as any,\n            value: 'en',\n            operator: 'matches',\n            priority: 100 as unknown as any\n          }\n        ],\n        conditionSets: [{ conditions: [0 as unknown as any] }],\n        decisions: [{ conditionSets: [0 as unknown as any] }],\n        candidateValues: []\n      },\n      resolver: {} as any,\n      resourceCount: 2,\n      summary: {\n        totalResources: 2,\n        resourceIds: ['resource1', 'resource2'],\n        errorCount: 0,\n        warnings: []\n      }\n    };\n\n    mockResolver = {\n      contextQualifierProvider: {\n        get: jest.fn().mockReturnValue(succeed('en'))\n      },\n      resolveResource: jest.fn(),\n      resolveAllResourceCandidates: jest.fn(),\n      resolveComposedResourceValue: jest.fn(),\n      resolveDecision: jest.fn(),\n      conditionCache: {\n        0: { score: 1.0, matchType: 'match' }\n      }\n    };\n  });\n\n  describe('getAvailableQualifiers', () => {\n    test('returns qualifier names from compiled collection', () => {\n      const result = getAvailableQualifiers(mockProcessedResources);\n\n      expect(result).toEqual(['language', 'territory']);\n    });\n\n    test('returns empty array when no qualifiers', () => {\n      const resourcesWithoutQualifiers = {\n        ...mockProcessedResources,\n        compiledCollection: {\n          ...mockProcessedResources.compiledCollection,\n          qualifiers: undefined as any\n        }\n      };\n\n      const result = getAvailableQualifiers(resourcesWithoutQualifiers);\n\n      expect(result).toEqual([]);\n    });\n\n    test('handles empty qualifiers array', () => {\n      const resourcesWithEmptyQualifiers = {\n        ...mockProcessedResources,\n        compiledCollection: {\n          ...mockProcessedResources.compiledCollection,\n          qualifiers: []\n        }\n      };\n\n      const result = getAvailableQualifiers(resourcesWithEmptyQualifiers);\n\n      expect(result).toEqual([]);\n    });\n\n    test('extracts names from qualifier objects', () => {\n      const resourcesWithComplexQualifiers = {\n        ...mockProcessedResources,\n        compiledCollection: {\n          ...mockProcessedResources.compiledCollection,\n          qualifiers: [\n            {\n              name: 'language' as unknown as any,\n              type: {} as any,\n              typeName: 'language',\n              defaultPriority: 100 as unknown as any\n            },\n            {\n              name: 'territory' as unknown as any,\n              type: {} as any,\n              typeName: 'territory',\n              defaultPriority: 90 as unknown as any\n            },\n            {\n              name: 'platform' as unknown as any,\n              type: {} as any,\n              typeName: 'literal',\n              defaultPriority: 80 as unknown as any\n            }\n          ]\n        }\n      };\n\n      const result = getAvailableQualifiers(resourcesWithComplexQualifiers);\n\n      expect(result).toEqual(['language', 'territory', 'platform']);\n    });\n  });\n\n  describe('hasPendingContextChanges', () => {\n    test('returns false when contexts are identical', () => {\n      const context = { language: 'en', territory: 'US' };\n      const pendingContext = { language: 'en', territory: 'US' };\n\n      expect(hasPendingContextChanges(context, pendingContext)).toBe(false);\n    });\n\n    test('returns true when contexts differ', () => {\n      const context = { language: 'en', territory: 'US' };\n      const pendingContext = { language: 'fr', territory: 'US' };\n\n      expect(hasPendingContextChanges(context, pendingContext)).toBe(true);\n    });\n\n    test('returns true when pending has additional values', () => {\n      const context = { language: 'en' };\n      const pendingContext = { language: 'en', territory: 'US' };\n\n      expect(hasPendingContextChanges(context, pendingContext)).toBe(true);\n    });\n\n    test('returns true when pending has fewer values', () => {\n      const context = { language: 'en', territory: 'US' };\n      const pendingContext = { language: 'en' };\n\n      expect(hasPendingContextChanges(context, pendingContext)).toBe(true);\n    });\n\n    test('handles undefined values', () => {\n      const context = { language: 'en', territory: undefined };\n      const pendingContext = { language: 'en', territory: undefined };\n\n      expect(hasPendingContextChanges(context, pendingContext)).toBe(false);\n    });\n\n    test('detects undefined to string changes', () => {\n      const context = { language: 'en', territory: undefined };\n      const pendingContext = { language: 'en', territory: 'US' };\n\n      expect(hasPendingContextChanges(context, pendingContext)).toBe(true);\n    });\n\n    test('handles empty objects', () => {\n      expect(hasPendingContextChanges({}, {})).toBe(false);\n    });\n\n    test('detects changes in empty vs non-empty', () => {\n      expect(hasPendingContextChanges({}, { language: 'en' })).toBe(true);\n      expect(hasPendingContextChanges({ language: 'en' }, {})).toBe(true);\n    });\n  });\n\n  describe('evaluateConditionsForCandidate', () => {\n    test('returns empty array when decision is missing', () => {\n      const invalidCompiled = { decision: 999 }; // Non-existent decision\n\n      const result = evaluateConditionsForCandidate(\n        mockResolver,\n        0,\n        invalidCompiled,\n        mockProcessedResources.compiledCollection\n      );\n\n      expect(result).toEqual([]);\n    });\n\n    test('returns empty array when candidate index is out of range', () => {\n      const compiled = { decision: 0 };\n\n      const result = evaluateConditionsForCandidate(\n        mockResolver,\n        999, // Out of range\n        compiled,\n        mockProcessedResources.compiledCollection\n      );\n\n      expect(result).toEqual([]);\n    });\n\n    test('evaluates conditions successfully', () => {\n      const compiled = { decision: 0 };\n\n      const result = evaluateConditionsForCandidate(\n        mockResolver,\n        0,\n        compiled,\n        mockProcessedResources.compiledCollection\n      );\n\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        qualifierName: 'language',\n        qualifierValue: 'en',\n        conditionValue: 'en',\n        operator: 'matches',\n        score: 1.0,\n        matched: true,\n        matchType: 'match',\n        scoreAsDefault: undefined,\n        conditionIndex: 0\n      });\n    });\n\n    test('handles missing condition sets', () => {\n      const compiledCollectionWithoutConditionSets = {\n        ...mockProcessedResources.compiledCollection,\n        decisions: [{ conditionSets: undefined }]\n      };\n      const compiled = { decision: 0 };\n\n      const result = evaluateConditionsForCandidate(\n        mockResolver,\n        0,\n        compiled,\n        compiledCollectionWithoutConditionSets\n      );\n\n      expect(result).toEqual([]);\n    });\n\n    test('handles resolver errors gracefully', () => {\n      const errorResolver = {\n        ...mockResolver,\n        contextQualifierProvider: {\n          get: jest.fn().mockImplementation(() => {\n            throw new Error('Context error');\n          })\n        }\n      };\n      const compiled = { decision: 0 };\n\n      const result = evaluateConditionsForCandidate(\n        errorResolver,\n        0,\n        compiled,\n        mockProcessedResources.compiledCollection\n      );\n\n      expect(result).toEqual([]);\n    });\n\n    test('handles missing cache entries', () => {\n      const resolverWithoutCache = {\n        ...mockResolver,\n        conditionCache: {}\n      };\n      const compiled = { decision: 0 };\n\n      const result = evaluateConditionsForCandidate(\n        resolverWithoutCache,\n        0,\n        compiled,\n        mockProcessedResources.compiledCollection\n      );\n\n      expect(result).toHaveLength(1);\n      expect(result[0].score).toBe(0);\n      expect(result[0].matchType).toBe('noMatch');\n      expect(result[0].matched).toBe(false);\n    });\n  });\n\n  describe('resolveResourceDetailed', () => {\n    beforeEach(() => {\n      const mockResource = {\n        id: 'resource1',\n        candidates: [{ value: 'candidate1' }, { value: 'candidate2' }],\n        decision: {\n          baseDecision: {}\n        }\n      };\n\n      mockProcessedResources.system.resourceManager.getBuiltResource = jest\n        .fn()\n        .mockReturnValue(succeed(mockResource));\n\n      mockResolver.resolveResource = jest.fn().mockReturnValue(succeed(mockResource.candidates[0]));\n      mockResolver.resolveAllResourceCandidates = jest\n        .fn()\n        .mockReturnValue(succeed([mockResource.candidates[0]]));\n      mockResolver.resolveComposedResourceValue = jest.fn().mockReturnValue(succeed('composed value'));\n      mockResolver.resolveDecision = jest.fn().mockReturnValue(\n        succeed({\n          success: true,\n          instanceIndices: [0],\n          defaultInstanceIndices: []\n        })\n      );\n    });\n\n    test('resolves resource successfully', () => {\n      const result = resolveResourceDetailed(mockResolver, 'resource1', mockProcessedResources);\n\n      expect(result).toSucceedAndSatisfy((resolution: ResolutionResult) => {\n        expect(resolution.success).toBe(true);\n        expect(resolution.resourceId).toBe('resource1');\n        expect(resolution.resource).toBeDefined();\n        expect(resolution.bestCandidate).toBeDefined();\n        expect(resolution.allCandidates).toBeDefined();\n        expect(resolution.candidateDetails).toBeInstanceOf(Array);\n        expect(resolution.candidateDetails).toBeDefined();\n        expect(resolution.composedValue).toBe('composed value');\n      });\n    });\n\n    test('handles resource not found', () => {\n      mockProcessedResources.system.resourceManager.getBuiltResource = jest\n        .fn()\n        .mockReturnValue(fail('Resource not found'));\n\n      const result = resolveResourceDetailed(mockResolver, 'nonexistent', mockProcessedResources);\n\n      expect(result).toSucceedAndSatisfy((resolution: ResolutionResult) => {\n        expect(resolution.success).toBe(false);\n        expect(resolution.resourceId).toBe('nonexistent');\n        expect(resolution.error).toBe('Failed to get resource: Resource not found');\n      });\n    });\n\n    test('handles missing compiled resource', () => {\n      const resourcesWithoutCompiledResource = {\n        ...mockProcessedResources,\n        compiledCollection: {\n          ...mockProcessedResources.compiledCollection,\n          resources: [] // Empty resources array\n        }\n      };\n\n      const result = resolveResourceDetailed(mockResolver, 'resource1', resourcesWithoutCompiledResource);\n\n      expect(result).toSucceedAndSatisfy((resolution: ResolutionResult) => {\n        expect(resolution.success).toBe(false);\n        expect(resolution.resourceId).toBe('resource1');\n        expect(resolution.error).toBe('Failed to find compiled resource');\n      });\n    });\n\n    test('handles decision resolution failure', () => {\n      mockResolver.resolveDecision = jest.fn().mockReturnValue(fail('Decision failed'));\n\n      const result = resolveResourceDetailed(mockResolver, 'resource1', mockProcessedResources);\n\n      expect(result).toSucceedAndSatisfy((resolution: ResolutionResult) => {\n        expect(resolution.success).toBe(false);\n        expect(resolution.resourceId).toBe('resource1');\n        expect(resolution.error).toBe('Failed to resolve decision: Decision failed');\n      });\n    });\n\n    test('handles resolution options with debug logging', () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\n\n      const result = resolveResourceDetailed(mockResolver, 'resource1', mockProcessedResources, {\n        enableDebugLogging: true\n      });\n\n      expect(result).toSucceed();\n      expect(consoleSpy).toHaveBeenCalledWith('=== RESOLVING RESOURCE ===');\n      expect(consoleSpy).toHaveBeenCalledWith('Resource ID:', 'resource1');\n\n      consoleSpy.mockRestore();\n    });\n\n    test('builds candidate details with match information', () => {\n      const result = resolveResourceDetailed(mockResolver, 'resource1', mockProcessedResources);\n\n      expect(result).toSucceedAndSatisfy((resolution: ResolutionResult) => {\n        expect(resolution.candidateDetails).toBeDefined();\n        if (resolution.candidateDetails) {\n          expect(resolution.candidateDetails).toHaveLength(2);\n\n          // First candidate should be matched\n          const matchedCandidate = resolution.candidateDetails.find((c) => c.matched);\n          expect(matchedCandidate).toBeDefined();\n          expect(matchedCandidate!.matchType).toBe('match');\n          expect(matchedCandidate!.isDefaultMatch).toBe(false);\n\n          // Second candidate should be non-matched\n          const nonMatchedCandidate = resolution.candidateDetails.find((c) => !c.matched);\n          expect(nonMatchedCandidate).toBeDefined();\n          expect(nonMatchedCandidate!.matchType).toBe('noMatch');\n          expect(nonMatchedCandidate!.isDefaultMatch).toBe(false);\n        }\n      });\n    });\n\n    test('handles resolver failures gracefully', () => {\n      mockResolver.resolveResource = jest.fn().mockReturnValue(fail('Resolution failed'));\n\n      const result = resolveResourceDetailed(mockResolver, 'resource1', mockProcessedResources);\n\n      expect(result).toSucceedAndSatisfy((resolution: ResolutionResult) => {\n        expect(resolution.success).toBe(true); // Still succeeds but with error info\n        expect(resolution.error).toBe('Resolution failed');\n        expect(resolution.bestCandidate).toBeUndefined();\n      });\n    });\n  });\n\n  describe('createResolverWithContext', () => {\n    test('filters undefined context values', () => {\n      const contextValues = {\n        language: 'en',\n        territory: undefined,\n        platform: 'web'\n      };\n\n      // We can't easily test the internal filtering without complex mocking,\n      // so we test that the function doesn't throw with undefined values\n      expect(() => createResolverWithContext(mockProcessedResources, contextValues)).not.toThrow();\n    });\n\n    test('handles empty context', () => {\n      const result = createResolverWithContext(mockProcessedResources, {});\n\n      // Should attempt to create resolver even with empty context\n      expect(result).toBeDefined();\n    });\n\n    test('applies debug logging option', () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\n\n      createResolverWithContext(mockProcessedResources, { language: 'en' }, { enableDebugLogging: true });\n\n      expect(consoleSpy).toHaveBeenCalledWith('=== CREATING RESOLVER WITH CONTEXT ===');\n\n      consoleSpy.mockRestore();\n    });\n\n    test('applies caching option', () => {\n      // Test that caching option is processed without errors\n      const result = createResolverWithContext(\n        mockProcessedResources,\n        { language: 'en' },\n        { enableCaching: true }\n      );\n\n      expect(result).toBeDefined();\n    });\n  });\n});\n"]}