{"version":3,"file":"filterResources.test.js","sourceRoot":"","sources":["../../../../src/test/unit/utils/filterResources.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport '@fgv/ts-utils-jest';\nimport { succeed, fail } from '@fgv/ts-utils';\nimport {\n  hasFilterValues,\n  getFilterSummary,\n  createFilteredResourceManagerSimple,\n  analyzeFilteredResources,\n  type FilterOptions\n} from '../../../utils/filterResources';\nimport { ProcessedResources, FilteredResource } from '../../../types';\n\n// Mock the tsResIntegration module\njest.mock('../../../utils/tsResIntegration', () => ({\n  createCompiledResourceCollectionManager: jest.fn().mockReturnValue(succeed({}))\n}));\n\ndescribe('filterResources utilities', () => {\n  describe('hasFilterValues', () => {\n    test('returns false for empty object', () => {\n      expect(hasFilterValues({})).toBe(false);\n    });\n\n    test('returns false for object with all undefined values', () => {\n      expect(\n        hasFilterValues({\n          key1: undefined,\n          key2: undefined\n        })\n      ).toBe(false);\n    });\n\n    test('returns false for object with all empty string values', () => {\n      expect(\n        hasFilterValues({\n          key1: '',\n          key2: ''\n        })\n      ).toBe(false);\n    });\n\n    test('returns false for object with mixed undefined and empty string values', () => {\n      expect(\n        hasFilterValues({\n          key1: undefined,\n          key2: '',\n          key3: undefined\n        })\n      ).toBe(false);\n    });\n\n    test('returns true for object with at least one meaningful value', () => {\n      expect(\n        hasFilterValues({\n          key1: undefined,\n          key2: '',\n          key3: 'value'\n        })\n      ).toBe(true);\n    });\n\n    test('returns true for object with multiple meaningful values', () => {\n      expect(\n        hasFilterValues({\n          key1: 'value1',\n          key2: 'value2'\n        })\n      ).toBe(true);\n    });\n\n    test('returns true for object with meaningful value containing spaces', () => {\n      expect(\n        hasFilterValues({\n          key1: '  value with spaces  '\n        })\n      ).toBe(true);\n    });\n\n    test('returns true for object with zero as string value', () => {\n      expect(\n        hasFilterValues({\n          key1: '0'\n        })\n      ).toBe(true);\n    });\n\n    test('returns true for object with boolean string values', () => {\n      expect(\n        hasFilterValues({\n          key1: 'false'\n        })\n      ).toBe(true);\n    });\n  });\n\n  describe('getFilterSummary', () => {\n    test('returns \"No filters\" for empty object', () => {\n      expect(getFilterSummary({})).toBe('No filters');\n    });\n\n    test('returns \"No filters\" for object with all undefined values', () => {\n      expect(\n        getFilterSummary({\n          key1: undefined,\n          key2: undefined\n        })\n      ).toBe('No filters');\n    });\n\n    test('returns \"No filters\" for object with all empty string values', () => {\n      expect(\n        getFilterSummary({\n          key1: '',\n          key2: ''\n        })\n      ).toBe('No filters');\n    });\n\n    test('returns summary for single active filter', () => {\n      expect(\n        getFilterSummary({\n          language: 'en',\n          territory: undefined\n        })\n      ).toBe('language=en');\n    });\n\n    test('returns summary for multiple active filters', () => {\n      const result = getFilterSummary({\n        language: 'en',\n        territory: 'US',\n        platform: undefined\n      });\n\n      // Check that it contains both filters (order may vary)\n      expect(result).toMatch(/language=en/);\n      expect(result).toMatch(/territory=US/);\n      expect(result).toMatch(/,/); // Should contain comma separator\n    });\n\n    test('returns summary ignoring empty and undefined values', () => {\n      expect(\n        getFilterSummary({\n          empty: '',\n          undefined: undefined,\n          language: 'fr',\n          nullish: undefined,\n          territory: 'CA'\n        })\n      ).toMatch(/language=fr.*territory=CA|territory=CA.*language=fr/);\n    });\n\n    test('handles special characters in values', () => {\n      expect(\n        getFilterSummary({\n          language: 'en-US',\n          territory: 'US/CA'\n        })\n      ).toMatch(/language=en-US.*territory=US\\/CA|territory=US\\/CA.*language=en-US/);\n    });\n\n    test('handles numeric string values', () => {\n      expect(\n        getFilterSummary({\n          version: '1.0',\n          level: '0'\n        })\n      ).toMatch(/version=1\\.0.*level=0|level=0.*version=1\\.0/);\n    });\n  });\n\n  describe('createFilteredResourceManagerSimple', () => {\n    let mockResourceManager: any;\n    let mockSystem: any;\n\n    beforeEach(() => {\n      mockResourceManager = {\n        getCompiledResourceCollection: jest.fn(),\n        validateContext: jest.fn(),\n        clone: jest.fn(),\n        resources: new Map([\n          ['resource1', {}],\n          ['resource2', {}]\n        ])\n      };\n\n      mockSystem = {\n        resourceManager: mockResourceManager,\n        qualifiers: {},\n        qualifierTypes: {\n          values: jest.fn().mockReturnValue([])\n        },\n        resourceTypes: {\n          values: jest.fn().mockReturnValue([])\n        },\n        importManager: {},\n        contextQualifierProvider: {\n          create: jest.fn()\n        }\n      };\n    });\n\n    test('returns error when original system is undefined', async () => {\n      const result = await createFilteredResourceManagerSimple(\n        undefined as any,\n        {},\n        { partialContextMatch: true }\n      );\n\n      expect(result).toFail();\n      expect(result.message).toBe('Original system or resourceManager is undefined');\n    });\n\n    test('returns error when resourceManager is undefined', async () => {\n      const result = await createFilteredResourceManagerSimple(\n        { ...mockSystem, resourceManager: undefined },\n        {},\n        { partialContextMatch: true }\n      );\n\n      expect(result).toFail();\n      expect(result.message).toBe('Original system or resourceManager is undefined');\n    });\n\n    test('skips bundle resources and tries filtering', async () => {\n      // Make getCompiledResourceCollection fail to force the filtering path\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle available'));\n\n      // Mock the validation and clone steps to fail gracefully\n      mockResourceManager.validateContext.mockReturnValue(fail('Context validation failed'));\n\n      const result = await createFilteredResourceManagerSimple(\n        mockSystem,\n        { language: 'en' },\n        { partialContextMatch: true }\n      );\n\n      expect(result).toFail();\n      expect(result.message).toContain('Failed to validate context or clone');\n    });\n\n    test('filters context values before processing', async () => {\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle'));\n      mockResourceManager.validateContext.mockReturnValue(succeed({}));\n      mockResourceManager.clone.mockReturnValue(fail('Clone failed'));\n\n      const partialContext = {\n        language: 'en',\n        territory: undefined,\n        platform: 'web'\n      };\n\n      await createFilteredResourceManagerSimple(mockSystem, partialContext);\n\n      expect(mockResourceManager.validateContext).toHaveBeenCalledWith({\n        language: 'en',\n        platform: 'web'\n      });\n    });\n\n    test('handles validation context error', async () => {\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle'));\n      mockResourceManager.validateContext.mockReturnValue(fail('Invalid context'));\n\n      const result = await createFilteredResourceManagerSimple(mockSystem, { language: 'invalid' });\n\n      expect(result).toFail();\n      expect(result.message).toContain('Failed to validate context or clone');\n    });\n\n    test('handles clone error', async () => {\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle'));\n      mockResourceManager.validateContext.mockReturnValue(succeed({}));\n      mockResourceManager.clone.mockReturnValue(fail('Clone failed'));\n\n      const result = await createFilteredResourceManagerSimple(mockSystem, { language: 'en' });\n\n      expect(result).toFail();\n      expect(result.message).toContain('Failed to validate context or clone');\n    });\n\n    test('passes options to clone correctly', async () => {\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle'));\n      mockResourceManager.validateContext.mockReturnValue(succeed({ language: 'en' }));\n      mockResourceManager.clone.mockReturnValue(fail('Clone failed for test'));\n\n      const options: FilterOptions = {\n        partialContextMatch: false,\n        enableDebugLogging: true,\n        reduceQualifiers: true\n      };\n\n      await createFilteredResourceManagerSimple(mockSystem, { language: 'en' }, options);\n\n      expect(mockResourceManager.clone).toHaveBeenCalledWith({\n        filterForContext: { language: 'en' },\n        reduceQualifiers: true\n      });\n    });\n\n    test('handles debug logging option', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\n\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle'));\n      mockResourceManager.validateContext.mockReturnValue(succeed({}));\n      mockResourceManager.clone.mockReturnValue(fail('Clone failed'));\n\n      await createFilteredResourceManagerSimple(mockSystem, { language: 'en' }, { enableDebugLogging: true });\n\n      expect(consoleSpy).toHaveBeenCalledWith('=== SIMPLE FILTER CREATION ===');\n      expect(consoleSpy).toHaveBeenCalledWith('Original system:', mockSystem);\n\n      consoleSpy.mockRestore();\n    });\n\n    test('does not log when debug logging is disabled', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\n\n      mockResourceManager.getCompiledResourceCollection.mockReturnValue(fail('No bundle'));\n      mockResourceManager.validateContext.mockReturnValue(succeed({}));\n      mockResourceManager.clone.mockReturnValue(fail('Clone failed'));\n\n      await createFilteredResourceManagerSimple(\n        mockSystem,\n        { language: 'en' },\n        { enableDebugLogging: false }\n      );\n\n      expect(consoleSpy).not.toHaveBeenCalled();\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('analyzeFilteredResources', () => {\n    let mockOriginalProcessedResources: ProcessedResources;\n    let mockFilteredProcessedResources: ProcessedResources;\n\n    beforeEach(() => {\n      mockOriginalProcessedResources = {\n        system: {\n          resourceManager: {\n            getBuiltResource: jest.fn()\n          } as any,\n          qualifiers: {} as any, // TODO: Fix mock types after refactoring\n          qualifierTypes: {} as any,\n          resourceTypes: {} as any,\n          importManager: {} as any,\n          contextQualifierProvider: {} as any\n        },\n        compiledCollection: {} as any,\n        resolver: {} as any,\n        resourceCount: 2,\n        summary: {\n          totalResources: 2,\n          resourceIds: [],\n          errorCount: 0,\n          warnings: []\n        }\n      };\n\n      mockFilteredProcessedResources = {\n        system: {\n          resourceManager: {\n            getBuiltResource: jest.fn()\n          } as any,\n          qualifiers: {} as any, // TODO: Fix mock types after refactoring\n          qualifierTypes: {} as any,\n          resourceTypes: {} as any,\n          importManager: {} as any,\n          contextQualifierProvider: {} as any\n        },\n        compiledCollection: {} as any,\n        resolver: {} as any,\n        resourceCount: 1,\n        summary: {\n          totalResources: 1,\n          resourceIds: [],\n          errorCount: 0,\n          warnings: []\n        }\n      };\n    });\n\n    test('analyzes resources with successful filtering', () => {\n      const originalGetBuiltResource = mockOriginalProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n      const filteredGetBuiltResource = mockFilteredProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n\n      originalGetBuiltResource\n        .mockReturnValueOnce(succeed({ candidates: ['c1', 'c2'] }))\n        .mockReturnValueOnce(succeed({ candidates: ['c3'] }));\n\n      filteredGetBuiltResource\n        .mockReturnValueOnce(succeed({ candidates: ['c1'] }))\n        .mockReturnValueOnce(succeed({ candidates: ['c3'] }));\n\n      const result = analyzeFilteredResources(\n        ['resource1', 'resource2'],\n        mockFilteredProcessedResources,\n        mockOriginalProcessedResources\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.filteredResources).toHaveLength(2);\n\n      const resource1 = result.filteredResources[0];\n      expect(resource1.id).toBe('resource1');\n      expect(resource1.originalCandidateCount).toBe(2);\n      expect(resource1.filteredCandidateCount).toBe(1);\n      expect(resource1.hasWarning).toBe(false);\n\n      const resource2 = result.filteredResources[1];\n      expect(resource2.id).toBe('resource2');\n      expect(resource2.originalCandidateCount).toBe(1);\n      expect(resource2.filteredCandidateCount).toBe(1);\n      expect(resource2.hasWarning).toBe(false);\n\n      expect(result.warnings).toEqual([]);\n      expect(result.processedResources).toBe(mockFilteredProcessedResources);\n    });\n\n    test('detects resources filtered out completely', () => {\n      const originalGetBuiltResource = mockOriginalProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n      const filteredGetBuiltResource = mockFilteredProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n\n      originalGetBuiltResource.mockReturnValueOnce(succeed({ candidates: ['c1', 'c2'] }));\n\n      filteredGetBuiltResource.mockReturnValueOnce(succeed({ candidates: [] }));\n\n      const result = analyzeFilteredResources(\n        ['resource1'],\n        mockFilteredProcessedResources,\n        mockOriginalProcessedResources\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.filteredResources).toHaveLength(1);\n\n      const resource1 = result.filteredResources[0];\n      expect(resource1.id).toBe('resource1');\n      expect(resource1.originalCandidateCount).toBe(2);\n      expect(resource1.filteredCandidateCount).toBe(0);\n      expect(resource1.hasWarning).toBe(true);\n\n      expect(result.warnings).toEqual(['Resource resource1 has no matching candidates after filtering']);\n    });\n\n    test('handles resources that failed to load originally', () => {\n      const originalGetBuiltResource = mockOriginalProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n      const filteredGetBuiltResource = mockFilteredProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n\n      originalGetBuiltResource.mockReturnValueOnce(fail('Resource not found'));\n\n      filteredGetBuiltResource.mockReturnValueOnce(fail('Resource not found'));\n\n      const result = analyzeFilteredResources(\n        ['resource1'],\n        mockFilteredProcessedResources,\n        mockOriginalProcessedResources\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.filteredResources).toHaveLength(1);\n\n      const resource1 = result.filteredResources[0];\n      expect(resource1.id).toBe('resource1');\n      expect(resource1.originalCandidateCount).toBe(0);\n      expect(resource1.filteredCandidateCount).toBe(0);\n      expect(resource1.hasWarning).toBe(false);\n\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('handles resources that failed to load after filtering', () => {\n      const originalGetBuiltResource = mockOriginalProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n      const filteredGetBuiltResource = mockFilteredProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n\n      originalGetBuiltResource.mockReturnValueOnce(succeed({ candidates: ['c1'] }));\n\n      filteredGetBuiltResource.mockReturnValueOnce(fail('Resource filtered out'));\n\n      const result = analyzeFilteredResources(\n        ['resource1'],\n        mockFilteredProcessedResources,\n        mockOriginalProcessedResources\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.filteredResources).toHaveLength(1);\n\n      const resource1 = result.filteredResources[0];\n      expect(resource1.id).toBe('resource1');\n      expect(resource1.originalCandidateCount).toBe(1);\n      expect(resource1.filteredCandidateCount).toBe(0);\n      expect(resource1.hasWarning).toBe(true);\n\n      expect(result.warnings).toContain('Resource resource1 has no matching candidates after filtering');\n    });\n\n    test('handles empty resource list', () => {\n      const result = analyzeFilteredResources(\n        [],\n        mockFilteredProcessedResources,\n        mockOriginalProcessedResources\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.filteredResources).toEqual([]);\n      expect(result.warnings).toEqual([]);\n    });\n\n    test('handles mixed success and failure scenarios', () => {\n      const originalGetBuiltResource = mockOriginalProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n      const filteredGetBuiltResource = mockFilteredProcessedResources.system.resourceManager\n        .getBuiltResource as jest.Mock;\n\n      originalGetBuiltResource\n        .mockReturnValueOnce(succeed({ candidates: ['c1', 'c2'] }))\n        .mockReturnValueOnce(fail('Original failed'))\n        .mockReturnValueOnce(succeed({ candidates: ['c3'] }));\n\n      filteredGetBuiltResource\n        .mockReturnValueOnce(succeed({ candidates: [] }))\n        .mockReturnValueOnce(succeed({ candidates: ['c2'] }))\n        .mockReturnValueOnce(succeed({ candidates: ['c3'] }));\n\n      const result = analyzeFilteredResources(\n        ['resource1', 'resource2', 'resource3'],\n        mockFilteredProcessedResources,\n        mockOriginalProcessedResources\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.filteredResources).toHaveLength(3);\n\n      expect(result.filteredResources[0].hasWarning).toBe(true); // Had candidates, now none\n      expect(result.filteredResources[1].hasWarning).toBe(false); // Originally failed, now has candidates\n      expect(result.filteredResources[2].hasWarning).toBe(false); // Same count\n\n      expect(result.warnings).toEqual(['Resource resource1 has no matching candidates after filtering']);\n    });\n  });\n});\n"]}