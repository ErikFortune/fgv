{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/types/index.ts"],"names":[],"mappings":"","sourcesContent":["import { Result } from '@fgv/ts-utils';\nimport { ResourceJson, Config, Bundle, Resources, Runtime } from '@fgv/ts-res';\n\n// Message system types\nexport interface Message {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'success';\n  message: string;\n  timestamp: Date;\n}\n\n// Filter state management\nexport interface FilterState {\n  enabled: boolean;\n  values: Record<string, string | undefined>;\n  appliedValues: Record<string, string | undefined>;\n  hasPendingChanges: boolean;\n  reduceQualifiers: boolean;\n}\n\nexport interface FilterActions {\n  updateFilterEnabled: (enabled: boolean) => void;\n  updateFilterValues: (values: Record<string, string | undefined>) => void;\n  applyFilterValues: () => void;\n  resetFilterValues: () => void;\n  updateReduceQualifiers: (reduceQualifiers: boolean) => void;\n}\n\n// Resource processing types\nexport interface ProcessedResources {\n  system: {\n    resourceManager: Resources.ResourceManagerBuilder;\n    qualifierTypes: any;\n    qualifiers: any;\n    resourceTypes: any;\n    importManager: any;\n    contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n  };\n  compiledCollection: ResourceJson.Compiled.ICompiledResourceCollection;\n  resolver: Runtime.ResourceResolver;\n  resourceCount: number;\n  summary: {\n    totalResources: number;\n    resourceIds: string[];\n    errorCount: number;\n    warnings: string[];\n  };\n}\n\n// Extended processed resources with additional metadata\nexport interface ExtendedProcessedResources extends ProcessedResources {\n  activeConfiguration?: Config.Model.ISystemConfiguration | null;\n  isLoadedFromBundle?: boolean;\n  bundleMetadata?: Bundle.IBundleMetadata | null;\n}\n\n// Resource manager state\nexport interface ResourceManagerState {\n  isProcessing: boolean;\n  processedResources: ExtendedProcessedResources | null;\n  error: string | null;\n  hasProcessedData: boolean;\n  activeConfiguration: Config.Model.ISystemConfiguration | null;\n  isLoadedFromBundle: boolean;\n  bundleMetadata: Bundle.IBundleMetadata | null;\n}\n\n// File import types\nexport interface ImportedFile {\n  name: string;\n  path?: string;\n  content: string;\n  type?: string;\n}\n\nexport interface ImportedDirectory {\n  name: string;\n  path?: string;\n  files: ImportedFile[];\n  subdirectories?: ImportedDirectory[];\n}\n\n// Component prop types for each view\nexport interface ViewBaseProps {\n  onMessage?: (type: Message['type'], message: string) => void;\n  className?: string;\n}\n\nexport interface ImportViewProps extends ViewBaseProps {\n  onImport?: (data: ImportedDirectory | ImportedFile[]) => void;\n  onBundleImport?: (bundle: Bundle.IBundle) => void;\n  acceptedFileTypes?: string[];\n}\n\nexport interface SourceViewProps extends ViewBaseProps {\n  resources?: ExtendedProcessedResources | null;\n  selectedResourceId?: string | null;\n  onResourceSelect?: (resourceId: string) => void;\n  onExport?: (data: any, type: 'json') => void;\n}\n\nexport interface FilterViewProps extends ViewBaseProps {\n  resources?: ProcessedResources | null;\n  filterState: FilterState;\n  filterActions: FilterActions;\n  filterResult?: FilterResult | null;\n  onFilterResult?: (result: FilterResult | null) => void;\n}\n\nexport interface CompiledViewProps extends ViewBaseProps {\n  resources?: ExtendedProcessedResources | null;\n  filterState?: FilterState;\n  filterResult?: FilterResult | null;\n  useNormalization?: boolean;\n  onExport?: (data: any, type: 'json' | 'bundle') => void;\n}\n\nexport interface ResolutionViewProps extends ViewBaseProps {\n  resources?: ProcessedResources | null;\n  filterState?: FilterState;\n  filterResult?: FilterResult | null;\n  resolutionState?: ResolutionState;\n  resolutionActions?: ResolutionActions;\n  availableQualifiers?: string[];\n}\n\n// Resolution types\nexport interface ResolutionState {\n  contextValues: Record<string, string | undefined>;\n  pendingContextValues: Record<string, string | undefined>;\n  selectedResourceId: string | null;\n  currentResolver: Runtime.ResourceResolver | null;\n  resolutionResult: ResolutionResult | null;\n  viewMode: 'composed' | 'best' | 'all' | 'raw';\n  hasPendingChanges: boolean;\n}\n\nexport interface ResolutionActions {\n  updateContextValue: (qualifierName: string, value: string | undefined) => void;\n  applyContext: () => void;\n  selectResource: (resourceId: string) => void;\n  setViewMode: (mode: 'composed' | 'best' | 'all' | 'raw') => void;\n  resetCache: () => void;\n}\n\nexport interface ResolutionResult {\n  success: boolean;\n  resourceId: string;\n  resource?: Runtime.IResource;\n  bestCandidate?: Runtime.IResourceCandidate;\n  allCandidates?: readonly Runtime.IResourceCandidate[];\n  candidateDetails?: CandidateInfo[];\n  composedValue?: any;\n  error?: string;\n}\n\nexport interface CandidateInfo {\n  candidate: Runtime.IResourceCandidate;\n  conditionSetKey: string | null;\n  candidateIndex: number;\n  matched: boolean;\n  matchType: 'match' | 'matchAsDefault' | 'noMatch';\n  isDefaultMatch: boolean;\n  conditionEvaluations?: ConditionEvaluationResult[];\n}\n\nexport interface ConditionEvaluationResult {\n  qualifierName: string;\n  qualifierValue: any;\n  conditionValue: any;\n  operator: string;\n  score: number;\n  matched: boolean;\n  matchType: 'match' | 'matchAsDefault' | 'noMatch';\n  scoreAsDefault?: number;\n  conditionIndex: number;\n}\n\nexport interface ConfigurationViewProps extends ViewBaseProps {\n  configuration?: Config.Model.ISystemConfiguration | null;\n  onConfigurationChange?: (config: Config.Model.ISystemConfiguration) => void;\n  onSave?: (config: Config.Model.ISystemConfiguration) => void;\n  hasUnsavedChanges?: boolean;\n}\n\n\nexport interface ZipLoaderViewProps extends ViewBaseProps {\n  zipFileUrl?: string;\n  zipPath?: string;\n  onLoadComplete?: (resources: ProcessedResources) => void;\n}\n\n// Resource detail types for SourceView\nexport interface ResourceDetailData {\n  id: string;\n  resourceType: string;\n  candidateCount: number;\n  candidates: Array<{\n    json: any;\n    conditions: Array<{\n      qualifier: string;\n      operator: string;\n      value: string;\n      priority: number;\n      scoreAsDefault?: number;\n    }>;\n    isPartial: boolean;\n    mergeMethod: string;\n  }>;\n}\n\nexport interface FilteredResource {\n  id: string;\n  originalCandidateCount: number;\n  filteredCandidateCount: number;\n  hasWarning: boolean;\n}\n\n// Filter result type\nexport interface FilterResult {\n  success: boolean;\n  processedResources?: ProcessedResources;\n  filteredResources?: FilteredResource[];\n  warnings?: string[];\n  error?: string;\n}\n\n// Orchestrator types\nexport interface OrchestratorState {\n  resources: ExtendedProcessedResources | null;\n  configuration: Config.Model.ISystemConfiguration | null;\n  filterState: FilterState;\n  filterResult: FilterResult | null;\n  resolutionState: ResolutionState;\n  selectedResourceId: string | null;\n  isProcessing: boolean;\n  error: string | null;\n  messages: Message[];\n}\n\nexport interface OrchestratorActions {\n  // Resource management\n  importDirectory: (directory: ImportedDirectory) => Promise<void>;\n  importFiles: (files: ImportedFile[]) => Promise<void>;\n  importBundle: (bundle: Bundle.IBundle) => Promise<void>;\n  clearResources: () => void;\n  \n  // Configuration management\n  updateConfiguration: (config: Config.Model.ISystemConfiguration) => void;\n  applyConfiguration: (config: Config.Model.ISystemConfiguration) => void;\n  \n  // Filter management\n  updateFilterState: (state: Partial<FilterState>) => void;\n  applyFilter: () => Promise<FilterResult | null>;\n  resetFilter: () => void;\n  \n  // Resolution management\n  updateResolutionContext: (qualifierName: string, value: string | undefined) => void;\n  applyResolutionContext: () => void;\n  selectResourceForResolution: (resourceId: string) => void;\n  setResolutionViewMode: (mode: 'composed' | 'best' | 'all' | 'raw') => void;\n  resetResolutionCache: () => void;\n  \n  // UI state management\n  selectResource: (resourceId: string | null) => void;\n  addMessage: (type: Message['type'], message: string) => void;\n  clearMessages: () => void;\n  \n  // Resource resolution\n  resolveResource: (resourceId: string, context?: Record<string, string>) => Promise<Result<any>>;\n}\n\n// Export utility types\nexport type { Result } from '@fgv/ts-utils';"]}