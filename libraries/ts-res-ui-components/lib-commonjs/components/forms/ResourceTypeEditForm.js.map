{"version":3,"file":"ResourceTypeEditForm.js","sourceRoot":"","sources":["../../../src/components/forms/ResourceTypeEditForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport {\n  XMarkIcon,\n  InformationCircleIcon\n} from '@heroicons/react/24/outline';\nimport { ResourceTypes } from '@fgv/ts-res';\n\nexport interface ResourceTypeEditFormProps {\n  resourceType?: ResourceTypes.Config.IResourceTypeConfig;\n  onSave: (resourceType: ResourceTypes.Config.IResourceTypeConfig) => void;\n  onCancel: () => void;\n  existingNames?: string[];\n}\n\ninterface FormData {\n  name: string;\n  typeName: string;\n}\n\nconst COMMON_TYPE_NAMES = [\n  'string',\n  'object',\n  'array',\n  'number',\n  'boolean',\n  'localizedString',\n  'config',\n  'settings',\n  'permissions',\n  'template',\n  'content',\n  'metadata'\n];\n\nexport const ResourceTypeEditForm: React.FC<ResourceTypeEditFormProps> = ({\n  resourceType,\n  onSave,\n  onCancel,\n  existingNames = []\n}) => {\n  const [formData, setFormData] = useState<FormData>(() => {\n    if (resourceType) {\n      return {\n        name: resourceType.name,\n        typeName: resourceType.typeName\n      };\n    }\n    return {\n      name: '',\n      typeName: 'string'\n    };\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [useCustomTypeName, setUseCustomTypeName] = useState(() => {\n    if (resourceType) {\n      return !COMMON_TYPE_NAMES.includes(resourceType.typeName);\n    }\n    return false;\n  });\n\n  // Validation\n  const validateForm = useCallback((): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (existingNames.includes(formData.name) && formData.name !== resourceType?.name) {\n      newErrors.name = 'Name must be unique';\n    } else if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(formData.name)) {\n      newErrors.name = 'Name must start with a letter and contain only letters, numbers, and underscores';\n    }\n\n    if (!formData.typeName.trim()) {\n      newErrors.typeName = 'Type name is required';\n    } else if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(formData.typeName)) {\n      newErrors.typeName = 'Type name must start with a letter and contain only letters, numbers, and underscores';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData, existingNames, resourceType?.name]);\n\n  const handleSave = useCallback(() => {\n    if (!validateForm()) return;\n\n    const result: ResourceTypes.Config.IResourceTypeConfig = {\n      name: formData.name,\n      typeName: formData.typeName\n    };\n\n    onSave(result);\n  }, [formData, validateForm, onSave]);\n\n  const updateField = useCallback((field: keyof FormData, value: any) => {\n    setFormData(prev => {\n      const updated = { ...prev, [field]: value };\n      \n      // Auto-generate typeName from name for new resource types if using common types\n      if (field === 'name' && !resourceType && !useCustomTypeName) {\n        const cleanName = value.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');\n        const commonType = COMMON_TYPE_NAMES.find(type => \n          cleanName.includes(type) || type.includes(cleanName)\n        );\n        if (commonType) {\n          updated.typeName = commonType;\n        } else {\n          updated.typeName = cleanName || 'string';\n        }\n      }\n      \n      return updated;\n    });\n    \n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  }, [errors, resourceType, useCustomTypeName]);\n\n  const handleTypeNameModeChange = useCallback((useCustom: boolean) => {\n    setUseCustomTypeName(useCustom);\n    if (!useCustom && !resourceType) {\n      // Reset to a common type\n      updateField('typeName', 'string');\n    }\n  }, [resourceType, updateField]);\n\n  const getTypeNameDescription = (typeName: string): string => {\n    switch (typeName) {\n      case 'string':\n        return 'Simple text content (default)';\n      case 'object':\n        return 'Complex structured data (JSON objects)';\n      case 'array':\n        return 'List of values or objects';\n      case 'number':\n        return 'Numeric values';\n      case 'boolean':\n        return 'True/false values';\n      case 'localizedString':\n        return 'Text content with localization support';\n      case 'config':\n        return 'Configuration settings and parameters';\n      case 'settings':\n        return 'User or application settings';\n      case 'permissions':\n        return 'Access control and permission data';\n      case 'template':\n        return 'Template content for rendering';\n      case 'content':\n        return 'Rich content (HTML, Markdown, etc.)';\n      case 'metadata':\n        return 'Descriptive information about resources';\n      default:\n        return 'Custom resource type';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            {resourceType ? 'Edit Resource Type' : 'Add Resource Type'}\n          </h3>\n          <button\n            onClick={onCancel}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Basic Properties */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Name *\n            </label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => updateField('name', e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                errors.name ? 'border-red-300' : 'border-gray-300'\n              }`}\n              placeholder=\"Enter resource type name (e.g., 'userSettings', 'errorMessages')\"\n            />\n            {errors.name && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n            )}\n            <p className=\"mt-1 text-xs text-gray-500\">\n              A descriptive name for this type of resource. This will be used to categorize and identify resources.\n            </p>\n          </div>\n\n          {/* Type Name Configuration */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Type Name Configuration *\n            </label>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"useCommonType\"\n                  name=\"typeNameMode\"\n                  checked={!useCustomTypeName}\n                  onChange={() => handleTypeNameModeChange(false)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                />\n                <label htmlFor=\"useCommonType\" className=\"ml-2 text-sm text-gray-700\">\n                  Use common type name\n                </label>\n              </div>\n\n              {!useCustomTypeName && (\n                <div className=\"ml-6\">\n                  <select\n                    value={formData.typeName}\n                    onChange={(e) => updateField('typeName', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                      errors.typeName ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                  >\n                    {COMMON_TYPE_NAMES.map((type) => (\n                      <option key={type} value={type}>\n                        {type}\n                      </option>\n                    ))}\n                  </select>\n                  <p className=\"mt-1 text-xs text-gray-600\">\n                    {getTypeNameDescription(formData.typeName)}\n                  </p>\n                </div>\n              )}\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  id=\"useCustomType\"\n                  name=\"typeNameMode\"\n                  checked={useCustomTypeName}\n                  onChange={() => handleTypeNameModeChange(true)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300\"\n                />\n                <label htmlFor=\"useCustomType\" className=\"ml-2 text-sm text-gray-700\">\n                  Define custom type name\n                </label>\n              </div>\n\n              {useCustomTypeName && (\n                <div className=\"ml-6\">\n                  <input\n                    type=\"text\"\n                    value={formData.typeName}\n                    onChange={(e) => updateField('typeName', e.target.value)}\n                    className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                      errors.typeName ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Enter custom type name\"\n                  />\n                  <p className=\"mt-1 text-xs text-gray-500\">\n                    Define a custom type name for specialized resource handling\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {errors.typeName && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.typeName}</p>\n            )}\n          </div>\n\n          {/* Information Panel */}\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-start\">\n              <InformationCircleIcon className=\"w-5 h-5 text-blue-400 mt-0.5 mr-3 flex-shrink-0\" />\n              <div className=\"text-sm text-blue-800\">\n                <h4 className=\"font-medium mb-2\">About Resource Types</h4>\n                <div className=\"space-y-2\">\n                  <p>\n                    Resource types define how resources are categorized and processed in your application.\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                    <li><strong>Name:</strong> A human-readable identifier for grouping resources</li>\n                    <li><strong>Type Name:</strong> Determines how the resource data is interpreted and validated</li>\n                    <li>Common types (string, object, array) provide built-in processing</li>\n                    <li>Custom types allow specialized handling for domain-specific data</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Preview */}\n          <div className=\"p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">Preview</h4>\n            <div className=\"text-sm text-gray-600\">\n              <p><span className=\"font-medium\">Resource Type:</span> {formData.name || '(name not set)'}</p>\n              <p><span className=\"font-medium\">Type Name:</span> {formData.typeName}</p>\n              <p><span className=\"font-medium\">Description:</span> {getTypeNameDescription(formData.typeName)}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end space-x-3 px-6 py-4 border-t bg-gray-50\">\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            {resourceType ? 'Save Changes' : 'Add Resource Type'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"]}