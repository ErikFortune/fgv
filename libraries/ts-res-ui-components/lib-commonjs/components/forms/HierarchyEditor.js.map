{"version":3,"file":"HierarchyEditor.js","sourceRoot":"","sources":["../../../src/components/forms/HierarchyEditor.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n/**\n * Props for the HierarchyEditor component.\n *\n * @public\n */\nexport interface HierarchyEditorProps {\n  /** Current hierarchy mapping of child to parent relationships */\n  hierarchy: Record<string, string>;\n  /** Callback fired when the hierarchy is modified */\n  onChange: (hierarchy: Record<string, string>) => void;\n  /** Available values for child selection (when working with enumerated qualifier types) */\n  availableValues: string[];\n  /** Optional CSS class name for styling */\n  className?: string;\n}\n\n/**\n * Interactive editor for defining hierarchical relationships between qualifier values.\n *\n * The HierarchyEditor allows users to define parent-child relationships between qualifier values,\n * enabling hierarchical resolution in the ts-res system. It provides an intuitive interface for\n * creating, viewing, and managing value hierarchies with visual tree representation.\n *\n * @example\n * ```tsx\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * // Basic hierarchy editing for region qualifiers\n * const [regionHierarchy, setRegionHierarchy] = useState({\n *   'quebec': 'canada',\n *   'ontario': 'canada',\n *   'california': 'usa',\n *   'texas': 'usa'\n * });\n *\n * <ConfigurationTools.HierarchyEditor\n *   hierarchy={regionHierarchy}\n *   onChange={setRegionHierarchy}\n *   availableValues={['quebec', 'ontario', 'california', 'texas']}\n * />\n * ```\n *\n * @example\n * ```tsx\n * // Hierarchy editing for language qualifiers with dynamic values\n * const [languageHierarchy, setLanguageHierarchy] = useState({\n *   'en-CA': 'en',\n *   'en-US': 'en',\n *   'fr-CA': 'fr',\n *   'fr-FR': 'fr'\n * });\n *\n * <ConfigurationTools.HierarchyEditor\n *   hierarchy={languageHierarchy}\n *   onChange={setLanguageHierarchy}\n *   availableValues={[]} // Allow free-form input\n *   className=\"my-hierarchy-editor\"\n * />\n * ```\n *\n * @example\n * ```tsx\n * // Integration with qualifier type configuration\n * const QualifierTypeEditor = ({ qualifierType, onSave }) => {\n *   const [hierarchy, setHierarchy] = useState(qualifierType.hierarchy || {});\n *\n *   const handleSave = () => {\n *     onSave({\n *       ...qualifierType,\n *       hierarchy: Object.keys(hierarchy).length > 0 ? hierarchy : undefined\n *     });\n *   };\n *\n *   return (\n *     <div>\n *       <ConfigurationTools.HierarchyEditor\n *         hierarchy={hierarchy}\n *         onChange={setHierarchy}\n *         availableValues={qualifierType.enumeratedValues || []}\n *       />\n *       <button onClick={handleSave}>Save Qualifier Type</button>\n *     </div>\n *   );\n * };\n * ```\n *\n * @public\n */\nexport const HierarchyEditor: React.FC<HierarchyEditorProps> = ({\n  hierarchy,\n  onChange,\n  availableValues,\n  className = ''\n}) => {\n  const [newChild, setNewChild] = useState('');\n  const [newParent, setNewParent] = useState('');\n\n  // Ensure hierarchy is a valid object with string values\n  const safeHierarchy = React.useMemo(() => {\n    if (!hierarchy || typeof hierarchy !== 'object') {\n      return {};\n    }\n    // Filter out any non-string values\n    const safe: Record<string, string> = {};\n    for (const [key, value] of Object.entries(hierarchy)) {\n      if (typeof value === 'string') {\n        safe[key] = value;\n      }\n    }\n    return safe;\n  }, [hierarchy]);\n\n  const handleAddRelationship = () => {\n    if (newChild && newParent && newChild !== newParent) {\n      const updatedHierarchy = { ...safeHierarchy, [newChild]: newParent };\n      onChange(updatedHierarchy);\n      setNewChild('');\n      setNewParent('');\n    }\n  };\n\n  const handleRemoveRelationship = (child: string) => {\n    const updatedHierarchy = { ...safeHierarchy };\n    delete updatedHierarchy[child];\n    onChange(updatedHierarchy);\n  };\n\n  const getHierarchyTree = () => {\n    const roots = new Set(availableValues);\n    const children = new Set(Object.keys(safeHierarchy));\n    const parents = new Set(Object.values(safeHierarchy));\n\n    // Remove children from roots (they have parents)\n    children.forEach((child) => roots.delete(child));\n\n    // Add parents that aren't in available values (for display purposes)\n    parents.forEach((parent) => {\n      if (!availableValues.includes(parent)) {\n        roots.add(parent);\n      }\n    });\n\n    const buildTree = (value: string, level = 0): any => {\n      const childrenOfValue = Object.entries(safeHierarchy).filter(([, parent]) => parent === value);\n      return {\n        value,\n        level,\n        children: childrenOfValue.map(([child]) => buildTree(child, level + 1))\n      };\n    };\n\n    return Array.from(roots).map((root) => buildTree(root));\n  };\n\n  const renderTree = (nodes: any[]): React.ReactNode => {\n    return nodes.map((node) => {\n      const parentValue = safeHierarchy[node.value];\n\n      return (\n        <div key={node.value} className=\"ml-4\">\n          <div className=\"flex items-center space-x-2 py-1\">\n            <span className=\"text-sm text-gray-700\" style={{ marginLeft: `${node.level * 20}px` }}>\n              {node.level > 0 && '└─ '}\n              {node.value}\n            </span>\n            {parentValue && <span className=\"text-xs text-gray-500\">→ {parentValue}</span>}\n          </div>\n          {node.children.length > 0 && renderTree(node.children)}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={className}>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Value Hierarchy</label>\n      <div className=\"border border-gray-300 rounded-md p-3 bg-white\">\n        {/* Add new relationship form */}\n        <div className=\"mb-4 p-3 bg-gray-50 rounded border\">\n          <div className=\"text-sm font-medium text-gray-700 mb-2\">Add Parent-Child Relationship</div>\n          <div className=\"grid grid-cols-3 gap-2 items-end\">\n            <div>\n              <label className=\"block text-xs text-gray-600\">Child Value</label>\n              {availableValues.length > 0 ? (\n                <select\n                  value={newChild}\n                  onChange={(e) => setNewChild(e.target.value)}\n                  className=\"w-full text-sm rounded border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                >\n                  <option value=\"\">Select child...</option>\n                  {availableValues.map((value) => (\n                    <option key={value} value={value}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              ) : (\n                <input\n                  type=\"text\"\n                  value={newChild}\n                  onChange={(e) => setNewChild(e.target.value)}\n                  placeholder=\"Enter child value\"\n                  className=\"w-full text-sm rounded border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n                />\n              )}\n            </div>\n            <div>\n              <label className=\"block text-xs text-gray-600\">Parent Value</label>\n              <input\n                type=\"text\"\n                value={newParent}\n                onChange={(e) => setNewParent(e.target.value)}\n                placeholder=\"Enter parent value\"\n                className=\"w-full text-sm rounded border-gray-300 focus:border-blue-500 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <button\n                onClick={handleAddRelationship}\n                disabled={!newChild || !newParent || newChild === newParent}\n                className=\"w-full px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                Add\n              </button>\n            </div>\n          </div>\n          <div className=\"text-xs text-gray-500 mt-1\">\n            {availableValues.length > 0\n              ? \"Define which values are children of other values. The parent doesn't need to be in the enumerated values list.\"\n              : 'Define which values are children of other values. Enter any valid values for this qualifier type.'}\n          </div>\n        </div>\n\n        {/* Current relationships */}\n        {Object.keys(safeHierarchy).length > 0 && (\n          <div className=\"mb-4\">\n            <div className=\"text-sm font-medium text-gray-700 mb-2\">\n              Current Relationships ({Object.keys(safeHierarchy).length})\n            </div>\n            <div className=\"max-h-24 overflow-y-auto border border-gray-200 rounded bg-white p-2\">\n              <div className=\"space-y-1\">\n                {Object.entries(safeHierarchy).map(([child, parent]) => (\n                  <div key={child} className=\"flex items-center justify-between bg-gray-50 px-2 py-1 rounded\">\n                    <span className=\"text-sm\">\n                      <span className=\"font-medium\">{child}</span> →{' '}\n                      <span className=\"text-gray-600\">{parent}</span>\n                    </span>\n                    <button\n                      onClick={() => handleRemoveRelationship(child)}\n                      className=\"text-red-600 hover:text-red-800 text-xs ml-2 flex-shrink-0\"\n                    >\n                      Remove\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Hierarchy visualization */}\n        {(availableValues.length > 0 || Object.keys(safeHierarchy).length > 0) && (\n          <div>\n            <div className=\"text-sm font-medium text-gray-700 mb-2\">Hierarchy Tree</div>\n            <div className=\"bg-gray-50 border rounded max-h-32 overflow-y-auto\">\n              <div className=\"p-2 text-sm font-mono\">\n                {getHierarchyTree().length > 0 ? (\n                  renderTree(getHierarchyTree())\n                ) : (\n                  <div className=\"text-gray-500 text-center py-2\">\n                    No hierarchy defined. Add relationships above to see the tree structure.\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HierarchyEditor;\n"]}