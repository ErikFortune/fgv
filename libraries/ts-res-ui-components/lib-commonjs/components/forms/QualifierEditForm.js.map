{"version":3,"file":"QualifierEditForm.js","sourceRoot":"","sources":["../../../src/components/forms/QualifierEditForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { XMarkIcon, InformationCircleIcon } from '@heroicons/react/24/outline';\nimport { Qualifiers, QualifierTypes } from '@fgv/ts-res';\nimport { Converters } from '@fgv/ts-utils';\n\n/**\n * Props for the QualifierEditForm component.\n *\n * @public\n */\nexport interface QualifierEditFormProps {\n  /** Existing qualifier to edit (undefined for creating new qualifier) */\n  qualifier?: Qualifiers.IQualifierDecl;\n  /** Available qualifier types for selection */\n  qualifierTypes: QualifierTypes.Config.IAnyQualifierTypeConfig[];\n  /** Callback fired when qualifier is saved */\n  onSave: (qualifier: Qualifiers.IQualifierDecl) => void;\n  /** Callback fired when editing is cancelled */\n  onCancel: () => void;\n  /** Names of existing qualifiers to prevent duplicates */\n  existingNames?: string[];\n}\n\ninterface FormData {\n  name: string;\n  typeName: string;\n  defaultPriority: number;\n  token: string;\n  tokenIsOptional: boolean;\n  defaultValue: string;\n}\n\n/**\n * Modal form component for creating and editing qualifiers in a ts-res system configuration.\n *\n * The QualifierEditForm provides a comprehensive interface for defining qualifiers that control\n * resource resolution behavior. It includes validation, type-specific configuration options,\n * and automatic token generation for streamlined qualifier creation.\n *\n * @example\n * ```tsx\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * // Creating a new language qualifier\n * const qualifierTypes = [\n *   { name: 'language', systemType: 'language' },\n *   { name: 'region', systemType: 'territory' }\n * ];\n *\n * const [showForm, setShowForm] = useState(false);\n * const [qualifiers, setQualifiers] = useState([]);\n *\n * const handleSave = (qualifier) => {\n *   setQualifiers(prev => [...prev, qualifier]);\n *   setShowForm(false);\n * };\n *\n * {showForm && (\n *   <ConfigurationTools.QualifierEditForm\n *     qualifierTypes={qualifierTypes}\n *     onSave={handleSave}\n *     onCancel={() => setShowForm(false)}\n *     existingNames={qualifiers.map(q => q.name)}\n *   />\n * )}\n * ```\n *\n * @example\n * ```tsx\n * // Editing an existing qualifier with validation\n * const existingQualifier = {\n *   name: 'language',\n *   typeName: 'language',\n *   defaultPriority: 100,\n *   token: 'lang',\n *   tokenIsOptional: false,\n *   defaultValue: 'en-US'\n * };\n *\n * <ConfigurationTools.QualifierEditForm\n *   qualifier={existingQualifier}\n *   qualifierTypes={availableTypes}\n *   onSave={updateQualifier}\n *   onCancel={closeEditor}\n *   existingNames={otherQualifierNames}\n * />\n * ```\n *\n * @example\n * ```tsx\n * // Advanced qualifier configuration with enum values\n * const platformType = {\n *   name: 'platform',\n *   systemType: 'literal',\n *   configuration: {\n *     caseSensitive: false,\n *     enumeratedValues: ['web', 'mobile', 'desktop'],\n *     allowContextList: true\n *   }\n * };\n *\n * const platformQualifier = {\n *   name: 'platform',\n *   typeName: 'platform',\n *   defaultPriority: 80,\n *   token: 'plat',\n *   defaultValue: 'web,mobile' // Multiple values supported\n * };\n *\n * <ConfigurationTools.QualifierEditForm\n *   qualifier={platformQualifier}\n *   qualifierTypes={[platformType]}\n *   onSave={handlePlatformSave}\n *   onCancel={cancelEdit}\n * />\n * ```\n *\n * @public\n */\nexport const QualifierEditForm: React.FC<QualifierEditFormProps> = ({\n  qualifier,\n  qualifierTypes,\n  onSave,\n  onCancel,\n  existingNames = []\n}) => {\n  const [formData, setFormData] = useState<FormData>(() => {\n    if (qualifier) {\n      return {\n        name: qualifier.name,\n        typeName: qualifier.typeName,\n        defaultPriority: qualifier.defaultPriority,\n        token: qualifier.token || '',\n        tokenIsOptional: qualifier.tokenIsOptional || false,\n        defaultValue: qualifier.defaultValue || ''\n      };\n    }\n    return {\n      name: '',\n      typeName: qualifierTypes[0]?.name || '',\n      defaultPriority: 50,\n      token: '',\n      tokenIsOptional: false,\n      defaultValue: ''\n    };\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Get the selected qualifier type for context\n  const selectedQualifierType = qualifierTypes.find((qt) => qt.name === formData.typeName);\n\n  // Type-safe extraction of allowContextList property\n  const allowsContextList = (() => {\n    if (!selectedQualifierType?.configuration) return false;\n    const result = Converters.boolean.convert(\n      (selectedQualifierType.configuration as Record<string, unknown>).allowContextList\n    );\n    return result.isSuccess() ? result.value : false;\n  })();\n\n  // Validation\n  const validateForm = useCallback((): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (existingNames.includes(formData.name) && formData.name !== qualifier?.name) {\n      newErrors.name = 'Name must be unique';\n    }\n\n    if (!formData.typeName) {\n      newErrors.typeName = 'Qualifier type is required';\n    }\n\n    if (formData.defaultPriority < 0 || formData.defaultPriority > 1000) {\n      newErrors.defaultPriority = 'Priority must be between 0 and 1000';\n    }\n\n    if (formData.token && !/^[a-zA-Z][a-zA-Z0-9_]*$/.test(formData.token)) {\n      newErrors.token = 'Token must start with a letter and contain only letters, numbers, and underscores';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData, existingNames, qualifier?.name]);\n\n  const handleSave = useCallback(() => {\n    if (!validateForm()) return;\n\n    const result: Qualifiers.IQualifierDecl = {\n      name: formData.name,\n      typeName: formData.typeName,\n      defaultPriority: formData.defaultPriority,\n      ...(formData.token && { token: formData.token }),\n      ...(formData.token && formData.tokenIsOptional && { tokenIsOptional: true }),\n      ...(formData.defaultValue && { defaultValue: formData.defaultValue })\n    };\n\n    onSave(result);\n  }, [formData, validateForm, onSave]);\n\n  const updateField = useCallback(\n    (field: keyof FormData, value: FormData[keyof FormData]) => {\n      setFormData((prev) => {\n        const updated = { ...prev, [field]: value };\n\n        // Auto-generate token from name if no custom token is set\n        if (field === 'name' && !prev.token) {\n          updated.token = String(value)\n            .toLowerCase()\n            .replace(/[^a-zA-Z0-9]/g, '');\n        }\n\n        // Clear tokenIsOptional if token is cleared\n        if (field === 'token' && !value) {\n          updated.tokenIsOptional = false;\n        }\n\n        return updated;\n      });\n\n      if (errors[field]) {\n        setErrors((prev) => ({ ...prev, [field]: '' }));\n      }\n    },\n    [errors]\n  );\n\n  const getDefaultValuePlaceholder = (): string => {\n    if (!selectedQualifierType) return 'Enter default value';\n\n    switch (selectedQualifierType.systemType) {\n      case 'language':\n        return allowsContextList ? 'e.g., en-US or en-US,en' : 'e.g., en-US';\n      case 'territory':\n        return allowsContextList ? 'e.g., US or US,CA' : 'e.g., US';\n      case 'literal':\n        // Type-safe extraction of enumeratedValues\n        const enumValues = (() => {\n          if (!selectedQualifierType.configuration) return undefined;\n          const result = Converters.arrayOf(Converters.string).convert(\n            (selectedQualifierType.configuration as Record<string, unknown>).enumeratedValues\n          );\n          return result.isSuccess() ? result.value : undefined;\n        })();\n        if (enumValues && enumValues.length > 0) {\n          return allowsContextList\n            ? `e.g., ${enumValues[0]} or ${enumValues.slice(0, 2).join(',')}`\n            : `e.g., ${enumValues[0]}`;\n        }\n        return allowsContextList ? 'e.g., value or value1,value2' : 'e.g., value';\n      default:\n        return 'Enter default value';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full h-full max-h-[calc(100vh-2rem)] flex flex-col\">\n        {/* Fixed Header */}\n        <div className=\"flex items-center justify-between p-6 border-b flex-shrink-0\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            {qualifier ? 'Edit Qualifier' : 'Add Qualifier'}\n          </h3>\n          <button onClick={onCancel} className=\"text-gray-400 hover:text-gray-600\">\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Scrollable Content */}\n        <div className=\"p-6 space-y-6 overflow-y-auto flex-1 min-h-0\">\n          {/* Basic Properties */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Name *</label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => updateField('name', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.name ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter qualifier name\"\n              />\n              {errors.name && <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Qualifier Type *</label>\n              <select\n                value={formData.typeName}\n                onChange={(e) => updateField('typeName', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.typeName ? 'border-red-300' : 'border-gray-300'\n                }`}\n              >\n                {qualifierTypes.length === 0 ? (\n                  <option value=\"\">No qualifier types available</option>\n                ) : (\n                  qualifierTypes.map((type) => (\n                    <option key={type.name} value={type.name}>\n                      {type.name} ({type.systemType})\n                    </option>\n                  ))\n                )}\n              </select>\n              {errors.typeName && <p className=\"mt-1 text-sm text-red-600\">{errors.typeName}</p>}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Default Priority *</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"1000\"\n                value={formData.defaultPriority}\n                onChange={(e) => updateField('defaultPriority', parseInt(e.target.value) || 0)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.defaultPriority ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"50\"\n              />\n              {errors.defaultPriority && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.defaultPriority}</p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">Higher numbers have higher priority (0-1000)</p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Token\n                <span className=\"ml-1 text-gray-500\">(optional)</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.token}\n                onChange={(e) => updateField('token', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.token ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"e.g., lang, locale\"\n              />\n              {errors.token && <p className=\"mt-1 text-sm text-red-600\">{errors.token}</p>}\n              <p className=\"mt-1 text-xs text-gray-500\">Used to identify this qualifier in resource names</p>\n            </div>\n          </div>\n\n          {/* Token Options */}\n          {formData.token && (\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"tokenIsOptional\"\n                checked={formData.tokenIsOptional}\n                onChange={(e) => updateField('tokenIsOptional', e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"tokenIsOptional\" className=\"ml-2 text-sm text-gray-700\">\n                Token is optional in resource names\n              </label>\n              <div className=\"ml-2 group relative\">\n                <InformationCircleIcon className=\"w-4 h-4 text-gray-400\" />\n                <div className=\"absolute left-0 bottom-6 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap z-10\">\n                  Allow resources without this qualifier token\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Default Value */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Default Value\n              <span className=\"ml-1 text-gray-500\">(optional)</span>\n            </label>\n            <input\n              type=\"text\"\n              value={formData.defaultValue}\n              onChange={(e) => updateField('defaultValue', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              placeholder={getDefaultValuePlaceholder()}\n            />\n            <div className=\"mt-1 text-xs text-gray-500\">\n              {selectedQualifierType && (\n                <div>\n                  <p>\n                    Qualifier type: <span className=\"font-medium\">{selectedQualifierType.systemType}</span>\n                  </p>\n                  {allowsContextList && (\n                    <p className=\"text-blue-600\">\n                      This qualifier type supports multiple values (comma-separated)\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Qualifier Type Information */}\n          {selectedQualifierType && (\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Qualifier Type Information</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p>\n                  <span className=\"font-medium\">System Type:</span> {selectedQualifierType.systemType}\n                </p>\n                <p>\n                  <span className=\"font-medium\">Supports Context List:</span>{' '}\n                  {allowsContextList ? 'Yes' : 'No'}\n                </p>\n                {selectedQualifierType.systemType === 'literal' && selectedQualifierType.configuration && (\n                  <React.Fragment>\n                    {(selectedQualifierType.configuration as Record<string, unknown>).caseSensitive !==\n                      undefined && (\n                      <p>\n                        <span className=\"font-medium\">Case Sensitive:</span>{' '}\n                        {((selectedQualifierType.configuration as Record<string, unknown>)\n                          .caseSensitive as boolean)\n                          ? 'Yes'\n                          : 'No'}\n                      </p>\n                    )}\n                    {((selectedQualifierType.configuration as Record<string, unknown>).enumeratedValues as\n                      | string[]\n                      | undefined) && (\n                      <p>\n                        <span className=\"font-medium\">Allowed Values:</span>{' '}\n                        {(\n                          (selectedQualifierType.configuration as Record<string, unknown>)\n                            .enumeratedValues as string[]\n                        ).join(', ')}\n                      </p>\n                    )}\n                  </React.Fragment>\n                )}\n                {selectedQualifierType.systemType === 'territory' && selectedQualifierType.configuration && (\n                  <React.Fragment>\n                    {(selectedQualifierType.configuration as Record<string, unknown>).acceptLowercase !==\n                      undefined && (\n                      <p>\n                        <span className=\"font-medium\">Accept Lowercase:</span>{' '}\n                        {((selectedQualifierType.configuration as Record<string, unknown>)\n                          .acceptLowercase as boolean)\n                          ? 'Yes'\n                          : 'No'}\n                      </p>\n                    )}\n                    {((selectedQualifierType.configuration as Record<string, unknown>).allowedTerritories as\n                      | string[]\n                      | undefined) && (\n                      <p>\n                        <span className=\"font-medium\">Allowed Territories:</span>{' '}\n                        {(\n                          (selectedQualifierType.configuration as Record<string, unknown>)\n                            .allowedTerritories as string[]\n                        ).join(', ')}\n                      </p>\n                    )}\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Fixed Footer */}\n        <div className=\"flex justify-end space-x-3 px-6 py-4 border-t bg-gray-50 flex-shrink-0\">\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            {qualifier ? 'Save Changes' : 'Add Qualifier'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n"]}