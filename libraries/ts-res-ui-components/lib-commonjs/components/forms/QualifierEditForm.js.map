{"version":3,"file":"QualifierEditForm.js","sourceRoot":"","sources":["../../../src/components/forms/QualifierEditForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport {\n  XMarkIcon,\n  InformationCircleIcon\n} from '@heroicons/react/24/outline';\nimport { Qualifiers, QualifierTypes } from '@fgv/ts-res';\n\nexport interface QualifierEditFormProps {\n  qualifier?: Qualifiers.IQualifierDecl;\n  qualifierTypes: QualifierTypes.Config.ISystemQualifierTypeConfig[];\n  onSave: (qualifier: Qualifiers.IQualifierDecl) => void;\n  onCancel: () => void;\n  existingNames?: string[];\n}\n\ninterface FormData {\n  name: string;\n  typeName: string;\n  defaultPriority: number;\n  token: string;\n  tokenIsOptional: boolean;\n  defaultValue: string;\n}\n\nexport const QualifierEditForm: React.FC<QualifierEditFormProps> = ({\n  qualifier,\n  qualifierTypes,\n  onSave,\n  onCancel,\n  existingNames = []\n}) => {\n  const [formData, setFormData] = useState<FormData>(() => {\n    if (qualifier) {\n      return {\n        name: qualifier.name,\n        typeName: qualifier.typeName,\n        defaultPriority: qualifier.defaultPriority,\n        token: qualifier.token || '',\n        tokenIsOptional: qualifier.tokenIsOptional || false,\n        defaultValue: qualifier.defaultValue || ''\n      };\n    }\n    return {\n      name: '',\n      typeName: qualifierTypes[0]?.name || '',\n      defaultPriority: 50,\n      token: '',\n      tokenIsOptional: false,\n      defaultValue: ''\n    };\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Get the selected qualifier type for context\n  const selectedQualifierType = qualifierTypes.find(qt => qt.name === formData.typeName);\n  const allowsContextList = selectedQualifierType?.configuration && \n    (selectedQualifierType.configuration as any).allowContextList;\n\n  // Validation\n  const validateForm = useCallback((): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (existingNames.includes(formData.name) && formData.name !== qualifier?.name) {\n      newErrors.name = 'Name must be unique';\n    }\n\n    if (!formData.typeName) {\n      newErrors.typeName = 'Qualifier type is required';\n    }\n\n    if (formData.defaultPriority < 0 || formData.defaultPriority > 1000) {\n      newErrors.defaultPriority = 'Priority must be between 0 and 1000';\n    }\n\n    if (formData.token && !/^[a-zA-Z][a-zA-Z0-9_]*$/.test(formData.token)) {\n      newErrors.token = 'Token must start with a letter and contain only letters, numbers, and underscores';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData, existingNames, qualifier?.name]);\n\n  const handleSave = useCallback(() => {\n    if (!validateForm()) return;\n\n    const result: Qualifiers.IQualifierDecl = {\n      name: formData.name,\n      typeName: formData.typeName,\n      defaultPriority: formData.defaultPriority,\n      ...(formData.token && { token: formData.token }),\n      ...(formData.token && formData.tokenIsOptional && { tokenIsOptional: true }),\n      ...(formData.defaultValue && { defaultValue: formData.defaultValue })\n    };\n\n    onSave(result);\n  }, [formData, validateForm, onSave]);\n\n  const updateField = useCallback((field: keyof FormData, value: any) => {\n    setFormData(prev => {\n      const updated = { ...prev, [field]: value };\n      \n      // Auto-generate token from name if no custom token is set\n      if (field === 'name' && !prev.token) {\n        updated.token = value.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');\n      }\n      \n      // Clear tokenIsOptional if token is cleared\n      if (field === 'token' && !value) {\n        updated.tokenIsOptional = false;\n      }\n      \n      return updated;\n    });\n    \n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  }, [errors]);\n\n  const getDefaultValuePlaceholder = (): string => {\n    if (!selectedQualifierType) return 'Enter default value';\n    \n    switch (selectedQualifierType.systemType) {\n      case 'language':\n        return allowsContextList ? 'e.g., en-US or en-US,en' : 'e.g., en-US';\n      case 'territory':\n        return allowsContextList ? 'e.g., US or US,CA' : 'e.g., US';\n      case 'literal':\n        const enumValues = (selectedQualifierType.configuration as any)?.enumeratedValues;\n        if (enumValues && enumValues.length > 0) {\n          return allowsContextList ? \n            `e.g., ${enumValues[0]} or ${enumValues.slice(0, 2).join(',')}` :\n            `e.g., ${enumValues[0]}`;\n        }\n        return allowsContextList ? 'e.g., value or value1,value2' : 'e.g., value';\n      default:\n        return 'Enter default value';\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            {qualifier ? 'Edit Qualifier' : 'Add Qualifier'}\n          </h3>\n          <button\n            onClick={onCancel}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Basic Properties */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Name *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => updateField('name', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.name ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter qualifier name\"\n              />\n              {errors.name && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Qualifier Type *\n              </label>\n              <select\n                value={formData.typeName}\n                onChange={(e) => updateField('typeName', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.typeName ? 'border-red-300' : 'border-gray-300'\n                }`}\n              >\n                {qualifierTypes.length === 0 ? (\n                  <option value=\"\">No qualifier types available</option>\n                ) : (\n                  qualifierTypes.map((type) => (\n                    <option key={type.name} value={type.name}>\n                      {type.name} ({type.systemType})\n                    </option>\n                  ))\n                )}\n              </select>\n              {errors.typeName && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.typeName}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Default Priority *\n              </label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"1000\"\n                value={formData.defaultPriority}\n                onChange={(e) => updateField('defaultPriority', parseInt(e.target.value) || 0)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.defaultPriority ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"50\"\n              />\n              {errors.defaultPriority && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.defaultPriority}</p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Higher numbers have higher priority (0-1000)\n              </p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Token\n                <span className=\"ml-1 text-gray-500\">(optional)</span>\n              </label>\n              <input\n                type=\"text\"\n                value={formData.token}\n                onChange={(e) => updateField('token', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.token ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"e.g., lang, locale\"\n              />\n              {errors.token && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.token}</p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Used to identify this qualifier in resource names\n              </p>\n            </div>\n          </div>\n\n          {/* Token Options */}\n          {formData.token && (\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"tokenIsOptional\"\n                checked={formData.tokenIsOptional}\n                onChange={(e) => updateField('tokenIsOptional', e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"tokenIsOptional\" className=\"ml-2 text-sm text-gray-700\">\n                Token is optional in resource names\n              </label>\n              <div className=\"ml-2 group relative\">\n                <InformationCircleIcon className=\"w-4 h-4 text-gray-400\" />\n                <div className=\"absolute left-0 bottom-6 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap z-10\">\n                  Allow resources without this qualifier token\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Default Value */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Default Value\n              <span className=\"ml-1 text-gray-500\">(optional)</span>\n            </label>\n            <input\n              type=\"text\"\n              value={formData.defaultValue}\n              onChange={(e) => updateField('defaultValue', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              placeholder={getDefaultValuePlaceholder()}\n            />\n            <div className=\"mt-1 text-xs text-gray-500\">\n              {selectedQualifierType && (\n                <div>\n                  <p>Qualifier type: <span className=\"font-medium\">{selectedQualifierType.systemType}</span></p>\n                  {allowsContextList && (\n                    <p className=\"text-blue-600\">This qualifier type supports multiple values (comma-separated)</p>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Qualifier Type Information */}\n          {selectedQualifierType && (\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Qualifier Type Information</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p><span className=\"font-medium\">System Type:</span> {selectedQualifierType.systemType}</p>\n                <p><span className=\"font-medium\">Supports Context List:</span> {allowsContextList ? 'Yes' : 'No'}</p>\n                {selectedQualifierType.systemType === 'literal' && selectedQualifierType.configuration && (\n                  <>\n                    {(selectedQualifierType.configuration as any).caseSensitive !== undefined && (\n                      <p><span className=\"font-medium\">Case Sensitive:</span> {(selectedQualifierType.configuration as any).caseSensitive ? 'Yes' : 'No'}</p>\n                    )}\n                    {(selectedQualifierType.configuration as any).enumeratedValues && (\n                      <p><span className=\"font-medium\">Allowed Values:</span> {(selectedQualifierType.configuration as any).enumeratedValues.join(', ')}</p>\n                    )}\n                  </>\n                )}\n                {selectedQualifierType.systemType === 'territory' && selectedQualifierType.configuration && (\n                  <>\n                    {(selectedQualifierType.configuration as any).acceptLowercase !== undefined && (\n                      <p><span className=\"font-medium\">Accept Lowercase:</span> {(selectedQualifierType.configuration as any).acceptLowercase ? 'Yes' : 'No'}</p>\n                    )}\n                    {(selectedQualifierType.configuration as any).allowedTerritories && (\n                      <p><span className=\"font-medium\">Allowed Territories:</span> {(selectedQualifierType.configuration as any).allowedTerritories.join(', ')}</p>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end space-x-3 px-6 py-4 border-t bg-gray-50\">\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            {qualifier ? 'Save Changes' : 'Add Qualifier'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"]}