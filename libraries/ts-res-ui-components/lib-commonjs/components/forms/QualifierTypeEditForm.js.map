{"version":3,"file":"QualifierTypeEditForm.js","sourceRoot":"","sources":["../../../src/components/forms/QualifierTypeEditForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { XMarkIcon, InformationCircleIcon } from '@heroicons/react/24/outline';\nimport { QualifierTypes } from '@fgv/ts-res';\nimport { HierarchyEditor } from './HierarchyEditor';\n\n/**\n * Props for the QualifierTypeEditForm component.\n *\n * @public\n */\nexport interface QualifierTypeEditFormProps {\n  /** Existing qualifier type to edit (undefined for creating new type) */\n  qualifierType?: QualifierTypes.Config.ISystemQualifierTypeConfig;\n  /** Callback fired when qualifier type is saved */\n  onSave: (qualifierType: QualifierTypes.Config.ISystemQualifierTypeConfig) => void;\n  /** Callback fired when editing is cancelled */\n  onCancel: () => void;\n  /** Names of existing qualifier types to prevent duplicates */\n  existingNames?: string[];\n}\n\ninterface FormData {\n  name: string;\n  systemType: 'language' | 'territory' | 'literal';\n  allowContextList: boolean;\n  // Literal type specific\n  caseSensitive: boolean;\n  enumeratedValues: string[];\n  // Territory type specific\n  acceptLowercase: boolean;\n  allowedTerritories: string[];\n  // Hierarchy support (for literal and territory types)\n  hierarchy: Record<string, string>;\n}\n\n/**\n * Modal form component for creating and editing qualifier types in a ts-res system configuration.\n *\n * The QualifierTypeEditForm provides a comprehensive interface for defining qualifier types that\n * control the behavior and validation of qualifiers. It supports all three system types (language,\n * territory, literal) with type-specific configuration options, enumerated values, and hierarchical\n * relationships between values.\n *\n * @example\n * ```tsx\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * // Creating a new literal qualifier type with enumerated values\n * const [showForm, setShowForm] = useState(false);\n * const [qualifierTypes, setQualifierTypes] = useState([]);\n *\n * const handleSave = (qualifierType) => {\n *   setQualifierTypes(prev => [...prev, qualifierType]);\n *   setShowForm(false);\n * };\n *\n * {showForm && (\n *   <ConfigurationTools.QualifierTypeEditForm\n *     onSave={handleSave}\n *     onCancel={() => setShowForm(false)}\n *     existingNames={qualifierTypes.map(qt => qt.name)}\n *   />\n * )}\n * ```\n *\n * @example\n * ```tsx\n * // Editing a platform qualifier type with hierarchy\n * const platformType = {\n *   name: 'platform',\n *   systemType: 'literal',\n *   configuration: {\n *     allowContextList: true,\n *     caseSensitive: false,\n *     enumeratedValues: ['web', 'mobile', 'desktop', 'smart-tv'],\n *     hierarchy: {\n *       'smart-tv': 'web',  // smart-tv inherits from web\n *       'tablet': 'mobile'  // tablet inherits from mobile\n *     }\n *   }\n * };\n *\n * <ConfigurationTools.QualifierTypeEditForm\n *   qualifierType={platformType}\n *   onSave={updatePlatformType}\n *   onCancel={closeEditor}\n *   existingNames={otherTypeNames}\n * />\n * ```\n *\n * @example\n * ```tsx\n * // Territory qualifier type with restricted territories\n * const regionType = {\n *   name: 'region',\n *   systemType: 'territory',\n *   configuration: {\n *     allowContextList: false,\n *     acceptLowercase: true,\n *     allowedTerritories: ['US', 'CA', 'GB', 'AU'],\n *     hierarchy: {\n *       'US': 'AMERICAS',\n *       'CA': 'AMERICAS',\n *       'GB': 'EUROPE',\n *       'AU': 'APAC'\n *     }\n *   }\n * };\n *\n * <ConfigurationTools.QualifierTypeEditForm\n *   qualifierType={regionType}\n *   onSave={saveRegionType}\n *   onCancel={cancelEdit}\n * />\n * ```\n *\n * @example\n * ```tsx\n * // Simple language qualifier type\n * const languageType = {\n *   name: 'locale',\n *   systemType: 'language',\n *   configuration: {\n *     allowContextList: true // Allow multiple languages like 'en-US,en'\n *   }\n * };\n *\n * <ConfigurationTools.QualifierTypeEditForm\n *   qualifierType={languageType}\n *   onSave={handleLanguageTypeSave}\n *   onCancel={handleCancel}\n *   existingNames={existingTypeNames}\n * />\n * ```\n *\n * @public\n */\nexport const QualifierTypeEditForm: React.FC<QualifierTypeEditFormProps> = ({\n  qualifierType,\n  onSave,\n  onCancel,\n  existingNames = []\n}) => {\n  const [formData, setFormData] = useState<FormData>(() => {\n    if (qualifierType) {\n      const config = qualifierType.configuration || {};\n      // Ensure hierarchy is a plain object with string values\n      let hierarchy: Record<string, string> = {};\n      const rawHierarchy = (config as Record<string, unknown>)?.hierarchy;\n      if (rawHierarchy && typeof rawHierarchy === 'object' && !Array.isArray(rawHierarchy)) {\n        for (const [key, value] of Object.entries(rawHierarchy)) {\n          if (typeof value === 'string') {\n            hierarchy[key] = value;\n          }\n        }\n      }\n\n      return {\n        name: qualifierType.name,\n        systemType: qualifierType.systemType as 'language' | 'territory' | 'literal',\n        allowContextList: ((config as Record<string, unknown>)?.allowContextList as boolean) ?? false,\n        caseSensitive: ((config as Record<string, unknown>)?.caseSensitive as boolean) ?? true,\n        enumeratedValues: ((config as Record<string, unknown>)?.enumeratedValues as string[]) || [],\n        acceptLowercase: ((config as Record<string, unknown>)?.acceptLowercase as boolean) ?? false,\n        allowedTerritories: ((config as Record<string, unknown>)?.allowedTerritories as string[]) || [],\n        hierarchy: hierarchy\n      };\n    }\n    return {\n      name: '',\n      systemType: 'literal',\n      allowContextList: false,\n      caseSensitive: true,\n      enumeratedValues: [],\n      acceptLowercase: false,\n      allowedTerritories: [],\n      hierarchy: {}\n    };\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [enumeratedValuesText, setEnumeratedValuesText] = useState(formData.enumeratedValues.join(', '));\n  const [allowedTerritoriesText, setAllowedTerritoriesText] = useState(\n    formData.allowedTerritories.join(', ')\n  );\n\n  // Validation\n  const validateForm = useCallback((): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (existingNames.includes(formData.name) && formData.name !== qualifierType?.name) {\n      newErrors.name = 'Name must be unique';\n    }\n\n    if (formData.systemType === 'literal' && formData.enumeratedValues.length === 0) {\n      newErrors.enumeratedValues = 'Literal types should have enumerated values';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData, existingNames, qualifierType?.name]);\n\n  // Update enumerated values when text changes\n  useEffect(() => {\n    const values = enumeratedValuesText\n      .split(',')\n      .map((v) => v.trim())\n      .filter((v) => v.length > 0);\n    setFormData((prev) => ({ ...prev, enumeratedValues: values }));\n  }, [enumeratedValuesText]);\n\n  // Update allowed territories when text changes\n  useEffect(() => {\n    const territories = allowedTerritoriesText\n      .split(',')\n      .map((v) => v.trim().toUpperCase())\n      .filter((v) => v.length > 0);\n    setFormData((prev) => ({ ...prev, allowedTerritories: territories }));\n  }, [allowedTerritoriesText]);\n\n  const handleSave = useCallback(() => {\n    if (!validateForm()) return;\n\n    let configuration: Record<string, unknown> = {\n      allowContextList: formData.allowContextList\n    };\n\n    switch (formData.systemType) {\n      case 'literal':\n        configuration = {\n          ...configuration,\n          caseSensitive: formData.caseSensitive,\n          enumeratedValues: formData.enumeratedValues.length > 0 ? formData.enumeratedValues : undefined\n        };\n        // Add hierarchy if it has entries\n        if (Object.keys(formData.hierarchy).length > 0) {\n          configuration.hierarchy = formData.hierarchy;\n        }\n        break;\n      case 'territory':\n        configuration = {\n          ...configuration,\n          acceptLowercase: formData.acceptLowercase,\n          allowedTerritories: formData.allowedTerritories.length > 0 ? formData.allowedTerritories : undefined\n        };\n        // Add hierarchy if it has entries\n        if (Object.keys(formData.hierarchy).length > 0) {\n          configuration.hierarchy = formData.hierarchy;\n        }\n        break;\n      case 'language':\n        // Language types only have allowContextList\n        break;\n    }\n\n    const result: QualifierTypes.Config.ISystemQualifierTypeConfig = {\n      name: formData.name,\n      systemType: formData.systemType,\n      configuration: Object.keys(configuration).length > 1 ? configuration : undefined\n    };\n\n    onSave(result);\n  }, [formData, validateForm, onSave]);\n\n  const updateField = useCallback(\n    (field: keyof FormData, value: FormData[keyof FormData]) => {\n      setFormData((prev) => ({ ...prev, [field]: value }));\n      if (errors[field]) {\n        setErrors((prev) => ({ ...prev, [field]: '' }));\n      }\n    },\n    [errors]\n  );\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full h-full max-h-[calc(100vh-2rem)] flex flex-col\">\n        {/* Fixed Header */}\n        <div className=\"flex items-center justify-between p-6 border-b flex-shrink-0\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            {qualifierType ? 'Edit Qualifier Type' : 'Add Qualifier Type'}\n          </h3>\n          <button onClick={onCancel} className=\"text-gray-400 hover:text-gray-600\">\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Scrollable Content */}\n        <div className=\"p-6 space-y-6 overflow-y-auto flex-1 min-h-0\">\n          {/* Basic Properties */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Name *</label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => updateField('name', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.name ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter qualifier type name\"\n              />\n              {errors.name && <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">System Type *</label>\n              <select\n                value={formData.systemType}\n                onChange={(e) =>\n                  updateField('systemType', e.target.value as 'language' | 'territory' | 'literal')\n                }\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              >\n                <option value=\"literal\">Literal</option>\n                <option value=\"language\">Language</option>\n                <option value=\"territory\">Territory</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Allow Context List */}\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"allowContextList\"\n              checked={formData.allowContextList}\n              onChange={(e) => updateField('allowContextList', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label htmlFor=\"allowContextList\" className=\"ml-2 text-sm text-gray-700\">\n              Allow Context List\n            </label>\n            <div className=\"ml-2 group relative\">\n              <InformationCircleIcon className=\"w-4 h-4 text-gray-400\" />\n              <div className=\"absolute left-0 bottom-6 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap\">\n                Allow multiple values separated by commas\n              </div>\n            </div>\n          </div>\n\n          {/* Literal Type Specific */}\n          {formData.systemType === 'literal' && (\n            <div className=\"space-y-4 p-4 bg-blue-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900\">Literal Type Configuration</h4>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"caseSensitive\"\n                  checked={formData.caseSensitive}\n                  onChange={(e) => updateField('caseSensitive', e.target.checked)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"caseSensitive\" className=\"ml-2 text-sm text-gray-700\">\n                  Case Sensitive\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Enumerated Values</label>\n                <textarea\n                  value={enumeratedValuesText}\n                  onChange={(e) => setEnumeratedValuesText(e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                    errors.enumeratedValues ? 'border-red-300' : 'border-gray-300'\n                  }`}\n                  rows={3}\n                  placeholder=\"Enter values separated by commas (e.g., dev, test, prod)\"\n                />\n                {errors.enumeratedValues && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.enumeratedValues}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">Separate multiple values with commas</p>\n              </div>\n            </div>\n          )}\n\n          {/* Territory Type Specific */}\n          {formData.systemType === 'territory' && (\n            <div className=\"space-y-4 p-4 bg-green-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900\">Territory Type Configuration</h4>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"acceptLowercase\"\n                  checked={formData.acceptLowercase}\n                  onChange={(e) => updateField('acceptLowercase', e.target.checked)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"acceptLowercase\" className=\"ml-2 text-sm text-gray-700\">\n                  Accept Lowercase Territory Codes\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Allowed Territories</label>\n                <textarea\n                  value={allowedTerritoriesText}\n                  onChange={(e) => setAllowedTerritoriesText(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                  rows={3}\n                  placeholder=\"Enter territory codes separated by commas (e.g., US, CA, GB)\"\n                />\n                <p className=\"mt-1 text-xs text-gray-500\">\n                  Separate multiple territory codes with commas. Will be automatically converted to uppercase.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Hierarchy Editor for Literal and Territory Types */}\n          {(formData.systemType === 'literal' || formData.systemType === 'territory') && (\n            <div className=\"space-y-4\">\n              <HierarchyEditor\n                hierarchy={formData.hierarchy}\n                onChange={(hierarchy) => updateField('hierarchy', hierarchy)}\n                availableValues={\n                  formData.systemType === 'literal' ? formData.enumeratedValues : formData.allowedTerritories\n                }\n              />\n            </div>\n          )}\n\n          {/* Language Type Specific */}\n          {formData.systemType === 'language' && (\n            <div className=\"p-4 bg-yellow-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900\">Language Type Configuration</h4>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                Language qualifier types use BCP47 language tags and only support the \"Allow Context List\"\n                option above.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Fixed Footer */}\n        <div className=\"flex justify-end space-x-3 px-6 py-4 border-t bg-gray-50 flex-shrink-0\">\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            {qualifierType ? 'Save Changes' : 'Add Qualifier Type'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n"]}