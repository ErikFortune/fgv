{"version":3,"file":"QualifierTypeEditForm.js","sourceRoot":"","sources":["../../../src/components/forms/QualifierTypeEditForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport {\n  XMarkIcon,\n  InformationCircleIcon\n} from '@heroicons/react/24/outline';\nimport { QualifierTypes } from '@fgv/ts-res';\n\nexport interface QualifierTypeEditFormProps {\n  qualifierType?: QualifierTypes.Config.ISystemQualifierTypeConfig;\n  onSave: (qualifierType: QualifierTypes.Config.ISystemQualifierTypeConfig) => void;\n  onCancel: () => void;\n  existingNames?: string[];\n}\n\ninterface FormData {\n  name: string;\n  systemType: 'language' | 'territory' | 'literal';\n  allowContextList: boolean;\n  // Literal type specific\n  caseSensitive: boolean;\n  enumeratedValues: string[];\n  // Territory type specific\n  acceptLowercase: boolean;\n  allowedTerritories: string[];\n}\n\nexport const QualifierTypeEditForm: React.FC<QualifierTypeEditFormProps> = ({\n  qualifierType,\n  onSave,\n  onCancel,\n  existingNames = []\n}) => {\n  const [formData, setFormData] = useState<FormData>(() => {\n    if (qualifierType) {\n      const config = qualifierType.configuration || {};\n      return {\n        name: qualifierType.name,\n        systemType: qualifierType.systemType as 'language' | 'territory' | 'literal',\n        allowContextList: (config as any)?.allowContextList ?? false,\n        caseSensitive: (config as any)?.caseSensitive ?? true,\n        enumeratedValues: (config as any)?.enumeratedValues || [],\n        acceptLowercase: (config as any)?.acceptLowercase ?? false,\n        allowedTerritories: (config as any)?.allowedTerritories || []\n      };\n    }\n    return {\n      name: '',\n      systemType: 'literal',\n      allowContextList: false,\n      caseSensitive: true,\n      enumeratedValues: [],\n      acceptLowercase: false,\n      allowedTerritories: []\n    };\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [enumeratedValuesText, setEnumeratedValuesText] = useState(\n    formData.enumeratedValues.join(', ')\n  );\n  const [allowedTerritoriesText, setAllowedTerritoriesText] = useState(\n    formData.allowedTerritories.join(', ')\n  );\n\n  // Validation\n  const validateForm = useCallback((): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (existingNames.includes(formData.name) && formData.name !== qualifierType?.name) {\n      newErrors.name = 'Name must be unique';\n    }\n\n    if (formData.systemType === 'literal' && formData.enumeratedValues.length === 0) {\n      newErrors.enumeratedValues = 'Literal types should have enumerated values';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData, existingNames, qualifierType?.name]);\n\n  // Update enumerated values when text changes\n  useEffect(() => {\n    const values = enumeratedValuesText\n      .split(',')\n      .map(v => v.trim())\n      .filter(v => v.length > 0);\n    setFormData(prev => ({ ...prev, enumeratedValues: values }));\n  }, [enumeratedValuesText]);\n\n  // Update allowed territories when text changes\n  useEffect(() => {\n    const territories = allowedTerritoriesText\n      .split(',')\n      .map(v => v.trim().toUpperCase())\n      .filter(v => v.length > 0);\n    setFormData(prev => ({ ...prev, allowedTerritories: territories }));\n  }, [allowedTerritoriesText]);\n\n  const handleSave = useCallback(() => {\n    if (!validateForm()) return;\n\n    let configuration: any = {\n      allowContextList: formData.allowContextList\n    };\n\n    switch (formData.systemType) {\n      case 'literal':\n        configuration = {\n          ...configuration,\n          caseSensitive: formData.caseSensitive,\n          enumeratedValues: formData.enumeratedValues.length > 0 ? formData.enumeratedValues : undefined\n        };\n        break;\n      case 'territory':\n        configuration = {\n          ...configuration,\n          acceptLowercase: formData.acceptLowercase,\n          allowedTerritories: formData.allowedTerritories.length > 0 ? formData.allowedTerritories : undefined\n        };\n        break;\n      case 'language':\n        // Language types only have allowContextList\n        break;\n    }\n\n    const result: QualifierTypes.Config.ISystemQualifierTypeConfig = {\n      name: formData.name,\n      systemType: formData.systemType,\n      configuration: Object.keys(configuration).length > 1 ? configuration : undefined\n    } as any;\n\n    onSave(result);\n  }, [formData, validateForm, onSave]);\n\n  const updateField = useCallback((field: keyof FormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  }, [errors]);\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            {qualifierType ? 'Edit Qualifier Type' : 'Add Qualifier Type'}\n          </h3>\n          <button\n            onClick={onCancel}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <XMarkIcon className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Basic Properties */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Name *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => updateField('name', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                  errors.name ? 'border-red-300' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter qualifier type name\"\n              />\n              {errors.name && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                System Type *\n              </label>\n              <select\n                value={formData.systemType}\n                onChange={(e) => updateField('systemType', e.target.value as 'language' | 'territory' | 'literal')}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              >\n                <option value=\"literal\">Literal</option>\n                <option value=\"language\">Language</option>\n                <option value=\"territory\">Territory</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Allow Context List */}\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"allowContextList\"\n              checked={formData.allowContextList}\n              onChange={(e) => updateField('allowContextList', e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label htmlFor=\"allowContextList\" className=\"ml-2 text-sm text-gray-700\">\n              Allow Context List\n            </label>\n            <div className=\"ml-2 group relative\">\n              <InformationCircleIcon className=\"w-4 h-4 text-gray-400\" />\n              <div className=\"absolute left-0 bottom-6 hidden group-hover:block bg-gray-800 text-white text-xs rounded py-1 px-2 whitespace-nowrap\">\n                Allow multiple values separated by commas\n              </div>\n            </div>\n          </div>\n\n          {/* Literal Type Specific */}\n          {formData.systemType === 'literal' && (\n            <div className=\"space-y-4 p-4 bg-blue-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900\">Literal Type Configuration</h4>\n              \n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"caseSensitive\"\n                  checked={formData.caseSensitive}\n                  onChange={(e) => updateField('caseSensitive', e.target.checked)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"caseSensitive\" className=\"ml-2 text-sm text-gray-700\">\n                  Case Sensitive\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Enumerated Values\n                </label>\n                <textarea\n                  value={enumeratedValuesText}\n                  onChange={(e) => setEnumeratedValuesText(e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                    errors.enumeratedValues ? 'border-red-300' : 'border-gray-300'\n                  }`}\n                  rows={3}\n                  placeholder=\"Enter values separated by commas (e.g., dev, test, prod)\"\n                />\n                {errors.enumeratedValues && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.enumeratedValues}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">\n                  Separate multiple values with commas\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Territory Type Specific */}\n          {formData.systemType === 'territory' && (\n            <div className=\"space-y-4 p-4 bg-green-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900\">Territory Type Configuration</h4>\n              \n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"acceptLowercase\"\n                  checked={formData.acceptLowercase}\n                  onChange={(e) => updateField('acceptLowercase', e.target.checked)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"acceptLowercase\" className=\"ml-2 text-sm text-gray-700\">\n                  Accept Lowercase Territory Codes\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Allowed Territories\n                </label>\n                <textarea\n                  value={allowedTerritoriesText}\n                  onChange={(e) => setAllowedTerritoriesText(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                  rows={3}\n                  placeholder=\"Enter territory codes separated by commas (e.g., US, CA, GB)\"\n                />\n                <p className=\"mt-1 text-xs text-gray-500\">\n                  Separate multiple territory codes with commas. Will be automatically converted to uppercase.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Language Type Specific */}\n          {formData.systemType === 'language' && (\n            <div className=\"p-4 bg-yellow-50 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900\">Language Type Configuration</h4>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                Language qualifier types use BCP47 language tags and only support the \"Allow Context List\" option above.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end space-x-3 px-6 py-4 border-t bg-gray-50\">\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            {qualifierType ? 'Save Changes' : 'Add Qualifier Type'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"]}