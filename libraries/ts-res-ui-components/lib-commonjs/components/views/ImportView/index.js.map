{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/views/ImportView/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport {\n  DocumentArrowUpIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ArchiveBoxIcon,\n  FolderOpenIcon\n} from '@heroicons/react/24/outline';\nimport { ImportViewProps, ImportedFile, ImportedDirectory, ExtendedProcessedResources } from '../../../types';\nimport { Bundle, Config, ZipArchive } from '@fgv/ts-res';\nimport { isZipFile } from '../../../utils/zipLoader';\nimport { useObservability } from '../../../contexts';\n\ninterface FileInputResult {\n  files: ImportedFile[];\n  directory?: ImportedDirectory;\n  bundleFile?: ImportedFile & { bundle?: Bundle.IBundle };\n}\n\n/**\n * ImportView component for importing resource files, directories, and bundles.\n *\n * Provides a drag-and-drop interface for importing various resource formats including\n * individual JSON files, directory structures, ZIP archives, and pre-compiled bundles.\n * Automatically detects file types and processes them appropriately.\n *\n * **Key Features:**\n * - **Drag-and-drop import**: Simple drag-and-drop interface for file import\n * - **Multiple format support**: JSON files, directories, ZIP archives, and bundles\n * - **Auto-detection**: Automatically detects and processes different file types\n * - **Bundle processing**: Handles pre-compiled ts-res bundles\n * - **ZIP archive support**: Extracts and processes ZIP-based resource collections\n * - **Progress tracking**: Visual feedback during import operations\n * - **Error handling**: Clear error messages for unsupported or corrupted files\n *\n * @example\n * ```tsx\n * import { ImportView } from '@fgv/ts-res-ui-components';\n *\n * function MyImportTool() {\n *   const handleFileImport = (files, directory) => {\n *     console.log('Importing files:', files, directory);\n *   };\n *\n *   const handleBundleImport = (bundle) => {\n *     console.log('Importing bundle:', bundle);\n *   };\n *\n *   const handleZipImport = (zipData) => {\n *     console.log('Importing ZIP:', zipData);\n *   };\n *\n *   return (\n *     <ImportView\n *       onImport={handleFileImport}\n *       onBundleImport={handleBundleImport}\n *       onZipImport={handleZipImport}\n *       acceptedFileTypes={['.json', '.zip']}\n *       onMessage={(type, message) => console.log(`${type}: ${message}`)}\n *     />\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const ImportView: React.FC<ImportViewProps> = ({\n  onImport,\n  onBundleImport,\n  onZipImport,\n  acceptedFileTypes = ['.json', '.zip'],\n  onMessage,\n  className = '',\n  importError\n}) => {\n  // Get observability context\n  const o11y = useObservability();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [importStatus, setImportStatus] = useState<{\n    hasImported: boolean;\n    fileCount: number;\n    isDirectory: boolean;\n    isBundle: boolean;\n    isZip: boolean;\n  }>({\n    hasImported: false,\n    fileCount: 0,\n    isDirectory: false,\n    isBundle: false,\n    isZip: false\n  });\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const dirInputRef = useRef<HTMLInputElement>(null);\n\n  // Check for File System Access API support\n  const isFileSystemAccessSupported = 'showDirectoryPicker' in window || 'showOpenFilePicker' in window;\n\n  // Helper function to process ZIP files using zip-archive packlet\n  const processZipFile = useCallback(\n    async (file: File) => {\n      o11y.diag.info(`[ImportView] Processing ZIP file: ${file.name}`);\n      onMessage?.('info', `Processing ZIP file: ${file.name}`);\n\n      const loader = new ZipArchive.ZipArchiveLoader();\n      const loadResult = await loader.loadFromFile(file, {\n        strictManifestValidation: false // Be lenient with manifests\n      });\n\n      if (loadResult.isFailure()) {\n        throw new Error(`Failed to load ZIP: ${loadResult.message}`);\n      }\n\n      const zipData = loadResult.value;\n      o11y.diag.info(`[ImportView] ZIP loaded successfully:`, zipData);\n\n      // Pass the ZIP data to the appropriate handler\n      if (onZipImport) {\n        // Pass both the directory/files and any configuration found\n        if (zipData.directory) {\n          onZipImport(zipData.directory, zipData.config);\n        } else if (zipData.files.length > 0) {\n          onZipImport(zipData.files, zipData.config);\n        } else {\n          throw new Error('No files found in ZIP archive');\n        }\n      } else {\n        throw new Error('No ZIP import handler configured');\n      }\n\n      return zipData;\n    },\n    [onZipImport, onMessage]\n  );\n\n  // Handle file selection\n  const handleFileSelect = useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      const files = event.target.files;\n      if (!files || files.length === 0) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Handle single file selection - check file type first\n        if (files.length === 1) {\n          const file = files[0];\n\n          // Check if it's a ZIP file first\n          if (isZipFile(file.name)) {\n            o11y.diag.info(`[ImportView] ✅ ${file.name} detected as ZIP file`);\n\n            const zipData = await processZipFile(file);\n\n            setImportStatus({\n              hasImported: true,\n              fileCount: zipData.files.length,\n              isDirectory: false,\n              isBundle: false,\n              isZip: true\n            });\n\n            onMessage?.('success', `ZIP file processed: ${file.name} (${zipData.files.length} files)`);\n            setIsLoading(false);\n            return;\n          }\n        }\n\n        // Handle regular files (non-ZIP)\n        const importedFiles: ImportedFile[] = [];\n        let bundleFile: (ImportedFile & { bundle?: Bundle.IBundle }) | undefined;\n\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const content = await readFileContent(file);\n\n          const importedFile: ImportedFile = {\n            name: file.name,\n            path: file.webkitRelativePath || file.name,\n            content,\n            type: file.type\n          };\n\n          // Check if it's a bundle file using proper detection\n          let isCurrentFileBundle = false;\n          try {\n            const parsedData = JSON.parse(content);\n\n            o11y.diag.info(`[ImportView] Checking if ${file.name} is a bundle...`);\n\n            // Use BundleUtils for proper bundle detection\n            if (Bundle.BundleUtils.isBundleFile(parsedData)) {\n              o11y.diag.info(`[ImportView] ✅ ${file.name} detected as bundle file`);\n              bundleFile = { ...importedFile, bundle: parsedData };\n              isCurrentFileBundle = true;\n            } else if (Bundle.BundleUtils.isBundleFileName(file.name)) {\n              // File name suggests it's a bundle, but content doesn't match - log a warning\n              console.warn(\n                `[ImportView] ⚠️ File ${file.name} appears to be a bundle by name but content doesn't match bundle structure`\n              );\n            } else {\n              o11y.diag.info(`[ImportView] ❌ ${file.name} is not a bundle file`);\n            }\n          } catch (parseError) {\n            o11y.diag.info(`[ImportView] ❌ ${file.name} failed JSON parsing:`, parseError);\n            // Not valid JSON or not a bundle, treat as regular file\n          }\n\n          // Only add to regular files if this specific file is not a bundle\n          if (!isCurrentFileBundle) {\n            importedFiles.push(importedFile);\n          }\n        }\n\n        // Process results\n        if (bundleFile) {\n          o11y.diag.info(`[ImportView] Processing bundle file: ${bundleFile.name}`, bundleFile.bundle);\n\n          setImportStatus({\n            hasImported: true,\n            fileCount: 1,\n            isDirectory: false,\n            isBundle: true,\n            isZip: false\n          });\n          onMessage?.('info', `Bundle file detected: ${bundleFile.name}`);\n          if (onBundleImport && bundleFile.bundle) {\n            o11y.diag.info(`[ImportView] Calling onBundleImport with bundle data`);\n            onBundleImport(bundleFile.bundle);\n          } else {\n            o11y.diag.warn(`[ImportView] No bundle import handler or bundle data missing`);\n          }\n        } else if (importedFiles.length > 0) {\n          setImportStatus({\n            hasImported: true,\n            fileCount: importedFiles.length,\n            isDirectory: false,\n            isBundle: false,\n            isZip: false\n          });\n          onMessage?.('success', `Imported ${importedFiles.length} file(s)`);\n          onImport?.(importedFiles);\n        }\n      } catch (err) {\n        const errorMsg = err instanceof Error ? err.message : String(err);\n        setError(errorMsg);\n        onMessage?.('error', `Import failed: ${errorMsg}`);\n      } finally {\n        setIsLoading(false);\n        // Reset input\n        if (event.target) {\n          event.target.value = '';\n        }\n      }\n    },\n    [onImport, onBundleImport, onMessage]\n  );\n\n  // Handle directory selection (for browsers with webkitdirectory support)\n  const handleDirectorySelect = useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      const files = event.target.files;\n      if (!files || files.length === 0) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const filesByPath = new Map<string, ImportedFile[]>();\n        const dirPaths = new Set<string>();\n\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const content = await readFileContent(file);\n          const path = file.webkitRelativePath;\n\n          if (path) {\n            const parts = path.split('/');\n            const dirPath = parts.slice(0, -1).join('/');\n            dirPaths.add(dirPath);\n\n            if (!filesByPath.has(dirPath)) {\n              filesByPath.set(dirPath, []);\n            }\n\n            filesByPath.get(dirPath)!.push({\n              name: parts[parts.length - 1],\n              path: path,\n              content,\n              type: file.type\n            });\n          }\n        }\n\n        // Build directory structure\n        const rootDir: ImportedDirectory = {\n          name: 'imported',\n          files: filesByPath.get('') || [],\n          subdirectories: []\n        };\n\n        // Create subdirectories\n        const sortedPaths = Array.from(dirPaths).sort();\n        for (const dirPath of sortedPaths) {\n          if (dirPath && dirPath !== '') {\n            const parts = dirPath.split('/');\n            let currentLevel = rootDir;\n\n            for (let i = 0; i < parts.length; i++) {\n              const part = parts[i];\n              const currentPath = parts.slice(0, i + 1).join('/');\n\n              if (!currentLevel.subdirectories) {\n                currentLevel.subdirectories = [];\n              }\n\n              let subdir = currentLevel.subdirectories.find((d) => d.name === part);\n              if (!subdir) {\n                subdir = {\n                  name: part,\n                  path: currentPath,\n                  files: filesByPath.get(currentPath) || [],\n                  subdirectories: []\n                };\n                currentLevel.subdirectories.push(subdir);\n              }\n\n              currentLevel = subdir;\n            }\n          }\n        }\n\n        setImportStatus({\n          hasImported: true,\n          fileCount: files.length,\n          isDirectory: true,\n          isBundle: false,\n          isZip: false\n        });\n\n        onMessage?.('success', `Imported directory with ${files.length} file(s)`);\n        onImport?.(rootDir);\n      } catch (err) {\n        const errorMsg = err instanceof Error ? err.message : String(err);\n        setError(errorMsg);\n        onMessage?.('error', `Directory import failed: ${errorMsg}`);\n      } finally {\n        setIsLoading(false);\n        // Reset input\n        if (event.target) {\n          event.target.value = '';\n        }\n      }\n    },\n    [onImport, onMessage]\n  );\n\n  // Modern File System Access API handlers\n  const handleModernDirectoryPick = useCallback(async () => {\n    if (!('showDirectoryPicker' in window)) {\n      onMessage?.('error', 'Directory picker not supported in this browser');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const dirHandle = await (window as any).showDirectoryPicker();\n      const rootDir = await processDirectoryHandle(dirHandle);\n\n      const fileCount = countFiles(rootDir);\n      setImportStatus({\n        hasImported: true,\n        fileCount,\n        isDirectory: true,\n        isBundle: false,\n        isZip: false\n      });\n\n      onMessage?.('success', `Imported directory \"${rootDir.name}\" with ${fileCount} file(s)`);\n      onImport?.(rootDir);\n    } catch (err: any) {\n      if (err.name !== 'AbortError') {\n        const errorMsg = err instanceof Error ? err.message : String(err);\n        setError(errorMsg);\n        onMessage?.('error', `Directory import failed: ${errorMsg}`);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onImport, onMessage]);\n\n  const handleModernFilePick = useCallback(async () => {\n    if (!('showOpenFilePicker' in window)) {\n      onMessage?.('error', 'File picker not supported in this browser');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const fileHandles = await (window as any).showOpenFilePicker({\n        multiple: true,\n        types: [\n          {\n            description: 'Resource files',\n            accept: {\n              'application/json': ['.json'],\n              'application/zip': ['.zip']\n            }\n          }\n        ]\n      });\n\n      // Check if we have a single ZIP file first\n      if (fileHandles.length === 1) {\n        const file = await fileHandles[0].getFile();\n\n        if (isZipFile(file.name)) {\n          o11y.diag.info(`[ImportView] Modern API - ✅ ${file.name} detected as ZIP file`);\n\n          const zipData = await processZipFile(file);\n\n          setImportStatus({\n            hasImported: true,\n            fileCount: zipData.files.length,\n            isDirectory: false,\n            isBundle: false,\n            isZip: true\n          });\n\n          onMessage?.('success', `ZIP file processed: ${file.name} (${zipData.files.length} files)`);\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      const importedFiles: ImportedFile[] = [];\n      let bundleFile: (ImportedFile & { bundle?: Bundle.IBundle }) | undefined;\n\n      for (const fileHandle of fileHandles) {\n        const file = await fileHandle.getFile();\n\n        // Skip ZIP files in multi-file selection\n        if (isZipFile(file.name)) {\n          onMessage?.('warning', `Skipping ZIP file ${file.name} - select it individually to import`);\n          continue;\n        }\n\n        const content = await file.text();\n\n        const importedFile: ImportedFile = {\n          name: file.name,\n          content,\n          type: file.type\n        };\n\n        // Check for bundle using proper detection\n        let isCurrentFileBundle = false;\n        try {\n          const parsedData = JSON.parse(content);\n\n          o11y.diag.info(`[ImportView] Modern API - Checking if ${file.name} is a bundle...`);\n\n          // Use BundleUtils for proper bundle detection\n          if (Bundle.BundleUtils.isBundleFile(parsedData)) {\n            o11y.diag.info(`[ImportView] Modern API - ✅ ${file.name} detected as bundle file`);\n            bundleFile = { ...importedFile, bundle: parsedData };\n            isCurrentFileBundle = true;\n          } else if (Bundle.BundleUtils.isBundleFileName(file.name)) {\n            console.warn(\n              `[ImportView] Modern API - ⚠️ File ${file.name} appears to be a bundle by name but content doesn't match bundle structure`\n            );\n          } else {\n            o11y.diag.info(`[ImportView] Modern API - ❌ ${file.name} is not a bundle file`);\n          }\n        } catch (parseError) {\n          o11y.diag.info(`[ImportView] Modern API - ❌ ${file.name} failed JSON parsing:`, parseError);\n        }\n\n        // Only add to regular files if this specific file is not a bundle\n        if (!isCurrentFileBundle) {\n          importedFiles.push(importedFile);\n        }\n      }\n\n      // Process results\n      if (bundleFile) {\n        setImportStatus({\n          hasImported: true,\n          fileCount: 1,\n          isDirectory: false,\n          isBundle: true,\n          isZip: false\n        });\n        onMessage?.('info', `Bundle file detected: ${bundleFile.name}`);\n        if (onBundleImport && bundleFile.bundle) {\n          onBundleImport(bundleFile.bundle);\n        }\n      } else if (importedFiles.length > 0) {\n        setImportStatus({\n          hasImported: true,\n          fileCount: importedFiles.length,\n          isDirectory: false,\n          isBundle: false,\n          isZip: false\n        });\n        onMessage?.('success', `Imported ${importedFiles.length} file(s)`);\n        onImport?.(importedFiles);\n      }\n    } catch (err: any) {\n      if (err.name !== 'AbortError') {\n        const errorMsg = err instanceof Error ? err.message : String(err);\n        setError(errorMsg);\n        onMessage?.('error', `File import failed: ${errorMsg}`);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [onImport, onBundleImport, onMessage, acceptedFileTypes]);\n\n  const handleReset = useCallback(() => {\n    setImportStatus({\n      hasImported: false,\n      fileCount: 0,\n      isDirectory: false,\n      isBundle: false,\n      isZip: false\n    });\n    setError(null);\n    onMessage?.('info', 'Import cleared');\n  }, [onMessage]);\n\n  return (\n    <div className={`p-6 ${className}`}>\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <DocumentArrowUpIcon className=\"h-8 w-8 text-blue-600\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">Import Resources</h2>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Left column: Import Controls */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Import Files</h3>\n\n          <div className=\"space-y-4\">\n            {/* API Support Status */}\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              {isFileSystemAccessSupported ? (\n                <>\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span>Modern File System API available</span>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                  <span>Using fallback file input</span>\n                </>\n              )}\n            </div>\n\n            {/* Import Buttons */}\n            <div className=\"flex flex-col space-y-3\">\n              {isFileSystemAccessSupported ? (\n                <>\n                  <button\n                    onClick={handleModernDirectoryPick}\n                    disabled={isLoading}\n                    className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    <FolderOpenIcon className=\"w-5 h-5\" />\n                    <span>{isLoading ? 'Importing...' : 'Import Resource Directory'}</span>\n                  </button>\n\n                  <button\n                    onClick={handleModernFilePick}\n                    disabled={isLoading}\n                    className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    <DocumentArrowUpIcon className=\"w-5 h-5\" />\n                    <span>{isLoading ? 'Importing...' : 'Import Resource Files'}</span>\n                  </button>\n                </>\n              ) : (\n                <>\n                  {/* Fallback inputs */}\n                  <input\n                    ref={dirInputRef}\n                    type=\"file\"\n                    // @ts-ignore - webkitdirectory is not in types\n                    webkitdirectory=\"\"\n                    directory=\"\"\n                    multiple\n                    onChange={handleDirectorySelect}\n                    className=\"hidden\"\n                  />\n                  <button\n                    onClick={() => dirInputRef.current?.click()}\n                    disabled={isLoading}\n                    className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    <FolderOpenIcon className=\"w-5 h-5\" />\n                    <span>{isLoading ? 'Importing...' : 'Import Resource Directory'}</span>\n                  </button>\n\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept={acceptedFileTypes.join(',')}\n                    multiple\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                  />\n                  <button\n                    onClick={() => fileInputRef.current?.click()}\n                    disabled={isLoading}\n                    className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    <DocumentArrowUpIcon className=\"w-5 h-5\" />\n                    <span>{isLoading ? 'Importing...' : 'Import Resource Files'}</span>\n                  </button>\n                </>\n              )}\n            </div>\n\n            {/* Usage Instructions */}\n            <div className=\"text-sm text-gray-600 space-y-2\">\n              <p className=\"font-medium\">Import Options:</p>\n              <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                <li>\n                  <strong>Directory:</strong> Select a folder with ts-res resources\n                </li>\n                <li>\n                  <strong>Files:</strong> Select individual JSON resource files\n                </li>\n                <li>\n                  <strong>Bundles:</strong> Automatically detected and loaded\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Right column: Status */}\n        <div className=\"space-y-6\">\n          {/* Import Status */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Import Status</h3>\n\n            <div className=\"space-y-3\">\n              {/* Import Status */}\n              <div className=\"flex items-center space-x-3\">\n                {importStatus.hasImported ? (\n                  <>\n                    <CheckCircleIcon className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"text-sm text-gray-900\">\n                      {importStatus.isBundle\n                        ? 'Bundle imported'\n                        : importStatus.isZip\n                        ? 'ZIP archive imported'\n                        : importStatus.isDirectory\n                        ? 'Directory imported'\n                        : `${importStatus.fileCount} file(s) imported`}\n                    </span>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"w-5 h-5 rounded-full border-2 border-gray-300\"></div>\n                    <span className=\"text-sm text-gray-500\">No files imported yet</span>\n                  </>\n                )}\n              </div>\n\n              {/* Bundle Detection */}\n              {importStatus.isBundle && (\n                <div className=\"flex items-center space-x-3\">\n                  <ArchiveBoxIcon className=\"w-5 h-5 text-blue-500\" />\n                  <span className=\"text-sm text-blue-900\">Bundle file detected</span>\n                </div>\n              )}\n\n              {/* ZIP Detection */}\n              {importStatus.isZip && (\n                <div className=\"flex items-center space-x-3\">\n                  <ArchiveBoxIcon className=\"w-5 h-5 text-purple-500\" />\n                  <span className=\"text-sm text-purple-900\">ZIP archive processed</span>\n                </div>\n              )}\n            </div>\n\n            {/* Reset Button */}\n            {importStatus.hasImported && (\n              <button\n                onClick={handleReset}\n                className=\"mt-4 px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\n              >\n                Clear Import\n              </button>\n            )}\n          </div>\n\n          {/* Error Display */}\n          {(error || importError) && (\n            <div className=\"bg-white rounded-lg shadow-sm border border-red-200 p-6\">\n              <div className=\"flex items-start space-x-2\">\n                <ExclamationTriangleIcon className=\"w-5 h-5 text-red-600 mt-0.5\" />\n                <div className=\"text-sm text-red-800\">\n                  <p className=\"font-medium\">Error</p>\n                  <p>{importError || error}</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Success Message */}\n          {importStatus.hasImported && !error && !importError && (\n            <div className=\"bg-white rounded-lg shadow-sm border border-green-200 p-6\">\n              <div className=\"flex items-start space-x-2\">\n                <CheckCircleIcon className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div className=\"text-sm text-green-800\">\n                  <p className=\"font-medium\">Import Successful!</p>\n                  <p>\n                    {importStatus.isBundle\n                      ? 'Bundle resources are ready to browse.'\n                      : importStatus.isZip\n                      ? 'ZIP archive contents have been imported and are ready for processing.'\n                      : 'Resources are ready for processing.'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Helper functions\nasync function readFileContent(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => resolve(e.target?.result as string);\n    reader.onerror = (e) => reject(new Error(`Failed to read file: ${file.name}`));\n    reader.readAsText(file);\n  });\n}\n\nasync function processDirectoryHandle(dirHandle: any, parentPath: string = ''): Promise<ImportedDirectory> {\n  const files: ImportedFile[] = [];\n  const subdirectories: ImportedDirectory[] = [];\n\n  for await (const entry of dirHandle.values()) {\n    if (entry.kind === 'file') {\n      const file = await entry.getFile();\n      const content = await file.text();\n      files.push({\n        name: file.name,\n        path: parentPath ? `${parentPath}/${file.name}` : file.name,\n        content,\n        type: file.type\n      });\n    } else if (entry.kind === 'directory') {\n      const subdir = await processDirectoryHandle(\n        entry,\n        parentPath ? `${parentPath}/${entry.name}` : entry.name\n      );\n      subdirectories.push(subdir);\n    }\n  }\n\n  return {\n    name: dirHandle.name,\n    path: parentPath,\n    files,\n    subdirectories: subdirectories.length > 0 ? subdirectories : undefined\n  };\n}\n\nfunction countFiles(dir: ImportedDirectory): number {\n  let count = dir.files?.length || 0;\n  if (dir.subdirectories) {\n    for (const subdir of dir.subdirectories) {\n      count += countFiles(subdir);\n    }\n  }\n  return count;\n}\n\nexport default ImportView;\n"]}