{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/views/MessagesWindow/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport {\n  InformationCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  CheckCircleIcon,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  FunnelIcon,\n  DocumentDuplicateIcon,\n  MagnifyingGlassIcon\n} from '@heroicons/react/24/outline';\nimport { CheckIcon } from '@heroicons/react/24/solid';\nimport { useObservability } from '../../../contexts';\n\n/**\n * Message type definition for the MessagesWindow component.\n *\n * Extends the basic message structure with additional properties for enhanced\n * message management and display.\n *\n * @public\n */\nexport interface Message {\n  /** Unique identifier for the message */\n  id: string;\n  /** Message type determining visual styling and filtering */\n  type: 'info' | 'warning' | 'error' | 'success';\n  /** The message content to display */\n  message: string;\n  /** Timestamp when the message was created */\n  timestamp: Date;\n}\n\n/**\n * Props for the MessagesWindow component.\n *\n * @public\n */\nexport interface MessagesWindowProps {\n  /** Array of messages to display */\n  messages: Message[];\n  /** Callback fired when the user requests to clear all messages */\n  onClearMessages: () => void;\n  /** Optional CSS class name for the container */\n  className?: string;\n}\n\n/**\n * MessagesWindow component for displaying and managing application messages.\n *\n * Provides a comprehensive interface for displaying, filtering, and managing\n * application messages with advanced features like search, filtering by type,\n * and copy functionality. Designed for use in development tools and debugging\n * interfaces where message visibility and management are critical.\n *\n * **Key Features:**\n * - **Message filtering**: Filter messages by type (info, warning, error, success)\n * - **Search functionality**: Full-text search across message content\n * - **Copy functionality**: Copy all filtered messages to clipboard\n * - **Collapsible interface**: Minimize/maximize the message window\n * - **Message count display**: Shows filtered vs total message counts\n * - **Timestamp formatting**: Human-readable timestamp display\n * - **Visual indicators**: Color-coded message types with appropriate icons\n * - **Auto-hide when empty**: Component hides automatically when no messages exist\n *\n * @example\n * ```typescript\n * import { MessagesWindow, Message } from '@fgv/ts-res-ui-components';\n *\n * function MyApplication() {\n *   const [messages, setMessages] = useState<Message[]>([]);\n *\n *   const addMessage = (type: Message['type'], text: string) => {\n *     const newMessage: Message = {\n *       id: `msg-${Date.now()}-${Math.random()}`,\n *       type,\n *       message: text,\n *       timestamp: new Date()\n *     };\n *     setMessages(prev => [...prev, newMessage]);\n *   };\n *\n *   const clearMessages = () => {\n *     setMessages([]);\n *   };\n *\n *   // Create component with button controls and messages window\n *   return React.createElement('div', {},\n *     React.createElement('div', { className: 'space-x-2 mb-4' },\n *       React.createElement('button',\n *         { onClick: () => addMessage('info', 'Processing started') },\n *         'Add Info'\n *       ),\n *       React.createElement('button',\n *         { onClick: () => addMessage('success', 'Operation completed') },\n *         'Add Success'\n *       )\n *     ),\n *     React.createElement(MessagesWindow, {\n *       messages,\n *       onClearMessages: clearMessages\n *     })\n *   );\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Integration with view state management\n * import { ViewStateTools } from '@fgv/ts-res-ui-components';\n *\n * function MyTool() {\n *   const [viewState, setViewState] = useState({\n *     messages: [] as ViewStateTools.Message[]\n *   });\n *\n *   const onMessage = (type: ViewStateTools.Message['type'], message: string) => {\n *     setViewState(prev => ({\n *       ...prev,\n *       messages: [...prev.messages, {\n *         id: `msg-${Date.now()}`,\n *         type,\n *         message,\n *         timestamp: new Date()\n *       }]\n *     }));\n *   };\n *\n *   return React.createElement('div', { className: 'flex flex-col h-screen' },\n *     React.createElement('div', { className: 'flex-1' }),\n *     React.createElement(ViewStateTools.MessagesWindow, {\n *       messages: viewState.messages,\n *       onClearMessages: () => setViewState(prev => ({ ...prev, messages: [] }))\n *     })\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const MessagesWindow: React.FC<MessagesWindowProps> = ({\n  messages,\n  onClearMessages,\n  className = ''\n}) => {\n  // Get observability context\n  const o11y = useObservability();\n\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [filter, setFilter] = useState<Message['type'] | 'all'>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [copySuccess, setCopySuccess] = useState(false);\n\n  // Filter and search messages\n  const filteredMessages = useMemo(() => {\n    return messages.filter((message) => {\n      const matchesFilter = filter === 'all' || message.type === filter;\n      const matchesSearch =\n        searchTerm === '' || message.message.toLowerCase().includes(searchTerm.toLowerCase());\n      return matchesFilter && matchesSearch;\n    });\n  }, [messages, filter, searchTerm]);\n\n  const copyAllMessages = () => {\n    const messageText = filteredMessages\n      .map((msg) => `[${msg.type.toUpperCase()}] ${formatTime(msg.timestamp)} - ${msg.message}`)\n      .join('\\n');\n\n    navigator.clipboard\n      .writeText(messageText)\n      .then(() => {\n        setCopySuccess(true);\n        setTimeout(() => setCopySuccess(false), 2000);\n      })\n      .catch((err) => {\n        o11y.diag.error('Failed to copy messages:', err);\n      });\n  };\n\n  if (messages.length === 0) {\n    return null;\n  }\n\n  const getMessageIcon = (type: Message['type']) => {\n    switch (type) {\n      case 'info':\n        return <InformationCircleIcon className=\"h-5 w-5 text-blue-500\" />;\n      case 'warning':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircleIcon className=\"h-5 w-5 text-red-500\" />;\n      case 'success':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />;\n      default:\n        return <InformationCircleIcon className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getMessageBgColor = (type: Message['type']) => {\n    switch (type) {\n      case 'info':\n        return 'bg-blue-50 border-blue-200';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200';\n      case 'error':\n        return 'bg-red-50 border-red-200';\n      case 'success':\n        return 'bg-green-50 border-green-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n  };\n\n  return (\n    <div className={`border-t border-gray-200 bg-white ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between px-4 py-2 bg-gray-50 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n          <button onClick={() => setIsCollapsed(!isCollapsed)} className=\"p-1 hover:bg-gray-200 rounded\">\n            {isCollapsed ? (\n              <ChevronUpIcon className=\"h-4 w-4 text-gray-500\" />\n            ) : (\n              <ChevronDownIcon className=\"h-4 w-4 text-gray-500\" />\n            )}\n          </button>\n          <h3 className=\"text-sm font-medium text-gray-900\">\n            Messages ({filteredMessages.length}\n            {messages.length !== filteredMessages.length ? ` of ${messages.length}` : ''})\n          </h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"p-1 hover:bg-gray-200 rounded\"\n            title=\"Filter messages\"\n          >\n            <FunnelIcon className=\"h-4 w-4 text-gray-500\" />\n          </button>\n          <button\n            onClick={copyAllMessages}\n            className={`p-1 rounded transition-colors ${\n              copySuccess ? 'bg-green-100 hover:bg-green-200' : 'hover:bg-gray-200'\n            }`}\n            title={copySuccess ? 'Copied!' : 'Copy filtered messages'}\n          >\n            {copySuccess ? (\n              <CheckIcon className=\"h-4 w-4 text-green-600\" />\n            ) : (\n              <DocumentDuplicateIcon className=\"h-4 w-4 text-gray-500\" />\n            )}\n          </button>\n          <button\n            onClick={onClearMessages}\n            className=\"text-xs text-gray-500 hover:text-gray-700 px-2 py-1 rounded hover:bg-gray-200\"\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      {!isCollapsed && showFilters && (\n        <div className=\"px-4 py-2 bg-gray-100 border-b border-gray-200 space-y-2\">\n          {/* Search */}\n          <div className=\"relative\">\n            <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search messages...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-3 py-1 text-xs border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          {/* Filter buttons */}\n          <div className=\"flex flex-wrap gap-1\">\n            {(['all', 'info', 'success', 'warning', 'error'] as const).map((type) => (\n              <button\n                key={type}\n                onClick={() => setFilter(type)}\n                className={`text-xs px-2 py-1 rounded-md border ${\n                  filter === type\n                    ? 'bg-blue-100 border-blue-300 text-blue-700'\n                    : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                {type === 'all' ? 'All' : type.charAt(0).toUpperCase() + type.slice(1)}\n                {type !== 'all' && ` (${messages.filter((m) => m.type === type).length})`}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Messages */}\n      {!isCollapsed && (\n        <div className=\"max-h-48 overflow-y-auto\">\n          {filteredMessages.length === 0 ? (\n            <div className=\"p-4 text-center text-gray-500 text-sm\">\n              {searchTerm || filter !== 'all' ? 'No messages match the current filter' : 'No messages'}\n            </div>\n          ) : (\n            filteredMessages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start space-x-3 p-3 border-l-4 ${getMessageBgColor(message.type)}`}\n              >\n                {getMessageIcon(message.type)}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-gray-900\">{message.message}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">{formatTime(message.timestamp)}</p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MessagesWindow;\n"]}