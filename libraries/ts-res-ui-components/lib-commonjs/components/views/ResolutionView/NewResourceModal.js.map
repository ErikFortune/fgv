{"version":3,"file":"NewResourceModal.js","sourceRoot":"","sources":["../../../../src/components/views/ResolutionView/NewResourceModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport { ResourceTypes } from '@fgv/ts-res';\n\ninterface NewResourceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  resourceId: string;\n  resourceType: string;\n  availableResourceTypes: ResourceTypes.IResourceType[];\n  isValid: boolean;\n  defaultResourceType?: string;\n  onUpdateResourceId: (id: string) => void;\n  onSelectResourceType: (type: string) => void;\n  onSave: () => void;\n}\n\n/**\n * Modal dialog for creating new resources with type selection and ID input.\n * Supports host-controlled resource types that hide the type selector.\n */\nexport const NewResourceModal: React.FC<NewResourceModalProps> = ({\n  isOpen,\n  onClose,\n  resourceId,\n  resourceType,\n  availableResourceTypes,\n  isValid,\n  defaultResourceType,\n  onUpdateResourceId,\n  onSelectResourceType,\n  onSave\n}) => {\n  const [localResourceId, setLocalResourceId] = useState(resourceId);\n\n  useEffect(() => {\n    setLocalResourceId(resourceId);\n  }, [resourceId]);\n\n  if (!isOpen) return null;\n\n  const handleIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newId = e.target.value;\n    setLocalResourceId(newId);\n    onUpdateResourceId(newId);\n  };\n\n  const handleSave = () => {\n    if (isValid) {\n      onSave();\n      onClose();\n    }\n  };\n\n  const showTypeSelector = !defaultResourceType;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-center justify-center p-4\">\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onClick={onClose} />\n\n        <div className=\"relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:w-full sm:max-w-lg\">\n          <div className=\"bg-white px-6 pb-4 pt-5\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Create New Resource</h3>\n              <button onClick={onClose} className=\"text-gray-400 hover:text-gray-500 focus:outline-none\">\n                <XMarkIcon className=\"h-6 w-6\" />\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Resource ID Input */}\n              <div>\n                <label htmlFor=\"resource-id\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Resource ID <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  id=\"resource-id\"\n                  type=\"text\"\n                  value={localResourceId}\n                  onChange={handleIdChange}\n                  placeholder=\"Enter unique resource ID\"\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${\n                    isValid ? 'border-gray-300 focus:ring-blue-500' : 'border-red-300 focus:ring-red-500'\n                  }`}\n                />\n                {!isValid && localResourceId && (\n                  <p className=\"mt-1 text-sm text-red-600\">Resource ID must be unique and non-empty</p>\n                )}\n              </div>\n\n              {/* Resource Type Selector */}\n              {showTypeSelector ? (\n                <div>\n                  <label htmlFor=\"resource-type\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Resource Type\n                  </label>\n                  <select\n                    id=\"resource-type\"\n                    value={resourceType}\n                    onChange={(e) => onSelectResourceType(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {availableResourceTypes.map((type) => (\n                      <option key={type.key} value={type.key}>\n                        {type.key}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              ) : (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Resource Type</label>\n                  <div className=\"px-3 py-2 bg-gray-100 border border-gray-300 rounded-md text-gray-700\">\n                    {defaultResourceType}\n                    <span className=\"text-xs text-gray-500 ml-2\">(Host-controlled)</span>\n                  </div>\n                </div>\n              )}\n\n              {/* Template Preview */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Template Preview</label>\n                <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-md\">\n                  <pre className=\"text-xs text-gray-600 overflow-x-auto\">\n                    {JSON.stringify({ id: localResourceId, type: resourceType }, null, 2)}\n                  </pre>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gray-50 px-6 py-3 flex justify-end space-x-3\">\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleSave}\n              disabled={!isValid}\n              className={`px-4 py-2 text-sm font-medium text-white rounded-md focus:outline-none focus:ring-2 ${\n                isValid\n                  ? 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'\n                  : 'bg-gray-400 cursor-not-allowed'\n              }`}\n            >\n              Add as Pending\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NewResourceModal;\n"]}