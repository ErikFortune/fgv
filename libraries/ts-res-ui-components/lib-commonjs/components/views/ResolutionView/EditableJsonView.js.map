{"version":3,"file":"EditableJsonView.js","sourceRoot":"","sources":["../../../../src/components/views/ResolutionView/EditableJsonView.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { JsonEditor } from 'json-edit-react';\nimport { PencilIcon, CheckIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { validateEditedResource } from '../../../utils/resolutionEditing';\n\n/**\n * Props for the EditableJsonView component.\n *\n * @public\n */\nexport interface EditableJsonViewProps {\n  /** The original JSON value */\n  value: any;\n  /** The resource ID for tracking edits */\n  resourceId: string;\n  /** Whether this resource has been edited */\n  isEdited?: boolean;\n  /** The current edited value if any */\n  editedValue?: any;\n  /** Callback when the user saves an edit */\n  onSave?: (resourceId: string, editedValue: any, originalValue: any) => void;\n  /** Callback when the user cancels an edit */\n  onCancel?: (resourceId: string) => void;\n  /** Whether editing is currently disabled */\n  disabled?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Interactive JSON editor for modifying resource values during resolution testing.\n *\n * The EditableJsonView component provides a rich JSON editing interface for modifying\n * resource values during resolution testing and analysis. It supports syntax highlighting,\n * validation, and seamless switching between view and edit modes. Changes are tracked\n * and can be applied as new resource candidates with the current resolution context.\n *\n * @example\n * ```tsx\n * import { ResolutionTools } from '@fgv/ts-res-ui-components';\n *\n * // Basic usage with resource data\n * const ResourceEditor = ({ resource }) => {\n *   const [edits, setEdits] = useState({});\n *\n *   const handleSave = (resourceId, editedValue, originalValue) => {\n *     setEdits(prev => ({\n *       ...prev,\n *       [resourceId]: { editedValue, originalValue, timestamp: new Date() }\n *     }));\n *   };\n *\n *   const handleCancel = (resourceId) => {\n *     setEdits(prev => {\n *       const newEdits = { ...prev };\n *       delete newEdits[resourceId];\n *       return newEdits;\n *     });\n *   };\n *\n *   return (\n *     <ResolutionTools.EditableJsonView\n *       resourceId={resource.id}\n *       value={resource.resolvedValue}\n *       isEdited={edits[resource.id] !== undefined}\n *       editedValue={edits[resource.id]?.editedValue}\n *       onSave={handleSave}\n *       onCancel={handleCancel}\n *     />\n *   );\n * };\n * ```\n *\n * @example\n * ```tsx\n * // Advanced usage with validation and error handling\n * const AdvancedResourceEditor = () => {\n *   const [selectedResource, setSelectedResource] = useState('welcome-message');\n *   const [pendingEdits, setPendingEdits] = useState({});\n *   const [errors, setErrors] = useState({});\n *\n *   const handleSaveEdit = async (resourceId, editedValue, originalValue) => {\n *     try {\n *       // Validate the edited content\n *       const validation = await validateResourceValue(editedValue, resourceId);\n *       if (!validation.isValid) {\n *         setErrors(prev => ({ ...prev, [resourceId]: validation.errors }));\n *         return;\n *       }\n *\n *       // Save the edit\n *       setPendingEdits(prev => ({\n *         ...prev,\n *         [resourceId]: {\n *           editedValue,\n *           originalValue,\n *           timestamp: new Date(),\n *           metadata: { editedBy: getCurrentUser() }\n *         }\n *       }));\n *\n *       // Clear any previous errors\n *       setErrors(prev => {\n *         const newErrors = { ...prev };\n *         delete newErrors[resourceId];\n *         return newErrors;\n *       });\n *\n *       showSuccess(`Changes saved for ${resourceId}`);\n *     } catch (error) {\n *       showError(`Failed to save changes: ${error.message}`);\n *     }\n *   };\n *\n *   return (\n *     <div className=\"resource-editor\">\n *       <ResolutionTools.EditableJsonView\n *         resourceId={selectedResource}\n *         value={getResourceValue(selectedResource)}\n *         isEdited={pendingEdits[selectedResource] !== undefined}\n *         editedValue={pendingEdits[selectedResource]?.editedValue}\n *         onSave={handleSaveEdit}\n *         onCancel={(resourceId) => {\n *           setPendingEdits(prev => {\n *             const newEdits = { ...prev };\n *             delete newEdits[resourceId];\n *             return newEdits;\n *           });\n *         }}\n *         disabled={isSystemLocked}\n *         className=\"border-2 border-blue-200\"\n *       />\n *\n *       {errors[selectedResource] && (\n *         <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded\">\n *           <h4 className=\"text-red-800 font-medium\">Validation Errors:</h4>\n *           <ul className=\"list-disc list-inside text-red-700\">\n *             {errors[selectedResource].map((error, i) => (\n *               <li key={i}>{error}</li>\n *             ))}\n *           </ul>\n *         </div>\n *       )}\n *     </div>\n *   );\n * };\n * ```\n *\n * @example\n * ```tsx\n * // Integration with resolution workflow\n * const ResolutionWorkflow = () => {\n *   const { state, actions } = useResolutionState(processedResources);\n *\n *   return (\n *     <div className=\"resolution-workflow\">\n *       <div className=\"resource-selection\">\n *         <PickerTools.ResourcePicker\n *           resources={processedResources}\n *           selectedResourceId={state.selectedResourceId}\n *           onResourceSelect={(selection) => actions.selectResource(selection.resourceId)}\n *         />\n *       </div>\n *\n *       {state.selectedResourceId && (\n *         <div className=\"resource-editing\">\n *           <ResolutionTools.EditableJsonView\n *             resourceId={state.selectedResourceId}\n *             value={state.resolutionResult?.composedValue}\n *             isEdited={actions.hasEdit(state.selectedResourceId)}\n *             editedValue={actions.getEditedValue(state.selectedResourceId)}\n *             onSave={actions.saveEdit}\n *             onCancel={(resourceId) => {\n *               const newEdits = new Map(state.editedResources);\n *               newEdits.delete(resourceId);\n *               // Update state...\n *             }}\n *           />\n *\n *           <ResolutionTools.UnifiedChangeControls\n *             editCount={state.editedResources.size}\n *             isApplying={state.isApplyingEdits}\n *             addCount={state.pendingResources.size}\n *             deleteCount={state.pendingResourceDeletions.size}\n *             onApplyAll={actions.applyPendingResources}\n *             onDiscardAll={() => { actions.clearEdits(); actions.discardPendingResources(); }}\n *           />\n *         </div>\n *       )}\n *     </div>\n *   );\n * };\n * ```\n *\n * @public\n */\nexport const EditableJsonView: React.FC<EditableJsonViewProps> = ({\n  value,\n  resourceId,\n  isEdited = false,\n  editedValue,\n  onSave,\n  onCancel,\n  disabled = false,\n  className = ''\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentEditValue, setCurrentEditValue] = useState<any>(null);\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n  // The display value is either the edited value or the original value\n  const displayValue = useMemo(() => {\n    if (isEdited && editedValue !== undefined) {\n      return editedValue;\n    }\n    return value;\n  }, [value, editedValue, isEdited]);\n\n  // Handle starting an edit\n  const handleStartEdit = useCallback(() => {\n    if (disabled) return;\n    setCurrentEditValue(displayValue);\n    setIsEditing(true);\n    setValidationErrors([]);\n  }, [displayValue, disabled]);\n\n  // Handle canceling an edit\n  const handleCancelEdit = useCallback(() => {\n    setIsEditing(false);\n    setCurrentEditValue(null);\n    setValidationErrors([]);\n    onCancel?.(resourceId);\n  }, [resourceId, onCancel]);\n\n  // Handle saving an edit\n  const handleSaveEdit = useCallback(() => {\n    if (!onSave || currentEditValue === null) return;\n\n    // Validate the edited value\n    const validation = validateEditedResource(currentEditValue);\n    if (!validation.isValid) {\n      setValidationErrors(validation.errors);\n      return;\n    }\n\n    // Save the edit\n    onSave(resourceId, currentEditValue, value);\n    setIsEditing(false);\n    setCurrentEditValue(null);\n    setValidationErrors([]);\n  }, [resourceId, currentEditValue, value, onSave]);\n\n  // Handle changes in the JSON editor\n  const handleJsonChange = useCallback(\n    (newValue: any) => {\n      setCurrentEditValue(newValue);\n\n      // Clear validation errors when user starts typing\n      if (validationErrors.length > 0) {\n        setValidationErrors([]);\n      }\n    },\n    [validationErrors]\n  );\n\n  // JSON editor configuration\n  const jsonEditConfig = useMemo(\n    () => ({\n      minHeight: '200px',\n      maxHeight: '400px',\n      style: {\n        container: {\n          backgroundColor: '#f9fafb',\n          border: '1px solid #d1d5db',\n          borderRadius: '0.375rem',\n          fontFamily:\n            'ui-monospace, SFMono-Regular, \"SF Mono\", Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace'\n        },\n        key: {\n          color: '#1f2937',\n          fontWeight: '500'\n        },\n        string: {\n          color: '#059669'\n        },\n        number: {\n          color: '#dc2626'\n        },\n        boolean: {\n          color: '#7c3aed'\n        },\n        null: {\n          color: '#6b7280'\n        }\n      },\n      enableHighlight: true,\n      enableClipboard: true\n    }),\n    []\n  );\n\n  return (\n    <div className={`bg-white rounded-lg border ${className}`}>\n      {/* Header with edit controls */}\n      <div className=\"flex items-center justify-between p-3 border-b bg-gray-50\">\n        <div className=\"flex items-center space-x-2\">\n          <h4 className=\"text-sm font-semibold text-gray-900\">Resource Content</h4>\n          {isEdited && (\n            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n              Edited\n            </span>\n          )}\n        </div>\n\n        {!isEditing && (\n          <button\n            onClick={handleStartEdit}\n            disabled={disabled}\n            className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            title=\"Edit resource content\"\n          >\n            <PencilIcon className=\"h-4 w-4 mr-1\" />\n            Edit\n          </button>\n        )}\n\n        {isEditing && (\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={handleSaveEdit}\n              disabled={validationErrors.length > 0}\n              className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              title=\"Save changes\"\n            >\n              <CheckIcon className=\"h-4 w-4 mr-1\" />\n              Save\n            </button>\n            <button\n              onClick={handleCancelEdit}\n              className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              title=\"Cancel changes\"\n            >\n              <XMarkIcon className=\"h-4 w-4 mr-1\" />\n              Cancel\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Validation errors */}\n      {validationErrors.length > 0 && (\n        <div className=\"p-3 border-b bg-red-50\">\n          <div className=\"text-sm text-red-800\">\n            <p className=\"font-medium mb-1\">Validation Errors:</p>\n            <ul className=\"list-disc list-inside space-y-1\">\n              {validationErrors.map((error, index) => (\n                <li key={index}>{error}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* JSON content */}\n      <div className=\"p-3\">\n        {isEditing ? (\n          <JsonEditor data={currentEditValue} setData={handleJsonChange} {...jsonEditConfig} />\n        ) : (\n          <pre className=\"text-sm font-mono text-gray-800 bg-gray-50 p-3 rounded border overflow-x-auto whitespace-pre-wrap\">\n            {JSON.stringify(displayValue, null, 2)}\n          </pre>\n        )}\n      </div>\n\n      {/* Help text */}\n      {isEditing && (\n        <div className=\"px-3 pb-3\">\n          <p className=\"text-xs text-gray-500\">\n            Edit the JSON content above. Changes will be saved as a new candidate with the current resolution\n            context.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n"]}