{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/views/ResolutionView/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect, useRef } from 'react';\nimport {\n  MagnifyingGlassIcon,\n  DocumentTextIcon,\n  CubeIcon,\n  CheckIcon,\n  XMarkIcon,\n  PencilIcon,\n  TrashIcon,\n  ListBulletIcon,\n  FolderIcon,\n  PlusIcon\n} from '@heroicons/react/24/outline';\nimport {\n  ResolutionViewProps,\n  CandidateInfo,\n  ResolutionActions,\n  ResolutionState,\n  ResourceEditorFactory,\n  ResourceEditorResult,\n  ResolutionContextOptions\n} from '../../../types';\nimport { ResourceId } from '@fgv/ts-res';\nimport { QualifierContextControl } from '../../common/QualifierContextControl';\nimport { UnifiedChangeControls } from './UnifiedChangeControls';\nimport { ResourcePicker } from '../../pickers/ResourcePicker';\nimport {\n  ResourceSelection,\n  ResourceAnnotations,\n  ResourcePickerOptions,\n  PendingResource\n} from '../../pickers/ResourcePicker/types';\nimport { ResourcePickerOptionsControl } from '../../common/ResourcePickerOptionsControl';\nimport { ResolutionContextOptionsControl } from '../../common/ResolutionContextOptionsControl';\nimport { ResolutionResults } from '../../common/ResolutionResults';\nimport { NewResourceModal } from './NewResourceModal';\nimport { useObservability } from '../../../contexts';\n\n/**\n * ResolutionView component for resource resolution testing and editing.\n *\n * Provides a comprehensive interface for testing resource resolution with different\n * qualifier contexts, viewing resolution results, and editing resource values with\n * custom editors. Supports real-time resolution testing and conflict detection.\n *\n * **Key Features:**\n * - **Context management**: Set and update resolution context (qualifier values)\n * - **Real-time resolution**: See how resources resolve with current context\n * - **Resource editing**: Edit resource values with custom type-specific editors\n * - **Conflict detection**: Detect when edits would conflict with existing resources\n * - **Preview mode**: See how edits affect resolution without committing changes\n * - **Custom editors**: Support for type-specific resource editors via factory pattern\n * - **Fallback editing**: JSON editor fallback when custom editors aren't available\n *\n * @example\n * ```tsx\n * import { ResolutionView } from '@fgv/ts-res-ui-components';\n *\n * // Custom editor factory for specific resource types\n * const editorFactory = {\n *   createEditor: (resourceId, resourceType, value) => {\n *     if (resourceType === 'market-info') {\n *       return {\n *         success: true,\n *         editor: MarketInfoEditor\n *       };\n *     }\n *     return { success: false };\n *   }\n * };\n *\n * function MyResolutionTool() {\n *   return (\n *     <ResolutionView\n *       resources={processedResources}\n *       resolutionState={resolutionState}\n *       resolutionActions={resolutionActions}\n *       availableQualifiers={['language', 'territory', 'platform']}\n *       resourceEditorFactory={editorFactory}\n *       onMessage={(type, message) => console.log(`${type}: ${message}`)}\n *     />\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const ResolutionView: React.FC<ResolutionViewProps> = ({\n  resources,\n  filterState,\n  filterResult,\n  resolutionState,\n  resolutionActions,\n  availableQualifiers = [],\n  resourceEditorFactory,\n  onMessage,\n  pickerOptions,\n  pickerOptionsPresentation = 'hidden',\n  contextOptions,\n  lockedViewMode,\n  sectionTitles,\n  allowResourceCreation = false,\n  defaultResourceType,\n  resourceTypeFactory,\n  onPendingResourcesApplied,\n  showPendingResourcesInList = true,\n  className = ''\n}) => {\n  // Get observability context\n  const o11y = useObservability();\n  // State for picker options control\n  const [currentPickerOptions, setCurrentPickerOptions] = useState<ResourcePickerOptions>(\n    pickerOptions || {}\n  );\n\n  // State for context options control\n  const [currentContextOptions, setCurrentContextOptions] = useState<ResolutionContextOptions>(\n    contextOptions || {}\n  );\n\n  // State for new resource modal\n  const [showNewResourceModal, setShowNewResourceModal] = useState(false);\n\n  // Local toggles for editing/creation features (controllable via options dialog)\n  const [allowResourceCreationInternal, setAllowResourceCreationInternal] = useState<boolean>(\n    !!allowResourceCreation\n  );\n  const [showPendingResourcesInListInternal, setShowPendingResourcesInListInternal] = useState<boolean>(\n    !!showPendingResourcesInList\n  );\n\n  // Sync internal toggles when props change\n  useEffect(() => {\n    setAllowResourceCreationInternal(!!allowResourceCreation);\n  }, [allowResourceCreation]);\n  useEffect(() => {\n    setShowPendingResourcesInListInternal(!!showPendingResourcesInList);\n  }, [showPendingResourcesInList]);\n\n  // Update currentContextOptions when contextOptions prop changes\n  // This is important for host-managed values\n  React.useEffect(() => {\n    if (contextOptions?.hostManagedValues) {\n      setCurrentContextOptions((prev) => ({\n        ...prev,\n        hostManagedValues: contextOptions.hostManagedValues\n      }));\n    }\n  }, [contextOptions?.hostManagedValues]);\n\n  // Use filtered resources when filtering is active and successful\n  const isFilteringActive = filterState?.enabled && filterResult?.success === true;\n  const baseProcessedResources = isFilteringActive ? filterResult?.processedResources : resources;\n\n  // For now, just use the base processed resources directly\n  // TODO: Implement merging of pending resources for display\n  const activeProcessedResources = baseProcessedResources;\n\n  // Merge picker options with resolution-specific defaults\n  const effectivePickerOptions = useMemo(\n    () => ({\n      defaultView: 'list' as const,\n      showViewToggle: true,\n      enableSearch: true,\n      searchPlaceholder: 'Search resources for resolution testing...',\n      searchScope: 'all' as const,\n      height: '520px',\n      emptyMessage: 'No resources available for resolution testing',\n      // Override with user-provided options\n      ...pickerOptions,\n      // Override with current picker options from control\n      ...currentPickerOptions\n    }),\n    [pickerOptions, currentPickerOptions]\n  );\n\n  // Create resource annotations for resolution results and edit states\n  const resourceAnnotations = useMemo(() => {\n    const annotations: ResourceAnnotations = {};\n\n    // Get all resource IDs (existing + pending)\n    const allResourceIds = new Set<string>();\n\n    if (activeProcessedResources?.summary?.resourceIds) {\n      activeProcessedResources.summary.resourceIds.forEach((id) => allResourceIds.add(id));\n    }\n\n    // Add pending resource IDs\n    if (resolutionState?.pendingResources) {\n      resolutionState.pendingResources.forEach((_, id) => allResourceIds.add(id));\n    }\n\n    allResourceIds.forEach((resourceId) => {\n      const hasEdit = resolutionActions?.hasEdit?.(resourceId);\n      const isPending = resolutionState?.pendingResources?.has(resourceId);\n      const isMarkedForDeletion = resolutionState?.pendingResourceDeletions?.has(resourceId);\n      const isSelected = resolutionState?.selectedResourceId === resourceId;\n      const hasResolutionResult = isSelected && resolutionState?.resolutionResult;\n\n      // Base annotation with appropriate indicator\n      let indicator = undefined;\n      if (isPending) {\n        indicator = {\n          type: 'icon' as const,\n          value: '➕',\n          tooltip: 'New resource (pending)'\n        };\n      } else if (isMarkedForDeletion) {\n        indicator = {\n          type: 'icon' as const,\n          value: '🗑️',\n          tooltip: 'Marked for deletion'\n        };\n      } else if (hasEdit) {\n        indicator = {\n          type: 'icon' as const,\n          value: '✏️',\n          tooltip: 'Resource has unsaved edits'\n        };\n      }\n\n      annotations[resourceId] = {\n        indicator\n      };\n\n      // Add resolution result annotations for selected resource\n      if (hasResolutionResult && resolutionState?.resolutionResult?.success) {\n        const result = resolutionState.resolutionResult;\n\n        // Show match status as badge\n        if (result.bestCandidate) {\n          annotations[resourceId].badge = {\n            text: 'Resolved',\n            variant: 'info'\n          };\n        } else if (result.candidateDetails) {\n          const matchingCount = result.candidateDetails.filter((c: CandidateInfo) => c.matched).length;\n          const totalCount = result.candidateDetails.length;\n\n          if (matchingCount === 0) {\n            annotations[resourceId].badge = {\n              text: 'No Match',\n              variant: 'error'\n            };\n          } else {\n            annotations[resourceId].badge = {\n              text: `${matchingCount}/${totalCount}`,\n              variant: 'warning'\n            };\n          }\n        }\n\n        // Add suffix with candidate count\n        if (result.resource) {\n          const totalCandidates = result.resource.candidates.length;\n          annotations[resourceId].suffix = `${totalCandidates} candidate${totalCandidates !== 1 ? 's' : ''}`;\n        }\n      } else if (\n        isSelected &&\n        resolutionState?.resolutionResult &&\n        !resolutionState.resolutionResult.success\n      ) {\n        // Show error state\n        annotations[resourceId].badge = {\n          text: 'Error',\n          variant: 'error'\n        };\n      }\n    });\n\n    return annotations;\n  }, [\n    activeProcessedResources?.summary?.resourceIds,\n    resolutionActions,\n    resolutionState?.selectedResourceId,\n    resolutionState?.resolutionResult,\n    resolutionState?.pendingResources,\n    resolutionState?.pendingResourceDeletions\n  ]);\n\n  // Merge context options with current options from control\n  const effectiveContextOptions = useMemo(() => {\n    // Deep merge to preserve hostManagedValues from contextOptions\n    const merged = {\n      ...contextOptions,\n      ...currentContextOptions,\n      // Preserve hostManagedValues from contextOptions if currentContextOptions doesn't explicitly set it\n      hostManagedValues:\n        currentContextOptions?.hostManagedValues !== undefined\n          ? currentContextOptions.hostManagedValues\n          : contextOptions?.hostManagedValues\n    };\n    o11y.diag.info('ResolutionView - effectiveContextOptions:', merged);\n    o11y.diag.info('ResolutionView - contextOptions hostManagedValues:', contextOptions?.hostManagedValues);\n    o11y.diag.info(\n      'ResolutionView - currentContextOptions hostManagedValues:',\n      currentContextOptions?.hostManagedValues\n    );\n    o11y.diag.info('ResolutionView - final hostManagedValues:', merged.hostManagedValues);\n    return merged;\n  }, [contextOptions, currentContextOptions]);\n\n  // Handle context value changes using the shared component's callback pattern\n  const handleQualifierChange = useCallback(\n    (qualifierName: string, value: string | undefined) => {\n      // Don't update context if this qualifier is host-managed\n      const qualifierOptions = effectiveContextOptions?.qualifierOptions?.[qualifierName];\n      const isHostManaged = qualifierOptions?.hostValue !== undefined;\n\n      if (!isHostManaged) {\n        resolutionActions?.updateContextValue(qualifierName, value);\n      }\n    },\n    [resolutionActions, effectiveContextOptions?.qualifierOptions]\n  );\n\n  // Apply host-managed values when they change\n  const prevHostValuesRef = useRef<string | undefined>(undefined);\n  React.useEffect(() => {\n    if (!effectiveContextOptions?.hostManagedValues || !resolutionActions?.applyContext) return;\n\n    const hostValuesStr = JSON.stringify(effectiveContextOptions.hostManagedValues);\n    if (prevHostValuesRef.current !== hostValuesStr) {\n      console.log(\n        'ResolutionView: Host values changed, applying:',\n        effectiveContextOptions.hostManagedValues\n      );\n      prevHostValuesRef.current = hostValuesStr;\n      // Pass host values to the resolution state\n      resolutionActions.applyContext(effectiveContextOptions.hostManagedValues);\n    }\n  }, [effectiveContextOptions?.hostManagedValues, resolutionActions]);\n\n  // Determine which qualifiers to show and their options\n  const visibleQualifiers = useMemo(() => {\n    if (!effectiveContextOptions?.qualifierOptions) {\n      return availableQualifiers;\n    }\n\n    return availableQualifiers.filter((qualifierName) => {\n      const options = effectiveContextOptions.qualifierOptions![qualifierName];\n      return options?.visible !== false;\n    });\n  }, [availableQualifiers, effectiveContextOptions?.qualifierOptions]);\n\n  // Get effective context values - contextValues already includes host values from the hook\n  const effectiveContextValues = useMemo(() => {\n    // contextValues from state already includes host values (it's effectiveContext from the hook)\n    // Don't double-apply host values here\n    return resolutionState?.contextValues || {};\n  }, [resolutionState?.contextValues]);\n\n  // Convert pending resources to PendingResource format for ResourcePicker\n  const pendingResourcesList = useMemo<PendingResource[]>(() => {\n    const pending: PendingResource[] = [];\n\n    // Add new pending resources\n    if (resolutionState?.pendingResources) {\n      resolutionState.pendingResources.forEach((resource, id) => {\n        pending.push({\n          id,\n          type: 'new',\n          resourceType: resource.resourceTypeName,\n          displayName: id // Use the resource ID as display name\n        });\n      });\n    }\n\n    // Add deleted resources\n    if (resolutionState?.pendingResourceDeletions) {\n      resolutionState.pendingResourceDeletions.forEach((id) => {\n        pending.push({\n          id,\n          type: 'deleted',\n          displayName: id\n        });\n      });\n    }\n\n    // Add edited resources\n    if (resolutionState?.editedResources) {\n      resolutionState.editedResources.forEach((_, id) => {\n        // Only add if not already in pending as new\n        if (!resolutionState.pendingResources?.has(id)) {\n          pending.push({\n            id,\n            type: 'modified',\n            displayName: id\n          });\n        }\n      });\n    }\n\n    return pending;\n  }, [\n    resolutionState?.pendingResources,\n    resolutionState?.pendingResourceDeletions,\n    resolutionState?.editedResources\n  ]);\n\n  // Handle resource selection from ResourcePicker\n  const handleResourceSelect = useCallback(\n    (selection: ResourceSelection) => {\n      if (selection.resourceId) {\n        resolutionActions?.selectResource(selection.resourceId);\n      }\n    },\n    [resolutionActions]\n  );\n\n  // Handle new resource creation\n  const handleStartNewResource = useCallback(() => {\n    resolutionActions?.startNewResource({ defaultTypeName: defaultResourceType });\n    setShowNewResourceModal(true);\n  }, [resolutionActions]);\n\n  const handleCloseNewResourceModal = useCallback(() => {\n    setShowNewResourceModal(false);\n    resolutionActions?.cancelNewResource();\n  }, [resolutionActions]);\n\n  const handleApplyPendingResources = useCallback(async () => {\n    await resolutionActions?.applyPendingResources();\n    if (onPendingResourcesApplied && resolutionState) {\n      const added = Array.from(resolutionState.pendingResources.values());\n      const deleted = Array.from(resolutionState.pendingResourceDeletions);\n      onPendingResourcesApplied(added, deleted);\n    }\n  }, [resolutionActions, resolutionState, onPendingResourcesApplied]);\n\n  // Automatically set locked view mode when provided\n  useEffect(() => {\n    if (lockedViewMode && resolutionActions?.setViewMode) {\n      resolutionActions.setViewMode(lockedViewMode);\n    }\n  }, [lockedViewMode, resolutionActions]);\n\n  // Handle view mode change\n  const handleViewModeChange = useCallback(\n    (mode: 'composed' | 'best' | 'all' | 'raw') => {\n      // Don't allow view mode changes when locked\n      if (!lockedViewMode) {\n        resolutionActions?.setViewMode(mode);\n      }\n    },\n    [resolutionActions, lockedViewMode]\n  );\n\n  if (!resources) {\n    return (\n      <div className={`p-6 ${className}`}>\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <MagnifyingGlassIcon className=\"h-8 w-8 text-blue-600\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">Resolution Viewer</h2>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">No Resources Loaded</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Import resources first to test resource resolution with different contexts.\n            </p>\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Resolution Viewer:</strong> Test how resources resolve with different qualifier\n                contexts. Set context values and see which candidates match.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`p-6 ${className}`}>\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <MagnifyingGlassIcon className=\"h-8 w-8 text-blue-600\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">Resolution Viewer</h2>\n        {isFilteringActive && (\n          <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n            Filtered\n          </span>\n        )}\n      </div>\n\n      {/* ResourcePicker Options Control */}\n      <ResourcePickerOptionsControl\n        options={currentPickerOptions}\n        onOptionsChange={setCurrentPickerOptions}\n        presentation={pickerOptionsPresentation}\n        title=\"Resolution Viewer Picker Options\"\n        className=\"mb-6\"\n      />\n\n      {/* ResolutionContext Options Control */}\n      <ResolutionContextOptionsControl\n        options={currentContextOptions}\n        onOptionsChange={setCurrentContextOptions}\n        availableQualifiers={availableQualifiers}\n        presentation={pickerOptionsPresentation}\n        title=\"Resolution Context Options\"\n        className=\"mb-6\"\n        allowResourceCreation={allowResourceCreationInternal}\n        onAllowResourceCreationChange={setAllowResourceCreationInternal}\n        showPendingResourcesInList={showPendingResourcesInListInternal}\n        onShowPendingResourcesInListChange={setShowPendingResourcesInListInternal}\n      />\n\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        {/* Context Configuration Panel */}\n        {effectiveContextOptions?.showContextControls !== false && (\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              {effectiveContextOptions?.contextPanelTitle || 'Context Configuration'}\n            </h3>\n            <div\n              className={`bg-gray-50 rounded-lg p-4 ${effectiveContextOptions?.contextPanelClassName || ''}`}\n            >\n              <div className=\"mb-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {visibleQualifiers.map((qualifierName) => {\n                    const qualifierOptions = effectiveContextOptions?.qualifierOptions?.[qualifierName];\n                    const hostManagedValue = effectiveContextOptions?.hostManagedValues?.[qualifierName];\n                    const globalPlaceholder =\n                      typeof effectiveContextOptions?.globalPlaceholder === 'function'\n                        ? effectiveContextOptions.globalPlaceholder(qualifierName)\n                        : effectiveContextOptions?.globalPlaceholder;\n\n                    // Merge host-managed values with qualifier options\n                    const mergedOptions = {\n                      ...qualifierOptions,\n                      // Host-managed values override qualifier-specific host values\n                      hostValue:\n                        hostManagedValue !== undefined ? hostManagedValue : qualifierOptions?.hostValue\n                    };\n\n                    return (\n                      <QualifierContextControl\n                        key={qualifierName}\n                        qualifierName={qualifierName}\n                        value={resolutionState?.pendingContextValues[qualifierName]}\n                        onChange={handleQualifierChange}\n                        placeholder={globalPlaceholder || `Enter ${qualifierName} value`}\n                        resources={activeProcessedResources}\n                        options={mergedOptions}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n\n              {effectiveContextOptions?.showCurrentContext !== false && (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-gray-600\">\n                    Current:{' '}\n                    {Object.entries(effectiveContextValues)\n                      .map(([key, value]) => `${key}=${value === undefined ? '(undefined)' : value}`)\n                      .join(', ')}\n                  </div>\n                  {effectiveContextOptions?.showContextActions !== false && (\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={resolutionActions?.resetCache}\n                        className=\"px-3 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                        title=\"Clear resolution cache\"\n                      >\n                        Clear Cache\n                      </button>\n                      <button\n                        onClick={() => resolutionActions?.applyContext()}\n                        disabled={!resolutionState?.hasPendingChanges}\n                        className={`px-4 py-2 rounded-md text-sm font-medium ${\n                          resolutionState?.hasPendingChanges\n                            ? 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                        }`}\n                      >\n                        {resolutionState?.hasPendingChanges\n                          ? 'Apply Changes'\n                          : resolutionState?.currentResolver\n                          ? 'Context Applied'\n                          : 'Apply Context'}\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Unified Change Controls - replaces separate edit/pending controls */}\n        {(resolutionState?.hasUnsavedEdits || resolutionState?.hasPendingResourceChanges) && (\n          <div className=\"mt-6\">\n            <UnifiedChangeControls\n              editCount={resolutionState?.editedResources?.size || 0}\n              addCount={resolutionState?.pendingResources?.size || 0}\n              deleteCount={resolutionState?.pendingResourceDeletions?.size || 0}\n              isApplying={resolutionState?.isApplyingEdits}\n              disabled={!resolutionState?.currentResolver}\n              onApplyAll={async () => {\n                await handleApplyPendingResources();\n              }}\n              onDiscardAll={() => {\n                resolutionActions?.discardEdits?.();\n                resolutionActions?.discardPendingResources?.();\n              }}\n            />\n          </div>\n        )}\n\n        {/* Main Browser/Details Layout */}\n        <div className=\"flex flex-col lg:flex-row gap-6 h-[600px]\">\n          {/* Left side: Resource Selection */}\n          <div className=\"lg:w-1/2 flex flex-col\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                {sectionTitles?.resources || 'Resources'}\n              </h3>\n              {allowResourceCreationInternal && (\n                <button\n                  onClick={handleStartNewResource}\n                  className=\"flex items-center space-x-1 px-3 py-1.5 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  title=\"Create a new resource\"\n                >\n                  <PlusIcon className=\"h-4 w-4\" />\n                  <span>Add Resource</span>\n                </button>\n              )}\n            </div>\n\n            <div className=\"flex-1\">\n              <ResourcePicker\n                resources={activeProcessedResources || null}\n                selectedResourceId={resolutionState?.selectedResourceId || null}\n                onResourceSelect={handleResourceSelect}\n                resourceAnnotations={resourceAnnotations}\n                pendingResources={showPendingResourcesInListInternal ? pendingResourcesList : undefined}\n                options={effectivePickerOptions}\n                onMessage={onMessage}\n              />\n            </div>\n          </div>\n\n          {/* Right side: Resolution Results */}\n          <div className=\"lg:w-1/2 flex flex-col\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                {sectionTitles?.results || 'Results'}\n                {lockedViewMode && (\n                  <span className=\"ml-2 inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\">\n                    {lockedViewMode.charAt(0).toUpperCase() + lockedViewMode.slice(1)} View\n                  </span>\n                )}\n              </h3>\n              {resolutionState?.selectedResourceId && !lockedViewMode && (\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleViewModeChange('composed')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'composed'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    Composed\n                  </button>\n                  <button\n                    onClick={() => handleViewModeChange('best')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'best'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    Best\n                  </button>\n                  <button\n                    onClick={() => handleViewModeChange('all')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'all'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    All\n                  </button>\n                  <button\n                    onClick={() => handleViewModeChange('raw')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'raw'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    Raw\n                  </button>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto border border-gray-200 rounded-lg p-4 bg-gray-50\">\n              {!resolutionState?.selectedResourceId ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center\">\n                    <CubeIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Select a resource to view resolution results</p>\n                  </div>\n                </div>\n              ) : !resolutionState?.currentResolver ? (\n                <div className=\"text-center text-gray-500\">\n                  <p>Apply a context to resolve resources</p>\n                </div>\n              ) : !resolutionState?.resolutionResult ? (\n                <div className=\"text-center text-gray-500\">\n                  <p>Resolving...</p>\n                </div>\n              ) : (\n                <ResolutionResults\n                  result={resolutionState.resolutionResult}\n                  viewMode={resolutionState.viewMode}\n                  contextValues={resolutionState.contextValues}\n                  resolutionActions={resolutionActions}\n                  resolutionState={resolutionState}\n                  resourceEditorFactory={resourceEditorFactory}\n                  onMessage={onMessage}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* New Resource Modal */}\n      {resolutionState?.newResourceDraft && (\n        <NewResourceModal\n          isOpen={showNewResourceModal}\n          onClose={handleCloseNewResourceModal}\n          resourceId={resolutionState.newResourceDraft.resourceId}\n          resourceType={resolutionState.newResourceDraft.resourceType}\n          availableResourceTypes={resolutionState.availableResourceTypes}\n          isValid={resolutionState.newResourceDraft.isValid}\n          defaultResourceType={defaultResourceType}\n          onUpdateResourceId={resolutionActions?.updateNewResourceId || (() => {})}\n          onSelectResourceType={resolutionActions?.selectResourceType || (() => {})}\n          onSave={resolutionActions?.saveNewResourceAsPending || (() => {})}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ResolutionView;\n"]}