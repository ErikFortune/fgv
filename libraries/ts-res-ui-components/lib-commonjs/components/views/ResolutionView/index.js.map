{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/views/ResolutionView/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport {\n  MagnifyingGlassIcon,\n  DocumentTextIcon,\n  CubeIcon,\n  CheckIcon,\n  XMarkIcon,\n  PencilIcon,\n  TrashIcon\n} from '@heroicons/react/24/outline';\nimport { ResolutionViewProps, CandidateInfo } from '../../../types';\n\nexport const ResolutionView: React.FC<ResolutionViewProps> = ({\n  resources,\n  filterState,\n  filterResult,\n  resolutionState,\n  resolutionActions,\n  availableQualifiers = [],\n  onMessage,\n  className = ''\n}) => {\n  // Use filtered resources when filtering is active and successful\n  const isFilteringActive = filterState?.enabled && filterResult?.success === true;\n  const activeProcessedResources = isFilteringActive\n    ? filterResult?.processedResources\n    : resources;\n\n  // Available resources for selection\n  const availableResources = useMemo(() => {\n    if (!activeProcessedResources?.summary?.resourceIds) {\n      return [];\n    }\n    return activeProcessedResources.summary.resourceIds.sort();\n  }, [activeProcessedResources?.summary?.resourceIds]);\n\n  // Get qualifier type information for form controls\n  const qualifierTypeInfo = useMemo(() => {\n    const info: Record<string, { hasEnumeratedValues: boolean; values?: string[] }> = {};\n    \n    // For the simplified version, we'll treat all qualifiers as text inputs\n    // In a more advanced version, this would examine the system configuration\n    availableQualifiers.forEach((qualifierName) => {\n      info[qualifierName] = { hasEnumeratedValues: false };\n    });\n    \n    return info;\n  }, [availableQualifiers]);\n\n  // Handle context value changes\n  const handleContextChange = useCallback((qualifierName: string, value: string | undefined) => {\n    resolutionActions?.updateContextValue(qualifierName, value);\n  }, [resolutionActions]);\n\n  // Handle resource selection\n  const handleResourceSelect = useCallback((resourceId: string) => {\n    resolutionActions?.selectResource(resourceId);\n  }, [resolutionActions]);\n\n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode: 'composed' | 'best' | 'all' | 'raw') => {\n    resolutionActions?.setViewMode(mode);\n  }, [resolutionActions]);\n\n  if (!resources) {\n    return (\n      <div className={`p-6 ${className}`}>\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <MagnifyingGlassIcon className=\"h-8 w-8 text-blue-600\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">Resolution Viewer</h2>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">No Resources Loaded</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Import resources first to test resource resolution with different contexts.\n            </p>\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Resolution Viewer:</strong> Test how resources resolve with different qualifier \n                contexts. Set context values and see which candidates match.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`p-6 ${className}`}>\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <MagnifyingGlassIcon className=\"h-8 w-8 text-blue-600\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">Resolution Viewer</h2>\n        {isFilteringActive && (\n          <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n            Filtered\n          </span>\n        )}\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        {/* Context Configuration Panel */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Context Configuration</h3>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"mb-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                {availableQualifiers.map((qualifierName) => {\n                  const typeInfo = qualifierTypeInfo[qualifierName];\n                  const currentValue = resolutionState?.pendingContextValues[qualifierName];\n\n                  return (\n                    <div key={qualifierName} className=\"bg-white rounded border border-gray-200 p-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"text-sm font-medium text-gray-700 min-w-0 flex-shrink-0\">\n                          {qualifierName}:\n                        </label>\n                        <div className=\"flex-1 flex items-center gap-1\">\n                          <input\n                            type=\"text\"\n                            value={currentValue ?? ''}\n                            onChange={(e) => handleContextChange(qualifierName, e.target.value || undefined)}\n                            className=\"flex-1 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm min-w-0\"\n                            placeholder={currentValue === undefined ? '(undefined)' : `Enter ${qualifierName} value`}\n                          />\n                          {currentValue !== undefined && (\n                            <button\n                              type=\"button\"\n                              onClick={() => handleContextChange(qualifierName, undefined)}\n                              className=\"px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded transition-colors\"\n                              title=\"Set to undefined\"\n                            >\n                              ✕\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-gray-600\">\n                Current:{' '}\n                {Object.entries(resolutionState?.contextValues || {})\n                  .map(([key, value]) => `${key}=${value === undefined ? '(undefined)' : value}`)\n                  .join(', ')}\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={resolutionActions?.resetCache}\n                  className=\"px-3 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                  title=\"Clear resolution cache\"\n                >\n                  Clear Cache\n                </button>\n                <button\n                  onClick={resolutionActions?.applyContext}\n                  disabled={!resolutionState?.hasPendingChanges}\n                  className={`px-4 py-2 rounded-md text-sm font-medium ${\n                    resolutionState?.hasPendingChanges\n                      ? 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  }`}\n                >\n                  {resolutionState?.hasPendingChanges\n                    ? 'Apply Changes'\n                    : resolutionState?.currentResolver\n                    ? 'Context Applied'\n                    : 'Apply Context'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Browser/Details Layout */}\n        <div className=\"flex flex-col lg:flex-row gap-6 h-[600px]\">\n          {/* Left side: Resource Selection */}\n          <div className=\"lg:w-1/2 flex flex-col\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Resources</h3>\n              <div className=\"text-sm text-gray-500\">{availableResources.length} available</div>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto border border-gray-200 rounded-lg bg-gray-50\">\n              {availableResources.map((resourceId) => (\n                <div\n                  key={resourceId}\n                  className={`flex items-center px-3 py-2 cursor-pointer hover:bg-gray-100 ${\n                    resolutionState?.selectedResourceId === resourceId ? 'bg-blue-50 border-r-2 border-blue-500' : ''\n                  }`}\n                  onClick={() => handleResourceSelect(resourceId)}\n                >\n                  <DocumentTextIcon className=\"w-4 h-4 mr-2 text-green-500\" />\n                  <span\n                    className={`text-sm ${\n                      resolutionState?.selectedResourceId === resourceId ? 'font-medium text-blue-900' : 'text-gray-700'\n                    }`}\n                  >\n                    {resourceId}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Right side: Resolution Results */}\n          <div className=\"lg:w-1/2 flex flex-col\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Results</h3>\n              {resolutionState?.selectedResourceId && (\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleViewModeChange('composed')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'composed' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    Composed\n                  </button>\n                  <button\n                    onClick={() => handleViewModeChange('best')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'best' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    Best\n                  </button>\n                  <button\n                    onClick={() => handleViewModeChange('all')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    All\n                  </button>\n                  <button\n                    onClick={() => handleViewModeChange('raw')}\n                    className={`px-3 py-1 text-xs rounded ${\n                      resolutionState?.viewMode === 'raw' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\n                    }`}\n                  >\n                    Raw\n                  </button>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto border border-gray-200 rounded-lg p-4 bg-gray-50\">\n              {!resolutionState?.selectedResourceId ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center\">\n                    <CubeIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Select a resource to view resolution results</p>\n                  </div>\n                </div>\n              ) : !resolutionState?.currentResolver ? (\n                <div className=\"text-center text-gray-500\">\n                  <p>Apply a context to resolve resources</p>\n                </div>\n              ) : !resolutionState?.resolutionResult ? (\n                <div className=\"text-center text-gray-500\">\n                  <p>Resolving...</p>\n                </div>\n              ) : (\n                <ResolutionResults\n                  result={resolutionState.resolutionResult}\n                  viewMode={resolutionState.viewMode}\n                  contextValues={resolutionState.contextValues}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Resolution Results Component (simplified version)\ninterface ResolutionResultsProps {\n  result: any;\n  viewMode: 'composed' | 'best' | 'all' | 'raw';\n  contextValues: Record<string, string | undefined>;\n}\n\nconst ResolutionResults: React.FC<ResolutionResultsProps> = ({\n  result,\n  viewMode,\n  contextValues\n}) => {\n  if (!result.success) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-red-800 mb-2\">Resolution Failed</h4>\n        <p className=\"text-sm text-red-600\">{result.error}</p>\n      </div>\n    );\n  }\n\n  if (viewMode === 'raw') {\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Raw Resolution Data</h4>\n          <pre className=\"text-xs bg-white p-3 rounded border overflow-x-auto\">\n            {JSON.stringify(\n              {\n                context: contextValues,\n                resource: result.resource\n                  ? {\n                      id: result.resource.id,\n                      candidateCount: result.resource.candidates.length\n                    }\n                  : null,\n                bestCandidate: result.bestCandidate?.json,\n                allCandidates: result.allCandidates?.map((c: any) => c.json),\n                composedValue: result.composedValue,\n                error: result.error\n              },\n              null,\n              2\n            )}\n          </pre>\n        </div>\n      </div>\n    );\n  }\n\n  if (viewMode === 'composed') {\n    return (\n      <div className=\"space-y-4\">\n        {result.composedValue ? (\n          <div className=\"bg-white p-3 rounded border\">\n            <h4 className=\"font-medium text-gray-800 mb-2\">Composed Resource Value</h4>\n            <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n              {JSON.stringify(result.composedValue, null, 2)}\n            </pre>\n          </div>\n        ) : (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded p-3\">\n            <p className=\"text-sm text-yellow-800\">No composed value available for the current context.</p>\n            {result.error && <p className=\"text-xs text-yellow-600 mt-1\">{result.error}</p>}\n          </div>\n        )}\n\n        {result.resource && (\n          <div>\n            <h4 className=\"font-medium text-gray-800 mb-2\">Resource Info</h4>\n            <div className=\"bg-white p-3 rounded border text-sm\">\n              <div><strong>ID:</strong> {result.resource.id}</div>\n              <div><strong>Type:</strong> {result.resource.resourceType.key}</div>\n              <div><strong>Total Candidates:</strong> {result.resource.candidates.length}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  if (viewMode === 'best') {\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Best Match</h4>\n          {result.bestCandidate ? (\n            <div className=\"bg-white p-3 rounded border border-green-200\">\n              <div className=\"text-sm font-medium text-gray-700 mb-2\">\n                Selected candidate for current context\n              </div>\n              <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n                {JSON.stringify(result.bestCandidate.json, null, 2)}\n              </pre>\n            </div>\n          ) : (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded p-3\">\n              <p className=\"text-sm text-yellow-800\">No best candidate found for the current context.</p>\n              {result.error && <p className=\"text-xs text-yellow-600 mt-1\">{result.error}</p>}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // 'all' view mode\n  const regularMatchingCandidates = result.candidateDetails?.filter((c: CandidateInfo) => c.matched && !c.isDefaultMatch) || [];\n  const defaultMatchingCandidates = result.candidateDetails?.filter((c: CandidateInfo) => c.matched && c.isDefaultMatch) || [];\n  const nonMatchingCandidates = result.candidateDetails?.filter((c: CandidateInfo) => !c.matched) || [];\n\n  const getMatchTypeColor = (type: string) => {\n    switch (type) {\n      case 'match': return 'bg-green-100 text-green-800';\n      case 'matchAsDefault': return 'bg-amber-100 text-amber-800';\n      case 'noMatch': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getMatchTypeIcon = (type: string) => {\n    switch (type) {\n      case 'match': return '✓';\n      case 'matchAsDefault': return '≈';\n      case 'noMatch': return '✗';\n      default: return '?';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Regular Matching Candidates */}\n      {regularMatchingCandidates.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Regular Matches</h4>\n          <div className=\"space-y-2\">\n            {regularMatchingCandidates.map((candidateInfo: CandidateInfo, index: number) => (\n              <div key={`regular-${candidateInfo.candidateIndex}`} className=\"bg-white p-3 rounded border border-green-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"text-sm font-medium text-gray-700 flex items-center space-x-2\">\n                    <span>Candidate {candidateInfo.candidateIndex + 1} {index === 0 ? '(Best Match)' : ''}</span>\n                    <span className={`px-2 py-1 rounded text-xs ${getMatchTypeColor(candidateInfo.matchType)}`}>\n                      {getMatchTypeIcon(candidateInfo.matchType)} {candidateInfo.matchType}\n                    </span>\n                  </div>\n                </div>\n                <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n                  {JSON.stringify(candidateInfo.candidate.json, null, 2)}\n                </pre>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Default Matching Candidates */}\n      {defaultMatchingCandidates.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Default Matches</h4>\n          <div className=\"space-y-2\">\n            {defaultMatchingCandidates.map((candidateInfo: CandidateInfo) => (\n              <div key={`default-${candidateInfo.candidateIndex}`} className=\"bg-white p-3 rounded border border-amber-200\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"text-sm font-medium text-gray-700 flex items-center space-x-2\">\n                    <span>Candidate {candidateInfo.candidateIndex + 1}</span>\n                    <span className={`px-2 py-1 rounded text-xs ${getMatchTypeColor(candidateInfo.matchType)}`}>\n                      {getMatchTypeIcon(candidateInfo.matchType)} {candidateInfo.matchType}\n                    </span>\n                  </div>\n                </div>\n                <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n                  {JSON.stringify(candidateInfo.candidate.json, null, 2)}\n                </pre>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Show message when no matches */}\n      {regularMatchingCandidates.length === 0 && defaultMatchingCandidates.length === 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Matching Candidates</h4>\n          <p className=\"text-sm text-gray-600\">No candidates matched the current context.</p>\n        </div>\n      )}\n\n      {/* Non-matching Candidates */}\n      {nonMatchingCandidates.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-500 mb-2\">Non-matching Candidates</h4>\n          <div className=\"space-y-2\">\n            {nonMatchingCandidates.slice(0, 3).map((candidateInfo: CandidateInfo) => (\n              <div key={`non-matching-${candidateInfo.candidateIndex}`} className=\"bg-gray-50 p-3 rounded border border-gray-200 opacity-75\">\n                <div className=\"text-sm font-medium text-gray-500 mb-2\">\n                  Candidate {candidateInfo.candidateIndex + 1}\n                </div>\n                <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-x-auto text-gray-600\">\n                  {JSON.stringify(candidateInfo.candidate.json, null, 2)}\n                </pre>\n              </div>\n            ))}\n            {nonMatchingCandidates.length > 3 && (\n              <div className=\"text-center text-sm text-gray-500\">\n                ... and {nonMatchingCandidates.length - 3} more non-matching candidates\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ResolutionView;"]}