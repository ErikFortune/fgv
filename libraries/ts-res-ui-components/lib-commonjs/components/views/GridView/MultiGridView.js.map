{"version":3,"file":"MultiGridView.js","sourceRoot":"","sources":["../../../../src/components/views/GridView/MultiGridView.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { TableCellsIcon } from '@heroicons/react/24/outline';\nimport { MultiGridViewProps, GridViewInitParams, ProcessedResources } from '../../../types';\nimport { selectResources } from '../../../utils/resourceSelector';\nimport { SharedContextControls } from './SharedContextControls';\nimport { GridSelector } from './GridSelector';\nimport { GridView } from './index';\nimport { UnifiedChangeControls } from '../ResolutionView/UnifiedChangeControls';\nimport { hasGridValidationErrors } from './EditableGridCell';\n\n/**\n * MultiGridView component for managing multiple grid instances with shared context.\n *\n * Provides a comprehensive interface for displaying multiple related grids that share\n * the same resolution context and batch operations. Perfect for administrative workflows\n * where users need to configure related data across multiple resource types.\n *\n * **Key Features:**\n * - **Multiple Grids**: Display multiple grid configurations with different resource selections\n * - **Shared Context**: Single context management that applies to all grids simultaneously\n * - **Unified Changes**: Batch operations work across all grids and resource types\n * - **Flexible Presentation**: Support for tabs, cards, accordion, and dropdown grid selection\n * - **Validation Integration**: Prevents batch operations when validation errors exist\n *\n * @example\n * ```tsx\n * import { MultiGridView } from '@fgv/ts-res-ui-components';\n *\n * // Configure multiple grids for admin workflow\n * const gridConfigurations = [\n *   {\n *     id: 'languages',\n *     title: 'Languages',\n *     description: 'Language configuration settings',\n *     resourceSelection: { type: 'resourceTypes', types: ['language-config'] },\n *     columnMapping: [{\n *       resourceType: 'language-config',\n *       columns: [\n *         { id: 'code', title: 'Code', dataPath: 'code' },\n *         { id: 'name', title: 'Name', dataPath: 'displayName', editable: true, cellType: 'string' },\n *         { id: 'enabled', title: 'Enabled', dataPath: 'enabled', editable: true, cellType: 'boolean' }\n *       ]\n *     }]\n *   },\n *   {\n *     id: 'payment-methods',\n *     title: 'Payment Methods',\n *     description: 'Payment method configuration',\n *     resourceSelection: { type: 'prefix', prefix: 'payment.methods.' },\n *     columnMapping: [{\n *       resourceType: 'payment-config',\n *       columns: [\n *         { id: 'method', title: 'Method', dataPath: 'method' },\n *         { id: 'enabled', title: 'Enabled', dataPath: 'enabled', editable: true, cellType: 'tristate' },\n *         { id: 'priority', title: 'Priority', dataPath: 'priority', editable: true, cellType: 'dropdown',\n *           dropdownOptions: [\n *             { value: 'high', label: 'High Priority' },\n *             { value: 'medium', label: 'Medium Priority' },\n *             { value: 'low', label: 'Low Priority' }\n *           ]\n *         }\n *       ]\n *     }]\n *   }\n * ];\n *\n * function AdminPanel() {\n *   return (\n *     <MultiGridView\n *       gridConfigurations={gridConfigurations}\n *       resources={processedResources}\n *       resolutionState={resolutionState}\n *       resolutionActions={resolutionActions}\n *       availableQualifiers={['country', 'language', 'environment']}\n *       contextOptions={{\n *         qualifierOptions: {\n *           country: { editable: true, placeholder: 'Select country...' },\n *           environment: { editable: false, hostValue: 'production' }\n *         },\n *         hostManagedValues: { environment: 'production' }\n *       }}\n *       tabsPresentation=\"tabs\"\n *       defaultActiveGrid=\"languages\"\n *     />\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const MultiGridView: React.FC<MultiGridViewProps> = ({\n  gridConfigurations,\n  resources,\n  resolutionState,\n  resolutionActions,\n  availableQualifiers = [],\n  contextOptions,\n  filterState,\n  filterResult,\n  tabsPresentation = 'tabs',\n  defaultActiveGrid,\n  allowGridReordering = false,\n  onMessage,\n  className = ''\n}) => {\n  // State for active grid\n  const [activeGridId, setActiveGridId] = useState(() => {\n    return defaultActiveGrid || gridConfigurations[0]?.id || '';\n  });\n\n  // Update active grid if default changes or configurations change\n  useEffect(() => {\n    if (defaultActiveGrid && defaultActiveGrid !== activeGridId) {\n      setActiveGridId(defaultActiveGrid);\n    } else if (!gridConfigurations.find((g) => g.id === activeGridId)) {\n      // Active grid no longer exists, switch to first available\n      setActiveGridId(gridConfigurations[0]?.id || '');\n    }\n  }, [defaultActiveGrid, activeGridId, gridConfigurations]);\n\n  // Get current grid configuration\n  const currentGridConfig = useMemo(() => {\n    return gridConfigurations.find((grid) => grid.id === activeGridId);\n  }, [gridConfigurations, activeGridId]);\n\n  // Use filtered resources when filtering is active and successful\n  const isFilteringActive = filterState?.enabled && filterResult?.success === true;\n  const baseProcessedResources = isFilteringActive ? filterResult?.processedResources : resources;\n\n  // Calculate total selected resources across all grids for summary\n  const totalResourceCounts = useMemo(() => {\n    if (!baseProcessedResources) return { total: 0, byGrid: new Map<string, number>() };\n\n    const byGrid = new Map<string, number>();\n    let total = 0;\n\n    gridConfigurations.forEach((gridConfig) => {\n      const selectionResult = selectResources(gridConfig.resourceSelection, baseProcessedResources);\n      const count = selectionResult.isSuccess() ? selectionResult.value.length : 0;\n      byGrid.set(gridConfig.id, count);\n      total += count;\n    });\n\n    return { total, byGrid };\n  }, [baseProcessedResources, gridConfigurations]);\n\n  // Handle grid changes\n  const handleGridChange = useCallback((gridId: string) => {\n    setActiveGridId(gridId);\n  }, []);\n\n  // Enhanced apply handler that checks for validation errors\n  const handleApplyPendingResources = useCallback(async () => {\n    // Check for validation errors before applying\n    if (hasGridValidationErrors()) {\n      onMessage?.(\n        'warning',\n        'Cannot apply changes: There are validation errors in the grid. Please fix them first.'\n      );\n      return;\n    }\n\n    await resolutionActions?.applyPendingResources();\n  }, [resolutionActions, onMessage]);\n\n  // Enhanced discard handler\n  const handleDiscardAll = useCallback(() => {\n    resolutionActions?.discardEdits?.();\n    resolutionActions?.discardPendingResources?.();\n    // Clear validation errors when discarding\n    import('./EditableGridCell').then((module) => {\n      module.clearAllGridValidationErrors();\n    });\n  }, [resolutionActions]);\n\n  if (!resources) {\n    return (\n      <div className={`p-6 ${className}`}>\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <TableCellsIcon className=\"h-8 w-8 text-blue-600\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">Multi-Grid Resource Manager</h2>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">No Resources Loaded</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Import resources first to manage them across multiple specialized grid views.\n            </p>\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Multi-Grid View:</strong> Manage related resources across multiple grids with shared\n                context and batch operations. Perfect for administrative workflows.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (gridConfigurations.length === 0) {\n    return (\n      <div className={`p-6 ${className}`}>\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <TableCellsIcon className=\"h-8 w-8 text-blue-600\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">Multi-Grid Resource Manager</h2>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">No Grid Configurations</h3>\n            <p className=\"text-gray-600\">\n              Configure grid definitions to display and manage your resources in specialized views.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`p-6 ${className}`}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <TableCellsIcon className=\"h-8 w-8 text-blue-600\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">Multi-Grid Resource Manager</h2>\n          {isFilteringActive && (\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n              Filtered\n            </span>\n          )}\n        </div>\n\n        <div className=\"text-sm text-gray-600\">\n          <span className=\"font-medium\">{totalResourceCounts.total}</span> resources across{' '}\n          <span className=\"font-medium\">{gridConfigurations.length}</span> grid\n          {gridConfigurations.length !== 1 ? 's' : ''}\n        </div>\n      </div>\n\n      {/* Shared Context Controls */}\n      <SharedContextControls\n        availableQualifiers={availableQualifiers}\n        resolutionState={resolutionState}\n        resolutionActions={resolutionActions}\n        contextOptions={contextOptions}\n        resources={baseProcessedResources}\n        className=\"mb-6\"\n      />\n\n      {/* Grid Selector */}\n      <GridSelector\n        gridConfigurations={gridConfigurations}\n        activeGridId={activeGridId}\n        onGridChange={handleGridChange}\n        presentation={tabsPresentation}\n        allowReordering={allowGridReordering}\n        className=\"mb-6\"\n      />\n\n      {/* Active Grid Display */}\n      {currentGridConfig && (\n        <div className=\"mb-6\">\n          <GridView\n            gridConfig={currentGridConfig}\n            resources={baseProcessedResources}\n            resolutionState={resolutionState}\n            resolutionActions={resolutionActions}\n            availableQualifiers={availableQualifiers}\n            contextOptions={contextOptions}\n            filterState={filterState}\n            filterResult={filterResult}\n            showContextControls={false} // Context is managed at the multi-grid level\n            showChangeControls={false} // Change controls are managed at the multi-grid level\n            onMessage={onMessage}\n          />\n        </div>\n      )}\n\n      {/* Unified Change Controls for all grids */}\n      {(resolutionState?.hasUnsavedEdits || resolutionState?.hasPendingResourceChanges) && (\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <UnifiedChangeControls\n            editCount={resolutionState?.editedResources?.size || 0}\n            addCount={resolutionState?.pendingResources?.size || 0}\n            deleteCount={resolutionState?.pendingResourceDeletions?.size || 0}\n            isApplying={resolutionState?.isApplyingEdits}\n            disabled={!resolutionState?.currentResolver}\n            onApplyAll={handleApplyPendingResources}\n            onDiscardAll={handleDiscardAll}\n          />\n\n          {/* Validation warning */}\n          {hasGridValidationErrors() && (\n            <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n              <div className=\"text-sm text-yellow-800\">\n                <strong>Validation Errors:</strong> Some fields have validation errors. Please review and fix\n                them before applying changes.\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MultiGridView;\n"]}