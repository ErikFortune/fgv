{"version":3,"file":"EditableGridCell.js","sourceRoot":"","sources":["../../../../src/components/views/GridView/EditableGridCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { GridColumnDefinition, ResolutionActions, ResolutionState } from '../../../types';\nimport { GridValidationState } from '../../../utils/cellValidation';\nimport { StringCell, BooleanCell, TriStateCell, DropdownCell } from './cells';\n\n/**\n * Prevent prototype pollution by disallowing dangerous keys.\n */\nfunction isSafeKey(key: string): boolean {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n}\n\n/**\n * Props for the EditableGridCell component.\n */\nexport interface EditableGridCellProps {\n  /** The extracted value for this cell */\n  value: JsonValue;\n  /** The resource ID for this row */\n  resourceId: string;\n  /** The column definition for this cell */\n  column: GridColumnDefinition;\n  /** The complete resolved resource value */\n  resolvedValue: JsonValue;\n  /** Whether this cell has been edited */\n  isEdited: boolean;\n  /** Resolution actions for editing integration */\n  resolutionActions?: ResolutionActions;\n  /** Resolution state for edit tracking */\n  resolutionState?: ResolutionState;\n  /** Callback for displaying messages */\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Global validation state for grid cells.\n * In a real implementation, this would be managed at the grid level.\n */\nconst globalValidationState = new GridValidationState();\n\n/**\n * EditableGridCell component that provides editing capabilities for grid cells.\n * @public\n *\n * Automatically selects the appropriate cell editor based on the column configuration\n * and integrates with the existing ResolutionActions for batch editing support.\n * Supports validation with visual feedback and prevents invalid changes from being saved.\n *\n * @example\n * ```tsx\n * <EditableGridCell\n *   value=\"user@example.com\"\n *   resourceId=\"user-123\"\n *   column={{\n *     id: 'email',\n *     cellType: 'string',\n *     validation: { required: true, pattern: /email-pattern/ }\n *   }}\n *   resolvedValue={{ email: 'user@example.com', name: 'John' }}\n *   isEdited={false}\n *   resolutionActions={actions}\n *   resolutionState={state}\n * />\n * ```\n */\nexport const EditableGridCell: React.FC<EditableGridCellProps> = ({\n  value,\n  resourceId,\n  column,\n  resolvedValue,\n  isEdited,\n  resolutionActions,\n  resolutionState,\n  onMessage,\n  className = ''\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentValidationError, setCurrentValidationError] = useState<string | null>(null);\n\n  // Check if editing is disabled\n  const isDisabled = useMemo(() => {\n    return resolutionState?.isApplyingEdits || !resolutionActions;\n  }, [resolutionState?.isApplyingEdits, resolutionActions]);\n\n  // Get current edited value if any\n  const editedValue = useMemo(() => {\n    return resolutionActions?.getEditedValue?.(resourceId);\n  }, [resolutionActions, resourceId]);\n\n  // Extract field-specific value from edited object using the same logic as ResourceGrid\n  const extractedEditedValue = useMemo(() => {\n    if (editedValue === undefined) return undefined;\n\n    // Use the same extractValueByPath logic as ResourceGrid\n    const dataPath = column.dataPath;\n    if (typeof dataPath === 'string') {\n      return (editedValue as any)?.[dataPath];\n    }\n\n    if (Array.isArray(dataPath)) {\n      let current = editedValue;\n      for (const segment of dataPath) {\n        if (current == null) return undefined;\n        current = (current as any)[segment];\n      }\n      return current;\n    }\n\n    return undefined;\n  }, [editedValue, column.dataPath]);\n\n  // Determine the display value (edited field value takes precedence)\n  const displayValue = useMemo(() => {\n    return extractedEditedValue !== undefined ? extractedEditedValue : value;\n  }, [extractedEditedValue, value]);\n\n  // Start editing\n  const handleStartEdit = useCallback(() => {\n    if (isDisabled || !column.editable) return;\n    setIsEditing(true);\n  }, [isDisabled, column.editable]);\n\n  // Cancel editing\n  const handleCancel = useCallback(() => {\n    setIsEditing(false);\n    setCurrentValidationError(null);\n    globalValidationState.clearCell(resourceId, column.id);\n  }, [resourceId, column.id]);\n\n  // Save changes\n  const handleSave = useCallback(\n    (newValue: JsonValue) => {\n      if (!resolutionActions?.saveEdit) {\n        onMessage?.('error', 'Unable to save: no edit actions available');\n        return;\n      }\n\n      // Check for validation errors before saving\n      if (currentValidationError) {\n        onMessage?.('warning', `Cannot save: ${currentValidationError}`);\n        return;\n      }\n\n      // Create updated object by setting only the specific field identified by dataPath\n      // Ensure resolvedValue is an object before spreading it\n      const baseObject =\n        resolvedValue && typeof resolvedValue === 'object' && !Array.isArray(resolvedValue)\n          ? resolvedValue\n          : {};\n      const updatedObject = { ...baseObject } as Record<string, JsonValue>;\n\n      // Handle both string and array data paths\n      const dataPath = column.dataPath;\n      if (typeof dataPath === 'string') {\n        if (isSafeKey(dataPath)) {\n          updatedObject[dataPath] = newValue;\n        } else {\n          onMessage?.('error', `Invalid field name: \"${dataPath}\"`);\n          return;\n        }\n      } else if (Array.isArray(dataPath) && dataPath.length > 0) {\n        // For nested paths, we need to deep update\n        let current = updatedObject;\n        for (let i = 0; i < dataPath.length - 1; i++) {\n          const segment = dataPath[i];\n          if (!isSafeKey(segment)) {\n            onMessage?.('error', `Invalid nested field name: \"${segment}\"`);\n            return;\n          }\n          if (current[segment] == null || typeof current[segment] !== 'object') {\n            current[segment] = {};\n          }\n          current = current[segment] as Record<string, JsonValue>;\n        }\n        const lastSegment = dataPath[dataPath.length - 1];\n        if (isSafeKey(lastSegment)) {\n          current[lastSegment] = newValue;\n        } else {\n          onMessage?.('error', `Invalid nested field name: \"${lastSegment}\"`);\n          return;\n        }\n      }\n\n      // Save the edit using existing resolution actions with the complete updated object\n      const saveResult = resolutionActions.saveEdit(resourceId, updatedObject, resolvedValue);\n\n      if (saveResult.isSuccess()) {\n        setIsEditing(false);\n        setCurrentValidationError(null);\n        globalValidationState.clearCell(resourceId, column.id);\n        onMessage?.('success', `Updated ${column.title} for ${resourceId}`);\n      } else {\n        onMessage?.('error', `Failed to save: ${saveResult.message}`);\n      }\n    },\n    [\n      resolutionActions,\n      resourceId,\n      resolvedValue,\n      column.dataPath,\n      column.id,\n      column.title,\n      currentValidationError,\n      onMessage\n    ]\n  );\n\n  // Handle value changes during editing\n  const handleChange = useCallback((newValue: JsonValue) => {\n    // Value changes are handled by the individual cell components\n    // This is mainly for consistency with the cell component APIs\n  }, []);\n\n  // Handle validation changes\n  const handleValidationChange = useCallback(\n    (error: string | null) => {\n      setCurrentValidationError(error);\n      globalValidationState.setCellError(resourceId, column.id, error);\n    },\n    [resourceId, column.id]\n  );\n\n  // Select appropriate cell editor based on column configuration\n  const renderCell = () => {\n    // Use custom cell editor if provided\n    if (column.cellEditor) {\n      const CustomEditor = column.cellEditor;\n      return (\n        <CustomEditor\n          value={displayValue}\n          resourceId={resourceId}\n          column={column}\n          resolvedValue={resolvedValue}\n          isEdited={isEdited}\n          editedValue={editedValue}\n          onSave={handleSave}\n          onCancel={handleCancel}\n          disabled={isDisabled}\n          className={className}\n        />\n      );\n    }\n\n    // Select built-in cell editor based on cellType\n    const cellType = column.cellType || 'string';\n\n    switch (cellType) {\n      case 'string':\n        return (\n          <StringCell\n            value={displayValue}\n            resourceId={resourceId}\n            column={column}\n            isEditing={isEditing}\n            disabled={isDisabled}\n            onChange={handleChange}\n            onStartEdit={handleStartEdit}\n            onCancel={handleCancel}\n            onSave={handleSave}\n            onValidationChange={handleValidationChange}\n          />\n        );\n\n      case 'boolean':\n        return (\n          <BooleanCell\n            value={displayValue}\n            resourceId={resourceId}\n            column={column}\n            disabled={isDisabled}\n            onChange={handleChange}\n            onSave={handleSave}\n            onValidationChange={handleValidationChange}\n          />\n        );\n\n      case 'tristate':\n        return (\n          <TriStateCell\n            value={displayValue}\n            resourceId={resourceId}\n            column={column}\n            disabled={isDisabled}\n            presentation={column.triStatePresentation}\n            labels={column.triStateLabels}\n            onChange={handleChange}\n            onSave={handleSave}\n            onValidationChange={handleValidationChange}\n          />\n        );\n\n      case 'dropdown':\n        return (\n          <DropdownCell\n            value={displayValue}\n            resourceId={resourceId}\n            column={column}\n            isEditing={isEditing}\n            disabled={isDisabled}\n            onChange={handleChange}\n            onStartEdit={handleStartEdit}\n            onCancel={handleCancel}\n            onSave={handleSave}\n            onValidationChange={handleValidationChange}\n          />\n        );\n\n      case 'custom':\n        // Custom cell type but no custom editor provided - fall back to string\n        return (\n          <StringCell\n            value={displayValue}\n            resourceId={resourceId}\n            column={column}\n            isEditing={isEditing}\n            disabled={isDisabled}\n            onChange={handleChange}\n            onStartEdit={handleStartEdit}\n            onCancel={handleCancel}\n            onSave={handleSave}\n            onValidationChange={handleValidationChange}\n          />\n        );\n\n      default:\n        // Fallback to string cell\n        return (\n          <StringCell\n            value={displayValue}\n            resourceId={resourceId}\n            column={column}\n            isEditing={isEditing}\n            disabled={isDisabled}\n            onChange={handleChange}\n            onStartEdit={handleStartEdit}\n            onCancel={handleCancel}\n            onSave={handleSave}\n            onValidationChange={handleValidationChange}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      {renderCell()}\n      {currentValidationError && <div className=\"absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full\" />}\n    </div>\n  );\n};\n\n/**\n * Utility function to check if the grid has validation errors.\n * This prevents batch operations when there are invalid values.\n * @public\n */\nexport const hasGridValidationErrors = (): boolean => {\n  return globalValidationState.hasErrors;\n};\n\n/**\n * Utility function to get all current validation errors.\n * Useful for displaying validation summaries or debugging.\n * @public\n */\nexport const getAllGridValidationErrors = () => {\n  return globalValidationState.getAllErrors();\n};\n\n/**\n * Utility function to clear all grid validation errors.\n * Should be called when the grid is reset or data is reloaded.\n * @public\n */\nexport const clearAllGridValidationErrors = (): void => {\n  globalValidationState.clearAll();\n};\n\nexport default EditableGridCell;\n"]}