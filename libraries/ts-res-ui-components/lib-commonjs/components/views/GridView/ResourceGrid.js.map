{"version":3,"file":"ResourceGrid.js","sourceRoot":"","sources":["../../../../src/components/views/GridView/ResourceGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useCallback } from 'react';\nimport { ChevronUpIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\nimport {\n  GridViewInitParams,\n  ResolutionResult,\n  ResolutionActions,\n  ResolutionState,\n  GridColumnDefinition,\n  ResourceTypeColumnMapping,\n  GridCellProps\n} from '../../../types';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { EditableGridCell } from './EditableGridCell';\n\n/**\n * Props for the ResourceGrid component.\n */\ninterface ResourceGridProps {\n  /** Grid configuration defining columns and display options */\n  gridConfig: GridViewInitParams;\n  /** Array of resource IDs to display in the grid */\n  selectedResourceIds: string[];\n  /** Map of resource resolutions for grid display */\n  resourceResolutions: Map<string, ResolutionResult>;\n  /** Resolution actions for editing integration */\n  resolutionActions?: ResolutionActions;\n  /** Resolution state for edit tracking */\n  resolutionState?: ResolutionState;\n  /** Callback for displaying messages */\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void;\n}\n\n/**\n * Utility function to extract a value from an object using a path.\n * Supports both string paths (simple property) and array paths (nested properties).\n */\nfunction extractValueByPath(obj: any, path: string | string[]): JsonValue | undefined {\n  if (typeof path === 'string') {\n    return obj?.[path];\n  }\n\n  if (Array.isArray(path)) {\n    let current = obj;\n    for (const segment of path) {\n      if (current == null) return undefined;\n      current = current[segment];\n    }\n    return current;\n  }\n\n  return undefined;\n}\n\n/**\n * Component for rendering a basic grid cell.\n */\nconst GridCell: React.FC<GridCellProps> = ({\n  value,\n  resourceId,\n  column,\n  resolvedValue,\n  isEdited,\n  className = ''\n}) => {\n  // Use custom renderer if provided\n  if (column.cellRenderer) {\n    const CustomRenderer = column.cellRenderer;\n    return (\n      <CustomRenderer\n        value={value}\n        resourceId={resourceId}\n        column={column}\n        resolvedValue={resolvedValue}\n        isEdited={isEdited}\n        className={className}\n      />\n    );\n  }\n\n  // Default rendering based on value type\n  const displayValue = useMemo(() => {\n    if (value === null) return 'null';\n    if (value === undefined) return 'undefined';\n    if (typeof value === 'string') return value;\n    if (typeof value === 'number' || typeof value === 'boolean') return String(value);\n\n    // For objects/arrays, show a compact JSON representation\n    try {\n      const jsonStr = JSON.stringify(value);\n      return jsonStr.length > 100 ? `${jsonStr.substring(0, 100)}...` : jsonStr;\n    } catch {\n      return String(value);\n    }\n  }, [value]);\n\n  return (\n    <div className={`px-3 py-2 text-sm ${isEdited ? 'bg-blue-50' : ''} ${className}`}>\n      {displayValue}\n      {isEdited && (\n        <span className=\"ml-1 inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n          edited\n        </span>\n      )}\n    </div>\n  );\n};\n\n/**\n * Main ResourceGrid component for displaying resources in a table format.\n *\n * @example\n * ```tsx\n * <ResourceGrid\n *   gridConfig={gridConfig}\n *   selectedResourceIds={['user.welcome', 'user.goodbye']}\n *   resourceResolutions={resolutionMap}\n *   resolutionActions={actions}\n *   resolutionState={state}\n * />\n * ```\n *\n * @public\n */\nexport const ResourceGrid: React.FC<ResourceGridProps> = ({\n  gridConfig,\n  selectedResourceIds,\n  resourceResolutions,\n  resolutionActions,\n  resolutionState,\n  onMessage\n}) => {\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  // Build column definitions for all resources\n  const allColumns = useMemo(() => {\n    const columnMap = new Map<string, GridColumnDefinition>();\n    const mappingMap = new Map<string, ResourceTypeColumnMapping>();\n\n    // Index column mappings by resource type\n    gridConfig.columnMapping.forEach((mapping) => {\n      mappingMap.set(mapping.resourceType, mapping);\n    });\n\n    // For each resource, determine its type and get appropriate columns\n    selectedResourceIds.forEach((resourceId) => {\n      const resolution = resourceResolutions.get(resourceId);\n      if (!resolution?.success || !resolution.resource) return;\n\n      const resourceType = resolution.resource.resourceType.key;\n      const mapping = mappingMap.get(resourceType);\n\n      if (mapping) {\n        mapping.columns.forEach((col) => {\n          if (!columnMap.has(col.id)) {\n            columnMap.set(col.id, col);\n          }\n        });\n      } else if (gridConfig.columnMapping[0]?.defaultColumn) {\n        // Use default column if no specific mapping found\n        const defaultCol = gridConfig.columnMapping[0].defaultColumn;\n        columnMap.set(defaultCol.id, defaultCol);\n      }\n    });\n\n    return Array.from(columnMap.values());\n  }, [gridConfig.columnMapping, selectedResourceIds, resourceResolutions]);\n\n  // Extract and sort grid data\n  const gridData = useMemo(() => {\n    const rows = selectedResourceIds\n      .map((resourceId) => {\n        const resolution = resourceResolutions.get(resourceId);\n        const isEdited = resolutionActions?.hasEdit?.(resourceId) || false;\n\n        return {\n          resourceId,\n          resolution,\n          isEdited,\n          values: new Map<string, JsonValue>()\n        };\n      })\n      .filter((row) => row.resolution?.success);\n\n    // Extract values for each column\n    rows.forEach((row) => {\n      if (!row.resolution?.success) return;\n\n      allColumns.forEach((column) => {\n        const value = extractValueByPath(row.resolution!.composedValue, column.dataPath) ?? null;\n        row.values.set(column.id, value);\n      });\n    });\n\n    // Apply sorting if configured\n    if (sortColumn && gridConfig.presentationOptions?.enableSorting !== false) {\n      rows.sort((a, b) => {\n        const aValue = a.values.get(sortColumn);\n        const bValue = b.values.get(sortColumn);\n\n        // Handle null/undefined values\n        if (aValue == null && bValue == null) return 0;\n        if (aValue == null) return 1;\n        if (bValue == null) return -1;\n\n        // Compare values\n        let comparison = 0;\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          comparison = aValue.localeCompare(bValue);\n        } else if (typeof aValue === 'number' && typeof bValue === 'number') {\n          comparison = aValue - bValue;\n        } else {\n          // Fallback to string comparison\n          comparison = String(aValue).localeCompare(String(bValue));\n        }\n\n        return sortDirection === 'desc' ? -comparison : comparison;\n      });\n    }\n\n    return rows;\n  }, [\n    selectedResourceIds,\n    resourceResolutions,\n    allColumns,\n    sortColumn,\n    sortDirection,\n    resolutionActions,\n    gridConfig.presentationOptions\n  ]);\n\n  // Handle column sorting\n  const handleSort = useCallback(\n    (columnId: string) => {\n      if (!gridConfig.presentationOptions?.enableSorting) return;\n\n      const column = allColumns.find((col) => col.id === columnId);\n      if (!column?.sortable) return;\n\n      if (sortColumn === columnId) {\n        setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'));\n      } else {\n        setSortColumn(columnId);\n        setSortDirection('asc');\n      }\n    },\n    [allColumns, sortColumn, gridConfig.presentationOptions]\n  );\n\n  if (selectedResourceIds.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-gray-500\">\n          <p className=\"text-lg font-medium mb-2\">No Resources Selected</p>\n          <p className=\"text-sm\">\n            This grid configuration selected no resources. Check your resource selection criteria.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (allColumns.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-gray-500\">\n          <p className=\"text-lg font-medium mb-2\">No Columns Configured</p>\n          <p className=\"text-sm\">\n            No column mappings found for the selected resource types. Configure column mappings in the grid\n            configuration.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const enableSorting = gridConfig.presentationOptions?.enableSorting !== false;\n  const showRowNumbers = gridConfig.presentationOptions?.showRowNumbers || false;\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"bg-gray-50\">\n          <tr>\n            {showRowNumbers && (\n              <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                #\n              </th>\n            )}\n            <th className=\"px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Resource ID\n            </th>\n            {allColumns.map((column) => (\n              <th\n                key={column.id}\n                className={`px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${\n                  enableSorting && column.sortable ? 'cursor-pointer hover:bg-gray-100' : ''\n                }`}\n                style={column.width ? { width: column.width } : undefined}\n                onClick={() => enableSorting && column.sortable && handleSort(column.id)}\n              >\n                <div className=\"flex items-center space-x-1\">\n                  <span>{column.title}</span>\n                  {enableSorting && column.sortable && (\n                    <div className=\"flex flex-col\">\n                      <ChevronUpIcon\n                        className={`h-3 w-3 ${\n                          sortColumn === column.id && sortDirection === 'asc'\n                            ? 'text-blue-600'\n                            : 'text-gray-400'\n                        }`}\n                      />\n                      <ChevronDownIcon\n                        className={`h-3 w-3 -mt-1 ${\n                          sortColumn === column.id && sortDirection === 'desc'\n                            ? 'text-blue-600'\n                            : 'text-gray-400'\n                        }`}\n                      />\n                    </div>\n                  )}\n                </div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {gridData.map((row, index) => (\n            <tr key={row.resourceId} className={`${row.isEdited ? 'bg-blue-25' : 'hover:bg-gray-50'}`}>\n              {showRowNumbers && (\n                <td className=\"px-3 py-2 whitespace-nowrap text-sm text-gray-500\">{index + 1}</td>\n              )}\n              <td className=\"px-3 py-2 whitespace-nowrap text-sm font-medium text-gray-900\">\n                {row.resourceId}\n                {row.isEdited && (\n                  <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                    edited\n                  </span>\n                )}\n              </td>\n              {allColumns.map((column) => {\n                const value = row.values.get(column.id) ?? null;\n                const isEdited = resolutionActions?.hasEdit?.(row.resourceId) || false;\n\n                if (column.editable) {\n                  return (\n                    <td key={column.id} className=\"px-0 py-0\">\n                      <EditableGridCell\n                        value={value}\n                        resourceId={row.resourceId}\n                        column={column}\n                        resolvedValue={row.resolution?.composedValue || null}\n                        isEdited={isEdited}\n                        resolutionActions={resolutionActions}\n                        resolutionState={resolutionState}\n                        onMessage={onMessage}\n                      />\n                    </td>\n                  );\n                } else {\n                  return (\n                    <td key={column.id} className=\"px-0 py-0\">\n                      <GridCell\n                        value={value}\n                        resourceId={row.resourceId}\n                        column={column}\n                        resolvedValue={row.resolution?.composedValue || null}\n                        isEdited={isEdited}\n                      />\n                    </td>\n                  );\n                }\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {gridData.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"text-gray-500\">\n            <p className=\"text-lg font-medium mb-2\">No Data Available</p>\n            <p className=\"text-sm\">Selected resources could not be resolved with the current context.</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ResourceGrid;\n"]}