{"version":3,"file":"GridSelector.js","sourceRoot":"","sources":["../../../../src/components/views/GridView/GridSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { ChevronDownIcon } from '@heroicons/react/24/outline';\nimport { GridViewInitParams } from '../../../types';\n\n/**\n * Props for the GridSelector component.\n */\nexport interface GridSelectorProps {\n  /** Available grid configurations */\n  gridConfigurations: GridViewInitParams[];\n  /** ID of the currently active grid */\n  activeGridId: string;\n  /** Callback when the active grid changes */\n  onGridChange: (gridId: string) => void;\n  /** How to present the grid selector */\n  presentation?: 'tabs' | 'cards' | 'accordion' | 'dropdown';\n  /** Whether users can reorder grid tabs */\n  allowReordering?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * GridSelector component for switching between multiple grid configurations.\n *\n * Provides different presentation modes for selecting which grid to display,\n * supporting tabs, cards, accordion, and dropdown interfaces. Enables users\n * to quickly switch between different views of their resource data.\n *\n * @example\n * ```tsx\n * <GridSelector\n *   gridConfigurations={[\n *     { id: 'users', title: 'User Data', ... },\n *     { id: 'products', title: 'Product Catalog', ... }\n *   ]}\n *   activeGridId=\"users\"\n *   presentation=\"tabs\"\n *   onGridChange={setActiveGridId}\n * />\n * ```\n * @public\n */\nexport const GridSelector: React.FC<GridSelectorProps> = ({\n  gridConfigurations,\n  activeGridId,\n  onGridChange,\n  presentation = 'tabs',\n  allowReordering = false,\n  className = ''\n}) => {\n  const handleGridSelect = useCallback(\n    (gridId: string) => {\n      if (gridId !== activeGridId) {\n        onGridChange(gridId);\n      }\n    },\n    [activeGridId, onGridChange]\n  );\n\n  const activeGrid = gridConfigurations.find((grid) => grid.id === activeGridId);\n\n  if (gridConfigurations.length === 0) {\n    return null;\n  }\n\n  if (gridConfigurations.length === 1) {\n    // Single grid - show just the title\n    const grid = gridConfigurations[0];\n    return (\n      <div className={`mb-6 ${className}`}>\n        <h3 className=\"text-lg font-semibold text-gray-900\">{grid.title}</h3>\n        {grid.description && <p className=\"text-sm text-gray-600 mt-1\">{grid.description}</p>}\n      </div>\n    );\n  }\n\n  switch (presentation) {\n    case 'tabs':\n      return (\n        <div className={`mb-6 ${className}`}>\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8\" aria-label=\"Grid selector\">\n              {gridConfigurations.map((grid) => {\n                const isActive = grid.id === activeGridId;\n                return (\n                  <button\n                    key={grid.id}\n                    onClick={() => handleGridSelect(grid.id)}\n                    className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                      isActive\n                        ? 'border-blue-500 text-blue-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    {grid.title}\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n          {activeGrid?.description && (\n            <div className=\"mt-3\">\n              <p className=\"text-sm text-gray-600\">{activeGrid.description}</p>\n            </div>\n          )}\n        </div>\n      );\n\n    case 'cards':\n      return (\n        <div className={`mb-6 ${className}`}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {gridConfigurations.map((grid) => {\n              const isActive = grid.id === activeGridId;\n              return (\n                <button\n                  key={grid.id}\n                  onClick={() => handleGridSelect(grid.id)}\n                  className={`p-4 text-left rounded-lg border-2 transition-colors ${\n                    isActive\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 bg-white hover:border-gray-300 hover:bg-gray-50'\n                  }`}\n                >\n                  <h4 className={`font-medium ${isActive ? 'text-blue-900' : 'text-gray-900'}`}>\n                    {grid.title}\n                  </h4>\n                  {grid.description && (\n                    <p className={`mt-1 text-sm ${isActive ? 'text-blue-700' : 'text-gray-600'}`}>\n                      {grid.description}\n                    </p>\n                  )}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      );\n\n    case 'dropdown':\n      return (\n        <div className={`mb-6 ${className}`}>\n          <div className=\"flex items-center space-x-4\">\n            <label htmlFor=\"grid-selector\" className=\"text-sm font-medium text-gray-700\">\n              Grid View:\n            </label>\n            <div className=\"relative\">\n              <select\n                id=\"grid-selector\"\n                value={activeGridId}\n                onChange={(e) => handleGridSelect(e.target.value)}\n                className=\"appearance-none bg-white border border-gray-300 rounded-md px-3 py-2 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {gridConfigurations.map((grid) => (\n                  <option key={grid.id} value={grid.id}>\n                    {grid.title}\n                  </option>\n                ))}\n              </select>\n              <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <ChevronDownIcon className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </div>\n          </div>\n          {activeGrid?.description && (\n            <div className=\"mt-3\">\n              <p className=\"text-sm text-gray-600\">{activeGrid.description}</p>\n            </div>\n          )}\n        </div>\n      );\n\n    case 'accordion':\n      return (\n        <div className={`mb-6 space-y-2 ${className}`}>\n          {gridConfigurations.map((grid) => {\n            const isActive = grid.id === activeGridId;\n            return (\n              <div key={grid.id} className=\"border border-gray-200 rounded-lg\">\n                <button\n                  onClick={() => handleGridSelect(grid.id)}\n                  className={`w-full px-4 py-3 text-left flex items-center justify-between ${\n                    isActive ? 'bg-blue-50' : 'bg-white hover:bg-gray-50'\n                  }`}\n                >\n                  <div>\n                    <h4 className={`font-medium ${isActive ? 'text-blue-900' : 'text-gray-900'}`}>\n                      {grid.title}\n                    </h4>\n                    {grid.description && (\n                      <p className={`mt-1 text-sm ${isActive ? 'text-blue-700' : 'text-gray-600'}`}>\n                        {grid.description}\n                      </p>\n                    )}\n                  </div>\n                  {isActive && (\n                    <div className=\"flex items-center text-blue-600\">\n                      <span className=\"text-xs font-medium\">ACTIVE</span>\n                    </div>\n                  )}\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      );\n\n    default:\n      return null;\n  }\n};\n\nexport default GridSelector;\n"]}