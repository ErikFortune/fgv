{"version":3,"file":"SharedContextControls.js","sourceRoot":"","sources":["../../../../src/components/views/GridView/SharedContextControls.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport {\n  ProcessedResources,\n  ResolutionActions,\n  ResolutionState,\n  ResolutionContextOptions\n} from '../../../types';\nimport { QualifierContextControl } from '../../common/QualifierContextControl';\n\n/**\n * Props for the SharedContextControls component.\n */\nexport interface SharedContextControlsProps {\n  /** Available qualifiers for context building */\n  availableQualifiers: string[];\n  /** Current resolution state */\n  resolutionState?: ResolutionState;\n  /** Resolution actions for context management */\n  resolutionActions?: ResolutionActions;\n  /** Context configuration options */\n  contextOptions?: ResolutionContextOptions;\n  /** The resource system for qualifier value suggestions */\n  resources?: ProcessedResources | null;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * SharedContextControls component for managing resolution context across multiple grids.\n *\n * Provides a unified context management interface that is shared across all grid instances\n * in a MultiGridView. Changes to context values are immediately reflected in all grids,\n * enabling consistent administrative workflows.\n *\n * @example\n * ```tsx\n * <SharedContextControls\n *   availableQualifiers={['language', 'territory', 'platform']}\n *   resolutionState={sharedResolutionState}\n *   resolutionActions={sharedResolutionActions}\n *   contextOptions={{\n *     qualifierOptions: {\n *       language: { editable: true },\n *       platform: { editable: false, hostValue: 'web' }\n *     },\n *     hostManagedValues: { environment: 'production' }\n *   }}\n *   resources={processedResources}\n * />\n * ```\n * @public\n */\nexport const SharedContextControls: React.FC<SharedContextControlsProps> = ({\n  availableQualifiers,\n  resolutionState,\n  resolutionActions,\n  contextOptions,\n  resources,\n  className = ''\n}) => {\n  // Handle context value changes\n  const handleQualifierChange = useCallback(\n    (qualifierName: string, value: string | undefined) => {\n      // Don't update context if this qualifier is host-managed\n      const qualifierOptions = contextOptions?.qualifierOptions?.[qualifierName];\n      const isHostManaged = qualifierOptions?.hostValue !== undefined;\n\n      if (!isHostManaged) {\n        resolutionActions?.updateContextValue(qualifierName, value);\n      }\n    },\n    [resolutionActions, contextOptions?.qualifierOptions]\n  );\n\n  // Determine which qualifiers to show\n  const visibleQualifiers = useMemo(() => {\n    if (!contextOptions?.qualifierOptions) {\n      return availableQualifiers;\n    }\n\n    return availableQualifiers.filter((qualifierName) => {\n      const options = contextOptions.qualifierOptions![qualifierName];\n      return options?.visible !== false;\n    });\n  }, [availableQualifiers, contextOptions?.qualifierOptions]);\n\n  // Get effective context values\n  const effectiveContextValues = useMemo(() => {\n    return resolutionState?.contextValues || {};\n  }, [resolutionState?.contextValues]);\n\n  // Don't render if context controls are disabled\n  if (contextOptions?.showContextControls === false) {\n    return null;\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        {contextOptions?.contextPanelTitle || 'Shared Context Configuration'}\n      </h3>\n      <div className={`bg-gray-50 rounded-lg p-4 ${contextOptions?.contextPanelClassName || ''}`}>\n        <div className=\"mb-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n            {visibleQualifiers.map((qualifierName) => {\n              const qualifierOptions = contextOptions?.qualifierOptions?.[qualifierName];\n              const hostManagedValue = contextOptions?.hostManagedValues?.[qualifierName];\n              const globalPlaceholder =\n                typeof contextOptions?.globalPlaceholder === 'function'\n                  ? contextOptions.globalPlaceholder(qualifierName)\n                  : contextOptions?.globalPlaceholder;\n\n              // Merge host-managed values with qualifier options\n              const mergedOptions = {\n                ...qualifierOptions,\n                hostValue: hostManagedValue !== undefined ? hostManagedValue : qualifierOptions?.hostValue\n              };\n\n              return (\n                <QualifierContextControl\n                  key={qualifierName}\n                  qualifierName={qualifierName}\n                  value={resolutionState?.pendingContextValues[qualifierName]}\n                  onChange={handleQualifierChange}\n                  placeholder={globalPlaceholder || `Enter ${qualifierName} value`}\n                  resources={resources}\n                  options={mergedOptions}\n                />\n              );\n            })}\n          </div>\n        </div>\n\n        {contextOptions?.showCurrentContext !== false && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600\">\n              <strong>Current Context:</strong>{' '}\n              {Object.entries(effectiveContextValues).length > 0 ? (\n                Object.entries(effectiveContextValues)\n                  .map(([key, value]) => `${key}=${value === undefined ? '(undefined)' : value}`)\n                  .join(', ')\n              ) : (\n                <span className=\"italic\">No context values set</span>\n              )}\n            </div>\n\n            {contextOptions?.showContextActions !== false && (\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={resolutionActions?.resetCache}\n                  className=\"px-3 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                  title=\"Clear resolution cache for all grids\"\n                >\n                  Clear Cache\n                </button>\n                <button\n                  onClick={() => resolutionActions?.applyContext()}\n                  disabled={!resolutionState?.hasPendingChanges}\n                  className={`px-4 py-2 rounded-md text-sm font-medium ${\n                    resolutionState?.hasPendingChanges\n                      ? 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                  }`}\n                  title=\"Apply context changes to all grids\"\n                >\n                  {resolutionState?.hasPendingChanges\n                    ? 'Apply Context to All Grids'\n                    : resolutionState?.currentResolver\n                    ? 'Context Applied'\n                    : 'Apply Context'}\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Context change summary */}\n        {resolutionState?.hasPendingChanges && (\n          <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n            <div className=\"text-sm text-blue-800\">\n              <strong>Pending Context Changes:</strong> Changes will be applied to all visible grids\n              simultaneously. This ensures consistent data across all administrative views.\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SharedContextControls;\n"]}