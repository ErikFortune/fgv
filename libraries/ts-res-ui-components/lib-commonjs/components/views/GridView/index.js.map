{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/views/GridView/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useEffect } from 'react';\nimport { TableCellsIcon } from '@heroicons/react/24/outline';\nimport { GridViewProps, ProcessedResources, ResolutionResult } from '../../../types';\nimport { selectResources } from '../../../utils/resourceSelector';\nimport { QualifierContextControl } from '../../common/QualifierContextControl';\nimport { ResolutionContextOptionsControl } from '../../common/ResolutionContextOptionsControl';\nimport { UnifiedChangeControls } from '../ResolutionView/UnifiedChangeControls';\nimport { ResourceGrid } from './ResourceGrid';\n\n/**\n * GridView component for displaying multiple resources in a tabular format.\n *\n * Provides a grid-based interface for viewing and editing multiple resources\n * simultaneously, with configurable column mappings and shared context management.\n * Leverages the same state management and batch processing as ResolutionView.\n *\n * **Key Features:**\n * - **Multi-resource display**: View multiple resources in rows with configurable columns\n * - **Column mapping**: Host-defined extraction of properties from resolved resources\n * - **Batch editing**: Edit multiple resource values with unified batch application\n * - **Context integration**: Same context management as ResolutionView\n * - **Resource filtering**: Flexible resource selection via built-in and custom selectors\n * - **Change management**: Leverages existing UnifiedChangeControls for batch operations\n *\n * @example\n * ```tsx\n * import { GridView } from '@fgv/ts-res-ui-components';\n *\n * // Define grid configuration\n * const gridConfig = {\n *   id: 'user-messages',\n *   title: 'User Messages',\n *   resourceSelection: { type: 'prefix', prefix: 'user.' },\n *   columnMapping: [{\n *     resourceType: 'text-resource',\n *     columns: [\n *       { id: 'text', title: 'Message Text', dataPath: 'text', editable: true },\n *       { id: 'locale', title: 'Locale', dataPath: 'locale' }\n *     ]\n *   }]\n * };\n *\n * function MyGridApp() {\n *   return (\n *     <GridView\n *       gridConfig={gridConfig}\n *       resources={processedResources}\n *       resolutionState={resolutionState}\n *       resolutionActions={resolutionActions}\n *       availableQualifiers={['language', 'territory', 'platform']}\n *     />\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const GridView: React.FC<GridViewProps> = ({\n  gridConfig,\n  resources,\n  resolutionState,\n  resolutionActions,\n  availableQualifiers = [],\n  contextOptions,\n  filterState,\n  filterResult,\n  showContextControls = true,\n  showChangeControls = true,\n  onMessage,\n  className = ''\n}) => {\n  // Use filtered resources when filtering is active and successful\n  const isFilteringActive = filterState?.enabled && filterResult?.success === true;\n  const baseProcessedResources = isFilteringActive ? filterResult?.processedResources : resources;\n\n  // Select resources for this grid based on the configuration\n  const selectedResourceIds = useMemo(() => {\n    if (!baseProcessedResources || !gridConfig.resourceSelection) {\n      return [];\n    }\n\n    const selectionResult = selectResources(gridConfig.resourceSelection, baseProcessedResources);\n    if (selectionResult.isFailure()) {\n      onMessage?.('error', `Resource selection failed: ${selectionResult.message}`);\n      return [];\n    }\n\n    return selectionResult.value;\n  }, [baseProcessedResources, gridConfig.resourceSelection, onMessage]);\n\n  // Resolve all selected resources with current context\n  const resourceResolutions = useMemo(() => {\n    if (!resolutionState?.currentResolver || !selectedResourceIds.length) {\n      return new Map<string, ResolutionResult>();\n    }\n\n    const resolutions = new Map<string, ResolutionResult>();\n    const context = resolutionState.contextValues;\n\n    selectedResourceIds.forEach((resourceId) => {\n      try {\n        const resolver = resolutionState.currentResolver!;\n        const resourceResult = resolver.resourceManager.getBuiltResource(resourceId);\n\n        if (resourceResult.isSuccess()) {\n          const resource = resourceResult.value;\n          // Resolve the resource with current context\n          const resolveResult = resolver.resolveComposedResourceValue(resourceId);\n\n          if (resolveResult.isSuccess()) {\n            resolutions.set(resourceId, {\n              success: true,\n              resourceId,\n              resource,\n              composedValue: resolveResult.value\n              // Note: For grid view, we mainly need the composed value\n              // Full candidate analysis is available but not needed for basic grid display\n            });\n          } else {\n            resolutions.set(resourceId, {\n              success: false,\n              resourceId,\n              error: resolveResult.message\n            });\n          }\n        }\n      } catch (error) {\n        resolutions.set(resourceId, {\n          success: false,\n          resourceId,\n          error: error instanceof Error ? error.message : 'Unknown resolution error'\n        });\n      }\n    });\n\n    return resolutions;\n  }, [selectedResourceIds, resolutionState?.currentResolver, resolutionState?.contextValues]);\n\n  // Handle context value changes using the shared pattern from ResolutionView\n  const handleQualifierChange = useCallback(\n    (qualifierName: string, value: string | undefined) => {\n      // Don't update context if this qualifier is host-managed\n      const qualifierOptions = contextOptions?.qualifierOptions?.[qualifierName];\n      const isHostManaged = qualifierOptions?.hostValue !== undefined;\n\n      if (!isHostManaged) {\n        resolutionActions?.updateContextValue(qualifierName, value);\n      }\n    },\n    [resolutionActions, contextOptions?.qualifierOptions]\n  );\n\n  // Apply host-managed values when they change (same pattern as ResolutionView)\n  useEffect(() => {\n    if (!contextOptions?.hostManagedValues || !resolutionActions?.applyContext) return;\n\n    resolutionActions.applyContext(contextOptions.hostManagedValues);\n  }, [contextOptions?.hostManagedValues, resolutionActions]);\n\n  // Determine which qualifiers to show\n  const visibleQualifiers = useMemo(() => {\n    if (!contextOptions?.qualifierOptions) {\n      return availableQualifiers;\n    }\n\n    return availableQualifiers.filter((qualifierName) => {\n      const options = contextOptions.qualifierOptions![qualifierName];\n      return options?.visible !== false;\n    });\n  }, [availableQualifiers, contextOptions?.qualifierOptions]);\n\n  // Get effective context values\n  const effectiveContextValues = useMemo(() => {\n    return resolutionState?.contextValues || {};\n  }, [resolutionState?.contextValues]);\n\n  if (!resources) {\n    return (\n      <div className={`p-6 ${className}`}>\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <TableCellsIcon className=\"h-8 w-8 text-blue-600\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">{gridConfig.title || 'Resource Grid'}</h2>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">No Resources Loaded</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Import resources first to view them in a grid format with customizable columns.\n            </p>\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Grid View:</strong> Display multiple resources in a table format. Configure columns to\n                extract and edit specific properties from resolved resources.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`p-6 ${className}`}>\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <TableCellsIcon className=\"h-8 w-8 text-blue-600\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">{gridConfig.title || 'Resource Grid'}</h2>\n        {isFilteringActive && (\n          <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n            Filtered\n          </span>\n        )}\n        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\n          {selectedResourceIds.length} resource{selectedResourceIds.length !== 1 ? 's' : ''}\n        </span>\n      </div>\n\n      {gridConfig.description && <p className=\"text-gray-600 mb-6\">{gridConfig.description}</p>}\n\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        {/* Context Configuration Panel */}\n        {showContextControls && contextOptions?.showContextControls !== false && (\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              {contextOptions?.contextPanelTitle || 'Context Configuration'}\n            </h3>\n            <div className={`bg-gray-50 rounded-lg p-4 ${contextOptions?.contextPanelClassName || ''}`}>\n              <div className=\"mb-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {visibleQualifiers.map((qualifierName) => {\n                    const qualifierOptions = contextOptions?.qualifierOptions?.[qualifierName];\n                    const hostManagedValue = contextOptions?.hostManagedValues?.[qualifierName];\n                    const globalPlaceholder =\n                      typeof contextOptions?.globalPlaceholder === 'function'\n                        ? contextOptions.globalPlaceholder(qualifierName)\n                        : contextOptions?.globalPlaceholder;\n\n                    const mergedOptions = {\n                      ...qualifierOptions,\n                      hostValue:\n                        hostManagedValue !== undefined ? hostManagedValue : qualifierOptions?.hostValue\n                    };\n\n                    return (\n                      <QualifierContextControl\n                        key={qualifierName}\n                        qualifierName={qualifierName}\n                        value={resolutionState?.pendingContextValues[qualifierName]}\n                        onChange={handleQualifierChange}\n                        placeholder={globalPlaceholder || `Enter ${qualifierName} value`}\n                        resources={baseProcessedResources}\n                        options={mergedOptions}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n\n              {contextOptions?.showCurrentContext !== false && (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-gray-600\">\n                    Current:{' '}\n                    {Object.entries(effectiveContextValues)\n                      .map(([key, value]) => `${key}=${value === undefined ? '(undefined)' : value}`)\n                      .join(', ')}\n                  </div>\n                  {contextOptions?.showContextActions !== false && (\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={resolutionActions?.resetCache}\n                        className=\"px-3 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                        title=\"Clear resolution cache\"\n                      >\n                        Clear Cache\n                      </button>\n                      <button\n                        onClick={() => resolutionActions?.applyContext()}\n                        disabled={!resolutionState?.hasPendingChanges}\n                        className={`px-4 py-2 rounded-md text-sm font-medium ${\n                          resolutionState?.hasPendingChanges\n                            ? 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500'\n                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                        }`}\n                      >\n                        {resolutionState?.hasPendingChanges\n                          ? 'Apply Changes'\n                          : resolutionState?.currentResolver\n                          ? 'Context Applied'\n                          : 'Apply Context'}\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Main Grid Display */}\n        <ResourceGrid\n          gridConfig={gridConfig}\n          selectedResourceIds={selectedResourceIds}\n          resourceResolutions={resourceResolutions}\n          resolutionActions={resolutionActions}\n          resolutionState={resolutionState}\n          onMessage={onMessage}\n        />\n\n        {/* Unified Change Controls */}\n        {showChangeControls &&\n          (resolutionState?.hasUnsavedEdits || resolutionState?.hasPendingResourceChanges) && (\n            <div className=\"mt-6\">\n              <UnifiedChangeControls\n                editCount={resolutionState?.editedResources?.size || 0}\n                addCount={resolutionState?.pendingResources?.size || 0}\n                deleteCount={resolutionState?.pendingResourceDeletions?.size || 0}\n                isApplying={resolutionState?.isApplyingEdits}\n                disabled={!resolutionState?.currentResolver}\n                onApplyAll={async () => {\n                  await resolutionActions?.applyPendingResources();\n                }}\n                onDiscardAll={() => {\n                  resolutionActions?.discardEdits?.();\n                  resolutionActions?.discardPendingResources?.();\n                }}\n              />\n            </div>\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default GridView;\n"]}