{"version":3,"file":"TriStateCell.js","sourceRoot":"","sources":["../../../../../src/components/views/GridView/cells/TriStateCell.tsx"],"names":[],"mappings":";;;;AAAA,uDAAoD;AACpD,yDAAoF;AAgCpF;;;;;;;;;;;;;;;;;;;;GAoBG;AACI,MAAM,YAAY,GAAgC,CAAC,EACxD,KAAK,EACL,UAAU,EACV,MAAM,EACN,QAAQ,GAAG,KAAK,EAChB,YAAY,GAAG,UAAU,EACzB,MAAM,EACN,QAAQ,EACR,MAAM,EACN,kBAAkB,EACnB,EAAE,EAAE;IACH,qCAAqC;IACrC,MAAM,aAAa,GAAG,IAAA,eAAO,EAAC,GAAmB,EAAE;QACjD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,IAAI,CAAC;QACvD,IAAI,OAAO,KAAK,KAAK,SAAS;YAAE,OAAO,KAAK,CAAC;QAC7C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,MAAM;gBAAE,OAAO,IAAI,CAAC;YAChD,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,OAAO;gBAAE,OAAO,KAAK,CAAC;YAClD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,KAAK,KAAK,CAAC;gBAAE,OAAO,IAAI,CAAC;YAC7B,IAAI,KAAK,KAAK,CAAC;gBAAE,OAAO,KAAK,CAAC;YAC9B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,iDAAiD;IACjD,MAAM,oBAAoB,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QAC5C,IAAI,QAAwB,CAAC;QAE7B,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;YAC3B,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;aAAM,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;YAClC,QAAQ,GAAG,KAAK,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;QAED,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjB,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE1D,yBAAyB;IACzB,MAAM,oBAAoB,GAAG,IAAA,mBAAW,EACtC,CAAC,KAA2C,EAAE,EAAE;QAC9C,IAAI,QAAwB,CAAC;QAE7B,QAAQ,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC3B,KAAK,MAAM;gBACT,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM;YACR,KAAK,OAAO;gBACV,QAAQ,GAAG,KAAK,CAAC;gBACjB,MAAM;YACR;gBACE,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM;QACV,CAAC;QAED,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjB,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,EACD,CAAC,QAAQ,EAAE,MAAM,EAAE,kBAAkB,CAAC,CACvC,CAAC;IAEF,IAAI,YAAY,KAAK,UAAU,EAAE,CAAC;QAChC,gCAAgC;QAChC,MAAM,WAAW,GAAG,eAAK,CAAC,MAAM,CAAmB,IAAI,CAAC,CAAC;QAEzD,sCAAsC;QACtC,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;YACnB,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;gBACxB,WAAW,CAAC,OAAO,CAAC,aAAa,GAAG,aAAa,KAAK,IAAI,CAAC;YAC7D,CAAC;QACH,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;QAEpB,OAAO,CACL,uCAAK,SAAS,EAAC,4CAA4C;YACzD,yCAAO,SAAS,EAAC,0BAA0B;gBACzC,yCACE,GAAG,EAAE,WAAW,EAChB,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,aAAa,KAAK,IAAI,EAC/B,QAAQ,EAAE,oBAAoB,EAC9B,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,qEACT,QAAQ,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,gBAC/C,EAAE,GACF;gBACF,wCAAM,SAAS,EAAC,SAAS,IAAE,MAAM,CAAC,KAAK,CAAQ,CACzC,CACJ,CACP,CAAC;IACJ,CAAC;IAED,qCAAqC;IACrC,MAAM,aAAa,GAAG;QACpB,SAAS,EAAE,KAAK;QAChB,UAAU,EAAE,IAAI;QAChB,cAAc,EAAE,OAAO;KACxB,CAAC;IAEF,MAAM,eAAe,GAAG,MAAM,IAAI,aAAa,CAAC;IAEhD,OAAO,CACL,uCAAK,SAAS,EAAC,WAAW;QACxB,uCAAK,SAAS,EAAC,UAAU;YACvB,0CACE,KAAK,EAAE,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAC9D,QAAQ,EAAE,oBAAoB,EAC9B,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,mKACT,QAAQ,CAAC,CAAC,CAAC,2CAA2C,CAAC,CAAC,CAAC,gBAC3D,EAAE;gBAEF,0CAAQ,KAAK,EAAC,MAAM,IAAE,eAAe,CAAC,cAAc,CAAU;gBAC9D,0CAAQ,KAAK,EAAC,MAAM,IAAE,eAAe,CAAC,SAAS,CAAU;gBACzD,0CAAQ,KAAK,EAAC,OAAO,IAAE,eAAe,CAAC,UAAU,CAAU,CACpD;YAET,uCAAK,SAAS,EAAC,uEAAuE;gBACpF,8BAAC,yBAAe,IAAC,SAAS,EAAC,uBAAuB,GAAG,CACjD,CACF,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AAlIW,QAAA,YAAY,gBAkIvB;AAEF,kBAAe,oBAAY,CAAC","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { ChevronDownIcon, CheckIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { GridColumnDefinition } from '../../../../types';\n\n/**\n * Props for the TriStateCell component.\n */\nexport interface TriStateCellProps {\n  /** Current value of the cell */\n  value: JsonValue;\n  /** Resource ID for this row */\n  resourceId: string;\n  /** Column configuration */\n  column: GridColumnDefinition;\n  /** Whether the cell is in read-only mode */\n  disabled?: boolean;\n  /** Presentation mode: 'checkbox' for 3-state checkbox, 'dropdown' for select */\n  presentation?: 'checkbox' | 'dropdown';\n  /** Custom labels for tristate values */\n  labels?: {\n    trueLabel: string;\n    falseLabel: string;\n    undefinedLabel: string;\n  };\n  /** Callback when the value changes */\n  onChange: (value: boolean | null) => void;\n  /** Callback when the value should be saved */\n  onSave: (value: boolean | null) => void;\n  /** Callback when validation state changes */\n  onValidationChange: (error: string | null) => void;\n}\n\n/**\n * TriStateCell component for editing three-state boolean values.\n *\n * Supports true, false, and null/undefined states with two presentation modes:\n * - Checkbox mode: 3-state checkbox (checked, unchecked, indeterminate)\n * - Dropdown mode: Select dropdown with three options\n *\n * @example\n * ```tsx\n * <TriStateCell\n *   value={null}\n *   resourceId=\"feature-123\"\n *   column={{ id: 'enabled', title: 'Feature Enabled' }}\n *   presentation=\"dropdown\"\n *   onChange={handleChange}\n *   onSave={handleSave}\n *   onValidationChange={handleValidation}\n * />\n * ```\n * @public\n */\nexport const TriStateCell: React.FC<TriStateCellProps> = ({\n  value,\n  resourceId,\n  column,\n  disabled = false,\n  presentation = 'dropdown',\n  labels,\n  onChange,\n  onSave,\n  onValidationChange\n}) => {\n  // Convert value to tri-state boolean\n  const triStateValue = useMemo((): boolean | null => {\n    if (value === null || value === undefined) return null;\n    if (typeof value === 'boolean') return value;\n    if (typeof value === 'string') {\n      if (value.toLowerCase() === 'true') return true;\n      if (value.toLowerCase() === 'false') return false;\n      return null;\n    }\n    if (typeof value === 'number') {\n      if (value === 1) return true;\n      if (value === 0) return false;\n      return null;\n    }\n    return Boolean(value);\n  }, [value]);\n\n  // Handle checkbox change (cycles through states)\n  const handleCheckboxChange = useCallback(() => {\n    let newValue: boolean | null;\n\n    if (triStateValue === null) {\n      newValue = true;\n    } else if (triStateValue === true) {\n      newValue = false;\n    } else {\n      newValue = null;\n    }\n\n    onChange(newValue);\n    onSave(newValue);\n    onValidationChange(null);\n  }, [triStateValue, onChange, onSave, onValidationChange]);\n\n  // Handle dropdown change\n  const handleDropdownChange = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      let newValue: boolean | null;\n\n      switch (event.target.value) {\n        case 'true':\n          newValue = true;\n          break;\n        case 'false':\n          newValue = false;\n          break;\n        default:\n          newValue = null;\n          break;\n      }\n\n      onChange(newValue);\n      onSave(newValue);\n      onValidationChange(null);\n    },\n    [onChange, onSave, onValidationChange]\n  );\n\n  if (presentation === 'checkbox') {\n    // 3-state checkbox presentation\n    const checkboxRef = React.useRef<HTMLInputElement>(null);\n\n    // Update checkbox indeterminate state\n    React.useEffect(() => {\n      if (checkboxRef.current) {\n        checkboxRef.current.indeterminate = triStateValue === null;\n      }\n    }, [triStateValue]);\n\n    return (\n      <div className=\"px-3 py-2 flex items-center justify-center\">\n        <label className=\"inline-flex items-center\">\n          <input\n            ref={checkboxRef}\n            type=\"checkbox\"\n            checked={triStateValue === true}\n            onChange={handleCheckboxChange}\n            disabled={disabled}\n            className={`h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded ${\n              disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n            }`}\n          />\n          <span className=\"sr-only\">{column.title}</span>\n        </label>\n      </div>\n    );\n  }\n\n  // Default labels (can be overridden)\n  const defaultLabels = {\n    trueLabel: 'Yes',\n    falseLabel: 'No',\n    undefinedLabel: 'Unset'\n  };\n\n  const effectiveLabels = labels || defaultLabels;\n\n  return (\n    <div className=\"px-3 py-2\">\n      <div className=\"relative\">\n        <select\n          value={triStateValue === null ? 'null' : String(triStateValue)}\n          onChange={handleDropdownChange}\n          disabled={disabled}\n          className={`w-full appearance-none bg-white border border-gray-300 rounded px-3 py-1 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n            disabled ? 'opacity-50 cursor-not-allowed bg-gray-100' : 'cursor-pointer'\n          }`}\n        >\n          <option value=\"null\">{effectiveLabels.undefinedLabel}</option>\n          <option value=\"true\">{effectiveLabels.trueLabel}</option>\n          <option value=\"false\">{effectiveLabels.falseLabel}</option>\n        </select>\n\n        <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n          <ChevronDownIcon className=\"h-4 w-4 text-gray-400\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TriStateCell;\n"]}