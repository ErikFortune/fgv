{"version":3,"file":"BooleanCell.js","sourceRoot":"","sources":["../../../../../src/components/views/GridView/cells/BooleanCell.tsx"],"names":[],"mappings":";;;;AAAA,uDAA2C;AAwB3C;;;;;;;;;;;;;;;;;;GAkBG;AACI,MAAM,WAAW,GAA+B,CAAC,EACtD,KAAK,EACL,UAAU,EACV,MAAM,EACN,QAAQ,GAAG,KAAK,EAChB,QAAQ,EACR,MAAM,EACN,kBAAkB,EACnB,EAAE,EAAE;IACH,2BAA2B;IAC3B,MAAM,YAAY,GAAG,eAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACtC,IAAI,OAAO,KAAK,KAAK,SAAS;YAAE,OAAO,KAAK,CAAC;QAC7C,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,KAAK,CAAC;QACxD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,KAAK,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;QACxC,CAAC;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,KAAK,KAAK,CAAC,CAAC;QACrB,CAAC;QACD,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,yBAAyB;IACzB,MAAM,YAAY,GAAG,IAAA,mBAAW,EAC9B,CAAC,KAA0C,EAAE,EAAE;QAC7C,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;QACtC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,wCAAwC;QAC1D,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,wDAAwD;IACpF,CAAC,EACD,CAAC,QAAQ,EAAE,MAAM,EAAE,kBAAkB,CAAC,CACvC,CAAC;IAEF,OAAO,CACL,uCAAK,SAAS,EAAC,4CAA4C;QACzD,yCAAO,SAAS,EAAC,0BAA0B;YACzC,yCACE,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,YAAY,EACrB,QAAQ,EAAE,YAAY,EACtB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,qEACT,QAAQ,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,gBAC/C,EAAE,GACF;YACF,wCAAM,SAAS,EAAC,SAAS,IAAE,MAAM,CAAC,KAAK,CAAQ,CACzC,CACJ,CACP,CAAC;AACJ,CAAC,CAAC;AAjDW,QAAA,WAAW,eAiDtB;AAEF,kBAAe,mBAAW,CAAC","sourcesContent":["import React, { useCallback } from 'react';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { GridColumnDefinition } from '../../../../types';\n\n/**\n * Props for the BooleanCell component.\n */\nexport interface BooleanCellProps {\n  /** Current value of the cell */\n  value: JsonValue;\n  /** Resource ID for this row */\n  resourceId: string;\n  /** Column configuration */\n  column: GridColumnDefinition;\n  /** Whether the cell is in read-only mode */\n  disabled?: boolean;\n  /** Callback when the value changes */\n  onChange: (value: boolean) => void;\n  /** Callback when the value should be saved */\n  onSave: (value: boolean) => void;\n  /** Callback when validation state changes */\n  onValidationChange: (error: string | null) => void;\n}\n\n/**\n * BooleanCell component for editing boolean values with checkbox presentation.\n *\n * Provides a clean checkbox interface for true/false values with clear\n * visual state indication and immediate save on change.\n *\n * @example\n * ```tsx\n * <BooleanCell\n *   value={true}\n *   resourceId=\"user-123\"\n *   column={{ id: 'enabled', title: 'Enabled' }}\n *   onChange={handleChange}\n *   onSave={handleSave}\n *   onValidationChange={handleValidation}\n * />\n * ```\n * @public\n */\nexport const BooleanCell: React.FC<BooleanCellProps> = ({\n  value,\n  resourceId,\n  column,\n  disabled = false,\n  onChange,\n  onSave,\n  onValidationChange\n}) => {\n  // Convert value to boolean\n  const booleanValue = React.useMemo(() => {\n    if (typeof value === 'boolean') return value;\n    if (value === null || value === undefined) return false;\n    if (typeof value === 'string') {\n      return value.toLowerCase() === 'true';\n    }\n    if (typeof value === 'number') {\n      return value !== 0;\n    }\n    return Boolean(value);\n  }, [value]);\n\n  // Handle checkbox change\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = event.target.checked;\n      onChange(newValue);\n      onSave(newValue); // Boolean changes are saved immediately\n      onValidationChange(null); // Boolean values typically don't have validation errors\n    },\n    [onChange, onSave, onValidationChange]\n  );\n\n  return (\n    <div className=\"px-3 py-2 flex items-center justify-center\">\n      <label className=\"inline-flex items-center\">\n        <input\n          type=\"checkbox\"\n          checked={booleanValue}\n          onChange={handleChange}\n          disabled={disabled}\n          className={`h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded ${\n            disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n          }`}\n        />\n        <span className=\"sr-only\">{column.title}</span>\n      </label>\n    </div>\n  );\n};\n\nexport default BooleanCell;\n"]}