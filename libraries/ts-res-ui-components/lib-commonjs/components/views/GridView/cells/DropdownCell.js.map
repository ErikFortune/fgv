{"version":3,"file":"DropdownCell.js","sourceRoot":"","sources":["../../../../../src/components/views/GridView/cells/DropdownCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport { ChevronDownIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { GridColumnDefinition, GridDropdownOption } from '../../../../types';\nimport { validateCellValue } from '../../../../utils/cellValidation';\nimport { useObservability } from '../../../../contexts';\n\n/**\n * Props for the DropdownCell component.\n */\nexport interface DropdownCellProps {\n  /** Current value of the cell */\n  value: JsonValue;\n  /** Resource ID for this row */\n  resourceId: string;\n  /** Column configuration */\n  column: GridColumnDefinition;\n  /** Whether this cell is currently being edited */\n  isEditing: boolean;\n  /** Whether the cell is in read-only mode */\n  disabled?: boolean;\n  /** Callback when the value changes */\n  onChange: (value: string) => void;\n  /** Callback when editing starts */\n  onStartEdit: () => void;\n  /** Callback when editing is cancelled */\n  onCancel: () => void;\n  /** Callback when the value should be saved */\n  onSave: (value: string) => void;\n  /** Callback when validation state changes */\n  onValidationChange: (error: string | null) => void;\n}\n\n/**\n * DropdownCell component for editing string values with predefined options.\n *\n * Supports both dropdown (restricted to options) and combobox (allows custom values) modes.\n * Can load options dynamically and provides validation for selected values.\n *\n * @example\n * ```tsx\n * <DropdownCell\n *   value=\"active\"\n *   resourceId=\"user-123\"\n *   column={{\n *     id: 'status',\n *     dropdownOptions: [\n *       { value: 'active', label: 'Active' },\n *       { value: 'inactive', label: 'Inactive' }\n *     ],\n *     allowCustomValue: false\n *   }}\n *   isEditing={false}\n *   onChange={handleChange}\n *   onSave={handleSave}\n *   onValidationChange={handleValidation}\n * />\n * ```\n * @public\n */\nexport const DropdownCell: React.FC<DropdownCellProps> = ({\n  value,\n  resourceId,\n  column,\n  isEditing,\n  disabled = false,\n  onChange,\n  onStartEdit,\n  onCancel,\n  onSave,\n  onValidationChange\n}) => {\n  // Get observability context\n  const o11y = useObservability();\n\n  const [editValue, setEditValue] = useState('');\n  const [options, setOptions] = useState<GridDropdownOption[]>([]);\n  const [loadingOptions, setLoadingOptions] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  // Convert value to string\n  const stringValue = useMemo(() => {\n    if (value === null || value === undefined) return '';\n    return String(value);\n  }, [value]);\n\n  // Load dropdown options\n  useEffect(() => {\n    if (!column.dropdownOptions) {\n      setOptions([]);\n      return;\n    }\n\n    if (Array.isArray(column.dropdownOptions)) {\n      setOptions(column.dropdownOptions);\n      return;\n    }\n\n    // Async options loading\n    setLoadingOptions(true);\n    column\n      .dropdownOptions()\n      .then((loadedOptions) => {\n        setOptions(loadedOptions);\n        setLoadingOptions(false);\n      })\n      .catch((error) => {\n        o11y.diag.error('Failed to load dropdown options:', error);\n        setOptions([]);\n        setLoadingOptions(false);\n      });\n  }, [column.dropdownOptions]);\n\n  // Initialize edit value when editing starts\n  useEffect(() => {\n    if (isEditing) {\n      setEditValue(stringValue);\n    }\n  }, [isEditing, stringValue]);\n\n  // Validate current value\n  const validateCurrentValue = useCallback(() => {\n    if (!isEditing) return;\n\n    // First, run standard validation\n    const validationResult = validateCellValue(editValue, column.validation);\n\n    if (validationResult.isFailure()) {\n      setValidationError(`Validation failed: ${validationResult.message}`);\n      onValidationChange(`Validation failed: ${validationResult.message}`);\n      return;\n    }\n\n    const result = validationResult.value;\n    if (!result.isValid) {\n      setValidationError(result.error || null);\n      onValidationChange(result.error || null);\n      return;\n    }\n\n    // Then check if value is in allowed options (if not allowing custom values)\n    if (!column.allowCustomValue && editValue && options.length > 0) {\n      const validOption = options.find((opt) => opt.value === editValue);\n      if (!validOption) {\n        const error = `Must be one of: ${options.map((opt) => opt.label).join(', ')}`;\n        setValidationError(error);\n        onValidationChange(error);\n        return;\n      }\n    }\n\n    setValidationError(null);\n    onValidationChange(null);\n  }, [editValue, column.validation, column.allowCustomValue, options, isEditing, onValidationChange]);\n\n  // Validate whenever edit value or options change\n  useEffect(() => {\n    validateCurrentValue();\n  }, [validateCurrentValue]);\n\n  // Handle dropdown/combobox change\n  const handleSelectChange = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n      const newValue = event.target.value;\n      setEditValue(newValue);\n      onChange(newValue);\n    },\n    [onChange]\n  );\n\n  // Handle key presses (for combobox mode)\n  const handleKeyPress = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' && !validationError) {\n        onSave(editValue);\n      } else if (event.key === 'Escape') {\n        onCancel();\n      }\n    },\n    [editValue, validationError, onSave, onCancel]\n  );\n\n  // Handle save\n  const handleSave = useCallback(() => {\n    if (!validationError) {\n      onSave(editValue);\n    }\n  }, [editValue, validationError, onSave]);\n\n  // Find display label for current value\n  const getDisplayLabel = useCallback(\n    (val: string) => {\n      if (!val) return '';\n      const option = options.find((opt) => opt.value === val);\n      return option ? option.label : val;\n    },\n    [options]\n  );\n\n  if (loadingOptions) {\n    return <div className=\"px-3 py-2 text-sm text-gray-500 italic\">Loading options...</div>;\n  }\n\n  if (isEditing) {\n    const isCombobox = column.allowCustomValue;\n\n    if (isCombobox) {\n      // Combobox mode: input with datalist\n      return (\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            list={`${resourceId}-${column.id}-options`}\n            value={editValue}\n            onChange={handleSelectChange}\n            onKeyDown={handleKeyPress}\n            onBlur={handleSave}\n            disabled={disabled}\n            autoFocus\n            className={`w-full px-2 py-1 text-sm border rounded focus:outline-none focus:ring-2 ${\n              validationError\n                ? 'border-red-500 focus:ring-red-500 bg-red-50'\n                : 'border-gray-300 focus:ring-blue-500'\n            }`}\n            placeholder={column.title}\n          />\n\n          <datalist id={`${resourceId}-${column.id}-options`}>\n            {options.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </datalist>\n\n          {validationError && (\n            <div className=\"absolute z-10 mt-1 p-2 bg-red-100 border border-red-200 rounded shadow-sm text-xs text-red-800 max-w-xs\">\n              <div className=\"flex items-center space-x-1\">\n                <ExclamationCircleIcon className=\"h-3 w-3 flex-shrink-0\" />\n                <span>{validationError}</span>\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      // Dropdown mode: select element\n      return (\n        <div className=\"relative\">\n          <select\n            value={editValue}\n            onChange={handleSelectChange}\n            onBlur={handleSave}\n            disabled={disabled}\n            autoFocus\n            className={`w-full appearance-none bg-white border rounded px-2 py-1 pr-8 text-sm focus:outline-none focus:ring-2 ${\n              validationError\n                ? 'border-red-500 focus:ring-red-500 bg-red-50'\n                : 'border-gray-300 focus:ring-blue-500'\n            }`}\n          >\n            <option value=\"\">Select {column.title}...</option>\n            {options.map((option) => (\n              <option key={option.value} value={option.value} disabled={option.disabled}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n            <ChevronDownIcon className=\"h-4 w-4 text-gray-400\" />\n          </div>\n\n          {validationError && (\n            <div className=\"absolute z-10 mt-1 p-2 bg-red-100 border border-red-200 rounded shadow-sm text-xs text-red-800 max-w-xs\">\n              <div className=\"flex items-center space-x-1\">\n                <ExclamationCircleIcon className=\"h-3 w-3 flex-shrink-0\" />\n                <span>{validationError}</span>\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  // Display mode\n  const displayValue =\n    getDisplayLabel(stringValue) || (column.validation?.required ? '(required)' : '(not set)');\n  const isEmpty = !stringValue;\n  const isRequired = column.validation?.required;\n\n  return (\n    <div\n      className={`px-3 py-2 text-sm cursor-pointer hover:bg-gray-50 ${\n        isEmpty && isRequired ? 'text-red-600 bg-red-25' : 'text-gray-900'\n      }`}\n      onClick={disabled ? undefined : onStartEdit}\n      title={disabled ? undefined : 'Click to edit'}\n    >\n      <span className={isEmpty ? 'italic' : ''}>{displayValue}</span>\n      {isEmpty && isRequired && <ExclamationCircleIcon className=\"inline-block h-4 w-4 ml-1 text-red-500\" />}\n    </div>\n  );\n};\n\nexport default DropdownCell;\n"]}