{"version":3,"file":"StringCell.js","sourceRoot":"","sources":["../../../../../src/components/views/GridView/cells/StringCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { GridColumnDefinition } from '../../../../types';\nimport { validateCellValue } from '../../../../utils/cellValidation';\n\n/**\n * Props for the StringCell component.\n */\nexport interface StringCellProps {\n  /** Current value of the cell */\n  value: JsonValue;\n  /** Resource ID for this row */\n  resourceId: string;\n  /** Column configuration */\n  column: GridColumnDefinition;\n  /** Whether this cell is currently being edited */\n  isEditing: boolean;\n  /** Whether the cell is in read-only mode */\n  disabled?: boolean;\n  /** Callback when the value changes */\n  onChange: (value: string) => void;\n  /** Callback when editing starts */\n  onStartEdit: () => void;\n  /** Callback when editing is cancelled */\n  onCancel: () => void;\n  /** Callback when the value should be saved */\n  onSave: (value: string) => void;\n  /** Callback when validation state changes */\n  onValidationChange: (error: string | null) => void;\n}\n\n/**\n * StringCell component for editing string values with validation.\n *\n * Provides text input with configurable validation, visual error highlighting,\n * and support for required fields, length limits, and pattern matching.\n *\n * @example\n * ```tsx\n * <StringCell\n *   value=\"user@example.com\"\n *   resourceId=\"user-123\"\n *   column={{\n *     id: 'email',\n *     validation: {\n *       required: true,\n *       pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n *     }\n *   }}\n *   isEditing={false}\n *   onChange={handleChange}\n *   onSave={handleSave}\n *   onValidationChange={handleValidation}\n * />\n * ```\n * @public\n */\nexport const StringCell: React.FC<StringCellProps> = ({\n  value,\n  resourceId,\n  column,\n  isEditing,\n  disabled = false,\n  onChange,\n  onStartEdit,\n  onCancel,\n  onSave,\n  onValidationChange\n}) => {\n  const [editValue, setEditValue] = useState('');\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  // Convert value to string for editing\n  const stringValue = React.useMemo(() => {\n    if (value === null || value === undefined) return '';\n    if (typeof value === 'string') return value;\n    return String(value);\n  }, [value]);\n\n  // Initialize edit value when editing starts\n  useEffect(() => {\n    if (isEditing) {\n      setEditValue(stringValue);\n    }\n  }, [isEditing, stringValue]);\n\n  // Validate the current edit value\n  const validateCurrentValue = useCallback(() => {\n    if (!isEditing) return;\n\n    const validationResult = validateCellValue(editValue, column.validation);\n\n    if (validationResult.isFailure()) {\n      setValidationError(`Validation failed: ${validationResult.message}`);\n      onValidationChange(`Validation failed: ${validationResult.message}`);\n      return;\n    }\n\n    const result = validationResult.value;\n    const error = result.isValid ? null : result.error || null;\n\n    setValidationError(error);\n    onValidationChange(error);\n  }, [editValue, column.validation, isEditing, onValidationChange]);\n\n  // Validate whenever edit value changes\n  useEffect(() => {\n    validateCurrentValue();\n  }, [validateCurrentValue]);\n\n  // Handle input changes\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = event.target.value;\n      setEditValue(newValue);\n      onChange(newValue);\n    },\n    [onChange]\n  );\n\n  // Handle key presses\n  const handleKeyPress = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' && !validationError) {\n        onSave(editValue);\n      } else if (event.key === 'Escape') {\n        onCancel();\n      }\n    },\n    [editValue, validationError, onSave, onCancel]\n  );\n\n  // Handle save click\n  const handleSave = useCallback(() => {\n    if (!validationError) {\n      onSave(editValue);\n    }\n  }, [editValue, validationError, onSave]);\n\n  if (isEditing) {\n    return (\n      <div className=\"relative\">\n        <input\n          type=\"text\"\n          value={editValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyPress}\n          onBlur={handleSave}\n          disabled={disabled}\n          autoFocus\n          className={`w-full px-2 py-1 text-sm border rounded focus:outline-none focus:ring-2 ${\n            validationError\n              ? 'border-red-500 focus:ring-red-500 bg-red-50'\n              : 'border-gray-300 focus:ring-blue-500'\n          }`}\n          placeholder={column.validation?.required ? `${column.title} (required)` : column.title}\n        />\n\n        {validationError && (\n          <div className=\"absolute z-10 mt-1 p-2 bg-red-100 border border-red-200 rounded shadow-sm text-xs text-red-800 max-w-xs\">\n            <div className=\"flex items-center space-x-1\">\n              <ExclamationCircleIcon className=\"h-3 w-3 flex-shrink-0\" />\n              <span>{validationError}</span>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Display mode\n  const displayValue = stringValue || (column.validation?.required ? '(required)' : '(empty)');\n  const isEmpty = !stringValue;\n  const isRequired = column.validation?.required;\n\n  return (\n    <div\n      className={`px-3 py-2 text-sm cursor-pointer hover:bg-gray-50 ${\n        isEmpty && isRequired ? 'text-red-600 bg-red-25' : 'text-gray-900'\n      }`}\n      onClick={disabled ? undefined : onStartEdit}\n      title={disabled ? undefined : 'Click to edit'}\n    >\n      <span className={isEmpty ? 'italic' : ''}>{displayValue}</span>\n      {isEmpty && isRequired && <ExclamationCircleIcon className=\"inline-block h-4 w-4 ml-1 text-red-500\" />}\n    </div>\n  );\n};\n\nexport default StringCell;\n"]}