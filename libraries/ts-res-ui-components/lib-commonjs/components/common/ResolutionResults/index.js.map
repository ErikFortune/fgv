{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/common/ResolutionResults/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { CubeIcon } from '@heroicons/react/24/outline';\nimport { CandidateInfo, ResolutionActions, ResolutionState, ResourceEditorFactory } from '../../../types';\nimport { EditableJsonView } from '../../views/ResolutionView/EditableJsonView';\n\n/**\n * Props for the ResolutionResults component.\n *\n * @public\n */\nexport interface ResolutionResultsProps {\n  /** The resolution result data to display */\n  result: any;\n  /** View mode determining how resolution results are presented */\n  viewMode: 'composed' | 'best' | 'all' | 'raw';\n  /** Current context values used for resolution */\n  contextValues: Record<string, string | undefined>;\n  /** Optional resolution actions for interactive features */\n  resolutionActions?: ResolutionActions;\n  /** Optional resolution state for editing features */\n  resolutionState?: ResolutionState;\n  /** Optional factory for creating custom resource editors */\n  resourceEditorFactory?: ResourceEditorFactory;\n  /** Optional callback for handling component messages */\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void;\n}\n\n/**\n * A comprehensive component for displaying resource resolution results with multiple view modes.\n *\n * ResolutionResults provides a flexible interface for presenting resource resolution data\n * in various formats including composed values, best candidate selection, all candidates,\n * and raw resolution data. It supports interactive editing when provided with appropriate\n * actions and state, and can be customized with resource editor factories.\n *\n * @example\n * ```tsx\n * import { ResolutionResults } from '@fgv/ts-res-ui-components';\n *\n * function BasicResolutionDisplay() {\n *   const [viewMode, setViewMode] = useState<'composed' | 'best' | 'all' | 'raw'>('composed');\n *   const resolutionResult = { value: 'Hello World', candidates: [...] };\n *   const context = { language: 'en-US', platform: 'web' };\n *\n *   return (\n *     <div>\n *       <div className=\"view-controls\">\n *         <button onClick={() => setViewMode('composed')}>Composed</button>\n *         <button onClick={() => setViewMode('best')}>Best</button>\n *         <button onClick={() => setViewMode('all')}>All</button>\n *         <button onClick={() => setViewMode('raw')}>Raw</button>\n *       </div>\n *       <ResolutionResults\n *         result={resolutionResult}\n *         viewMode={viewMode}\n *         contextValues={context}\n *         onMessage={(type, msg) => console.log(`${type}: ${msg}`)}\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Using with resolution state and editing capabilities\n * import { ResolutionTools } from '@fgv/ts-res-ui-components';\n *\n * function InteractiveResolutionResults() {\n *   const { state: resolutionState, actions: resolutionActions } = ResolutionTools.useResolutionState();\n *\n *   const customEditorFactory = {\n *     createEditor: (resourceId: string, value: any) => ({\n *       success: true,\n *       editor: MyCustomEditor\n *     })\n *   };\n *\n *   return (\n *     <ResolutionResults\n *       result={resolutionState.currentResult}\n *       viewMode={resolutionState.viewMode}\n *       contextValues={resolutionState.context}\n *       resolutionActions={resolutionActions}\n *       resolutionState={resolutionState}\n *       resourceEditorFactory={customEditorFactory}\n *       onMessage={(type, message) => {\n *         resolutionActions.addMessage(type, message);\n *       }}\n *     />\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Advanced usage with orchestrator integration\n * import { ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function OrchestratorResolutionDisplay() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *   const [selectedResourceId, setSelectedResourceId] = useState<string | null>(null);\n *\n *   const handleResourceResolve = async (resourceId: string) => {\n *     const result = await actions.resolveResource(resourceId, state.resolutionState.context);\n *     if (result.isSuccess()) {\n *       setSelectedResourceId(resourceId);\n *     }\n *   };\n *\n *   if (!selectedResourceId || !state.resolutionState.currentResult) {\n *     return <div>Select a resource to see resolution results</div>;\n *   }\n *\n *   return (\n *     <div className=\"resolution-display\">\n *       <div className=\"resource-info\">\n *         <h3>Resolution for: {selectedResourceId}</h3>\n *         <p>Context: {JSON.stringify(state.resolutionState.context)}</p>\n *       </div>\n *       <ResolutionResults\n *         result={state.resolutionState.currentResult}\n *         viewMode={state.resolutionState.viewMode}\n *         contextValues={state.resolutionState.context}\n *         resolutionActions={{\n *           ...state.resolutionState,\n *           setViewMode: actions.setResolutionViewMode,\n *           saveEdit: actions.saveResourceEdit\n *         }}\n *         resolutionState={state.resolutionState}\n *         onMessage={actions.addMessage}\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const ResolutionResults: React.FC<ResolutionResultsProps> = ({\n  result,\n  viewMode,\n  contextValues,\n  resolutionActions,\n  resolutionState,\n  resourceEditorFactory,\n  onMessage\n}) => {\n  // Use a ref to store messages and useCallback to send them\n  const pendingMessagesRef = React.useRef<\n    Array<{ type: 'info' | 'warning' | 'error' | 'success'; message: string }>\n  >([]);\n\n  // Function to queue a message for later sending\n  const queueMessage = React.useCallback(\n    (type: 'info' | 'warning' | 'error' | 'success', message: string) => {\n      pendingMessagesRef.current.push({ type, message });\n    },\n    []\n  );\n\n  // Function to flush queued messages\n  const flushMessages = React.useCallback(() => {\n    if (pendingMessagesRef.current.length > 0 && onMessage) {\n      pendingMessagesRef.current.forEach(({ type, message }) => {\n        onMessage(type, message);\n      });\n      pendingMessagesRef.current = [];\n    }\n  }, [onMessage]);\n\n  // Flush messages after render is complete\n  React.useEffect(() => {\n    flushMessages();\n  });\n\n  // Helper function to create the appropriate resource editor\n  const createResourceEditor = useCallback(\n    (\n      value: any,\n      resourceId: string,\n      isEdited: boolean,\n      editedValue: any,\n      onSave?: (resourceId: string, editedValue: any, originalValue: any) => void,\n      onCancel?: (resourceId: string) => void,\n      disabled?: boolean,\n      className?: string\n    ) => {\n      // Try to get resource type from the result\n      const resourceType =\n        result?.resource?.resourceType?.key || result?.resource?.resourceType?.name || 'unknown';\n\n      // Try the factory first if provided\n      if (resourceEditorFactory) {\n        try {\n          const factoryResult = resourceEditorFactory.createEditor(resourceId, resourceType, value);\n          if (factoryResult.success) {\n            const CustomEditor = factoryResult.editor;\n            return (\n              <CustomEditor\n                value={value}\n                resourceId={resourceId}\n                isEdited={isEdited}\n                editedValue={editedValue}\n                onSave={onSave}\n                onCancel={onCancel}\n                disabled={disabled}\n                className={className}\n              />\n            );\n          } else {\n            // Factory couldn't create editor, queue message and fall back to JSON editor\n            if (factoryResult.message) {\n              queueMessage('info', `Using default JSON editor: ${factoryResult.message}`);\n            }\n            // Continue to fallback JSON editor below\n          }\n        } catch (error) {\n          // Factory threw an error, queue message and fall back to JSON editor\n          queueMessage(\n            'warning',\n            `Resource editor factory failed: ${error instanceof Error ? error.message : String(error)}`\n          );\n          // Continue to fallback JSON editor below\n        }\n      }\n\n      // Fall back to the default JSON editor\n      return (\n        <EditableJsonView\n          value={value}\n          resourceId={resourceId}\n          isEdited={isEdited}\n          editedValue={editedValue}\n          onSave={onSave}\n          onCancel={onCancel}\n          disabled={disabled}\n          className={className}\n        />\n      );\n    },\n    [resourceEditorFactory, result, queueMessage]\n  );\n\n  if (!result.success) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-red-800 mb-2\">Resolution Failed</h4>\n        <p className=\"text-sm text-red-600\">{result.error}</p>\n      </div>\n    );\n  }\n\n  if (viewMode === 'raw') {\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Raw Resolution Data</h4>\n          <pre className=\"text-xs bg-white p-3 rounded border overflow-x-auto\">\n            {JSON.stringify(\n              {\n                context: contextValues,\n                resource: result.resource\n                  ? {\n                      id: result.resource.id,\n                      candidateCount: result.resource.candidates.length\n                    }\n                  : null,\n                bestCandidate: result.bestCandidate?.json,\n                allCandidates: result.allCandidates?.map((c: any) => c.json),\n                composedValue: result.composedValue,\n                error: result.error\n              },\n              null,\n              2\n            )}\n          </pre>\n        </div>\n      </div>\n    );\n  }\n\n  if (viewMode === 'composed') {\n    return (\n      <div className=\"space-y-4\">\n        {result.composedValue ? (\n          createResourceEditor(\n            result.composedValue,\n            result.resourceId,\n            resolutionActions?.hasEdit?.(result.resourceId) || false,\n            resolutionActions?.getEditedValue?.(result.resourceId),\n            resolutionActions?.saveEdit,\n            () => {}, // Could add cancel functionality if needed\n            resolutionState?.isApplyingEdits || false\n          )\n        ) : (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded p-3\">\n            <p className=\"text-sm text-yellow-800\">No composed value available for the current context.</p>\n            {result.error && <p className=\"text-xs text-yellow-600 mt-1\">{result.error}</p>}\n          </div>\n        )}\n\n        {result.resource && (\n          <div>\n            <h4 className=\"font-medium text-gray-800 mb-2\">Resource Info</h4>\n            <div className=\"bg-white p-3 rounded border text-sm\">\n              <div>\n                <strong>ID:</strong> {result.resource.id}\n              </div>\n              <div>\n                <strong>Type:</strong> {result.resource.resourceType.key}\n              </div>\n              <div>\n                <strong>Total Candidates:</strong> {result.resource.candidates.length}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  if (viewMode === 'best') {\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Best Match</h4>\n          {result.bestCandidate ? (\n            <div className=\"bg-white p-3 rounded border border-green-200\">\n              <div className=\"text-sm font-medium text-gray-700 mb-2\">\n                Selected candidate for current context\n              </div>\n              <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n                {JSON.stringify(result.bestCandidate.json, null, 2)}\n              </pre>\n            </div>\n          ) : (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded p-3\">\n              <p className=\"text-sm text-yellow-800\">No best candidate found for the current context.</p>\n              {result.error && <p className=\"text-xs text-yellow-600 mt-1\">{result.error}</p>}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // 'all' view mode\n  const regularMatchingCandidates =\n    result.candidateDetails?.filter((c: CandidateInfo) => c.matched && !c.isDefaultMatch) || [];\n  const defaultMatchingCandidates =\n    result.candidateDetails?.filter((c: CandidateInfo) => c.matched && c.isDefaultMatch) || [];\n  const nonMatchingCandidates = result.candidateDetails?.filter((c: CandidateInfo) => !c.matched) || [];\n\n  const getMatchTypeColor = (type: string) => {\n    switch (type) {\n      case 'match':\n        return 'bg-green-100 text-green-800';\n      case 'matchAsDefault':\n        return 'bg-amber-100 text-amber-800';\n      case 'noMatch':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getMatchTypeIcon = (type: string) => {\n    switch (type) {\n      case 'match':\n        return '✓';\n      case 'matchAsDefault':\n        return '≈';\n      case 'noMatch':\n        return '✗';\n      default:\n        return '?';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Regular Matching Candidates */}\n      {regularMatchingCandidates.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Regular Matches</h4>\n          <div className=\"space-y-2\">\n            {regularMatchingCandidates.map((candidateInfo: CandidateInfo, index: number) => (\n              <div\n                key={`regular-${candidateInfo.candidateIndex}`}\n                className=\"bg-white p-3 rounded border border-green-200\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"text-sm font-medium text-gray-700 flex items-center space-x-2\">\n                    <span>\n                      Candidate {candidateInfo.candidateIndex + 1} {index === 0 ? '(Best Match)' : ''}\n                    </span>\n                    <span\n                      className={`px-2 py-1 rounded text-xs ${getMatchTypeColor(candidateInfo.matchType)}`}\n                    >\n                      {getMatchTypeIcon(candidateInfo.matchType)} {candidateInfo.matchType}\n                    </span>\n                  </div>\n                </div>\n                <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n                  {JSON.stringify(candidateInfo.candidate.json, null, 2)}\n                </pre>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Default Matching Candidates */}\n      {defaultMatchingCandidates.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Default Matches</h4>\n          <div className=\"space-y-2\">\n            {defaultMatchingCandidates.map((candidateInfo: CandidateInfo) => (\n              <div\n                key={`default-${candidateInfo.candidateIndex}`}\n                className=\"bg-white p-3 rounded border border-amber-200\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"text-sm font-medium text-gray-700 flex items-center space-x-2\">\n                    <span>Candidate {candidateInfo.candidateIndex + 1}</span>\n                    <span\n                      className={`px-2 py-1 rounded text-xs ${getMatchTypeColor(candidateInfo.matchType)}`}\n                    >\n                      {getMatchTypeIcon(candidateInfo.matchType)} {candidateInfo.matchType}\n                    </span>\n                  </div>\n                </div>\n                <pre className=\"text-xs bg-gray-50 p-2 rounded overflow-x-auto\">\n                  {JSON.stringify(candidateInfo.candidate.json, null, 2)}\n                </pre>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Show message when no matches */}\n      {regularMatchingCandidates.length === 0 && defaultMatchingCandidates.length === 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-800 mb-2\">Matching Candidates</h4>\n          <p className=\"text-sm text-gray-600\">No candidates matched the current context.</p>\n        </div>\n      )}\n\n      {/* Non-matching Candidates */}\n      {nonMatchingCandidates.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-gray-500 mb-2\">Non-matching Candidates</h4>\n          <div className=\"space-y-2\">\n            {nonMatchingCandidates.slice(0, 3).map((candidateInfo: CandidateInfo) => (\n              <div\n                key={`non-matching-${candidateInfo.candidateIndex}`}\n                className=\"bg-gray-50 p-3 rounded border border-gray-200 opacity-75\"\n              >\n                <div className=\"text-sm font-medium text-gray-500 mb-2\">\n                  Candidate {candidateInfo.candidateIndex + 1}\n                </div>\n                <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-x-auto text-gray-600\">\n                  {JSON.stringify(candidateInfo.candidate.json, null, 2)}\n                </pre>\n              </div>\n            ))}\n            {nonMatchingCandidates.length > 3 && (\n              <div className=\"text-center text-sm text-gray-500\">\n                ... and {nonMatchingCandidates.length - 3} more non-matching candidates\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ResolutionResults;\n"]}