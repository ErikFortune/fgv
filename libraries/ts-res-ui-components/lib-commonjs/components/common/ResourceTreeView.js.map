{"version":3,"file":"ResourceTreeView.js","sourceRoot":"","sources":["../../../src/components/common/ResourceTreeView.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport {\n  ChevronRightIcon,\n  ChevronDownIcon,\n  DocumentTextIcon,\n  FolderIcon,\n  FolderOpenIcon\n} from '@heroicons/react/24/outline';\nimport { Resources, Runtime } from '@fgv/ts-res';\nimport { useObservability } from '../../contexts';\n\n/**\n * Props for the ResourceTreeView component.\n *\n * @public\n */\ninterface ResourceTreeViewProps {\n  /** Resource manager or compiled collection to display as a tree */\n  resources: Resources.ResourceManagerBuilder | Runtime.CompiledResourceCollection;\n  /** Currently selected resource ID for highlighting */\n  selectedResourceId: string | null;\n  /** Callback fired when a resource is selected */\n  onResourceSelect: (resourceId: string) => void;\n  /** Optional search term to filter and highlight resources */\n  searchTerm?: string;\n  /** Optional CSS classes to apply to the container */\n  className?: string;\n}\n\n/**\n * Internal tree node structure for rendering.\n *\n * @internal\n */\ninterface TreeNode {\n  id: string;\n  name: string;\n  isLeaf: boolean;\n  resource?: Resources.Resource | Runtime.IResource;\n  children?: Map<string, TreeNode>;\n  isExpanded?: boolean;\n  isVisible?: boolean;\n  matchesSearch?: boolean;\n}\n\n/**\n * A hierarchical tree view component for displaying and navigating resource structures.\n *\n * ResourceTreeView provides an interactive tree interface for browsing resource hierarchies,\n * with support for expansion/collapse, search filtering, selection highlighting, and intelligent\n * tree navigation. It automatically builds the tree structure from ts-res resource managers\n * and supports both builder and compiled resource collections.\n *\n * @example\n * ```tsx\n * import { ResourceTreeView } from '@fgv/ts-res-ui-components';\n *\n * function HierarchicalResourceBrowser() {\n *   const [selectedId, setSelectedId] = useState<string | null>(null);\n *   const [searchTerm, setSearchTerm] = useState('');\n *\n *   return (\n *     <div className=\"flex flex-col h-full\">\n *       <div className=\"p-4 border-b\">\n *         <input\n *           type=\"search\"\n *           placeholder=\"Search in tree...\"\n *           value={searchTerm}\n *           onChange={(e) => setSearchTerm(e.target.value)}\n *           className=\"w-full px-3 py-2 border rounded-md\"\n *         />\n *       </div>\n *       <ResourceTreeView\n *         resources={resourceManager}\n *         selectedResourceId={selectedId}\n *         onResourceSelect={setSelectedId}\n *         searchTerm={searchTerm}\n *         className=\"flex-1 min-h-0 p-2\"\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Using with orchestrator state for integrated navigation\n * import { ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function OrchestratorTreeView() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *   const [searchTerm, setSearchTerm] = useState('');\n *\n *   if (!state.resources) {\n *     return <div className=\"p-4 text-gray-500\">No resources loaded</div>;\n *   }\n *\n *   return (\n *     <div className=\"h-full flex flex-col\">\n *       <div className=\"flex items-center gap-2 p-2 border-b\">\n *         <input\n *           type=\"search\"\n *           placeholder=\"Search resources...\"\n *           value={searchTerm}\n *           onChange={(e) => setSearchTerm(e.target.value)}\n *           className=\"flex-1 px-3 py-1 text-sm border rounded\"\n *         />\n *         <span className=\"text-xs text-gray-500\">\n *           {state.resources.summary?.resourceCount || 0} resources\n *         </span>\n *       </div>\n *       <ResourceTreeView\n *         resources={state.resources.resourceManager}\n *         selectedResourceId={state.selectedResourceId}\n *         onResourceSelect={(id) => actions.selectResource(id)}\n *         searchTerm={searchTerm}\n *         className=\"flex-1 min-h-0 overflow-auto\"\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Advanced usage with custom tree navigation\n * function AdvancedResourceTree({ resources, onResourceAction }) {\n *   const [selectedId, setSelectedId] = useState<string | null>(null);\n *   const [searchTerm, setSearchTerm] = useState('');\n *\n *   const handleResourceSelect = (resourceId: string) => {\n *     setSelectedId(resourceId);\n *     onResourceAction('select', resourceId);\n *   };\n *\n *   const handleKeyDown = (event: React.KeyboardEvent) => {\n *     if (event.key === 'Enter' && selectedId) {\n *       onResourceAction('open', selectedId);\n *     }\n *   };\n *\n *   return (\n *     <div\n *       className=\"resource-tree-container\"\n *       onKeyDown={handleKeyDown}\n *       tabIndex={0}\n *     >\n *       <div className=\"tree-header\">\n *         <input\n *           type=\"search\"\n *           placeholder=\"Find resources in tree...\"\n *           value={searchTerm}\n *           onChange={(e) => setSearchTerm(e.target.value)}\n *         />\n *         <div className=\"tree-stats\">\n *           {resources && (\n *             <span>\n *               Tree: {resources.getBuiltResourceTree().isSuccess() ? 'Built' : 'Error'}\n *             </span>\n *           )}\n *         </div>\n *       </div>\n *       <ResourceTreeView\n *         resources={resources}\n *         selectedResourceId={selectedId}\n *         onResourceSelect={handleResourceSelect}\n *         searchTerm={searchTerm}\n *         className=\"tree-content\"\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const ResourceTreeView: React.FC<ResourceTreeViewProps> = ({\n  resources,\n  selectedResourceId,\n  onResourceSelect,\n  searchTerm = '',\n  className = ''\n}) => {\n  // Get observability context\n  const o11y = useObservability();\n\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());\n\n  // Build the tree structure from resources\n  const treeData = useMemo(() => {\n    if (!resources) return null;\n\n    // Get the tree from the resources\n    const treeResult = resources.getBuiltResourceTree();\n    if (treeResult.isFailure()) {\n      o11y.diag.error('Failed to build resource tree:', treeResult.message);\n      return null;\n    }\n\n    return treeResult.value;\n  }, [resources]);\n\n  // Filter tree based on search term\n  const filteredTree = useMemo(() => {\n    if (!treeData || !searchTerm) return treeData;\n\n    // Helper function to check if a node or its descendants match the search\n    const markMatchingNodes = (\n      node: Runtime.ResourceTree.IReadOnlyResourceTreeNode<any>,\n      searchLower: string\n    ): boolean => {\n      const nodeIdLower = node.id.toLowerCase();\n      let matches = nodeIdLower.includes(searchLower);\n\n      if (!node.isLeaf && node.children) {\n        // Check children recursively\n        for (const child of node.children.values()) {\n          if (markMatchingNodes(child, searchLower)) {\n            matches = true;\n          }\n        }\n      }\n\n      return matches;\n    };\n\n    // Mark all matching nodes\n    const searchLower = searchTerm.toLowerCase();\n    for (const child of treeData.children.values()) {\n      markMatchingNodes(child, searchLower);\n    }\n\n    return treeData;\n  }, [treeData, searchTerm]);\n\n  // Toggle node expansion\n  const toggleNode = useCallback((nodeId: string) => {\n    setExpandedNodes((prev) => {\n      const newExpanded = new Set(prev);\n      if (newExpanded.has(nodeId)) {\n        newExpanded.delete(nodeId);\n      } else {\n        newExpanded.add(nodeId);\n      }\n      return newExpanded;\n    });\n  }, []);\n\n  // Expand all nodes that contain search matches\n  const expandMatchingNodes = useCallback(() => {\n    if (!searchTerm || !filteredTree) return;\n\n    const searchLower = searchTerm.toLowerCase();\n    const nodesToExpand = new Set<string>();\n\n    const checkNode = (node: Runtime.ResourceTree.IReadOnlyResourceTreeNode<any>) => {\n      if (node.id.toLowerCase().includes(searchLower)) {\n        // Expand all parent nodes\n        const parts = node.id.split('.');\n        for (let i = 1; i < parts.length; i++) {\n          nodesToExpand.add(parts.slice(0, i).join('.'));\n        }\n      }\n\n      if (!node.isLeaf && node.children) {\n        for (const child of node.children.values()) {\n          checkNode(child);\n        }\n      }\n    };\n\n    for (const child of filteredTree.children.values()) {\n      checkNode(child);\n    }\n\n    setExpandedNodes(nodesToExpand);\n  }, [searchTerm, filteredTree]);\n\n  // Auto-expand when search term changes\n  React.useEffect(() => {\n    if (searchTerm) {\n      expandMatchingNodes();\n    }\n  }, [searchTerm, expandMatchingNodes]);\n\n  // Render a single tree node\n  const renderTreeNode = (\n    node: Runtime.ResourceTree.IReadOnlyResourceTreeNode<Resources.Resource | Runtime.IResource>,\n    level: number = 0\n  ): React.ReactElement | null => {\n    const isExpanded = expandedNodes.has(node.id);\n    const isSelected = selectedResourceId === node.id;\n    const nodeIdLower = node.id.toLowerCase();\n    const searchLower = searchTerm.toLowerCase();\n    const matchesSearch = !searchTerm || nodeIdLower.includes(searchLower);\n\n    // Check if any children match\n    let hasMatchingChildren = false;\n    if (!node.isLeaf && node.children && searchTerm) {\n      const checkChildren = (n: Runtime.ResourceTree.IReadOnlyResourceTreeNode<any>): boolean => {\n        if (n.id.toLowerCase().includes(searchLower)) return true;\n        if (!n.isLeaf && n.children) {\n          for (const child of n.children.values()) {\n            if (checkChildren(child)) return true;\n          }\n        }\n        return false;\n      };\n\n      for (const child of node.children.values()) {\n        if (checkChildren(child)) {\n          hasMatchingChildren = true;\n          break;\n        }\n      }\n    }\n\n    // Hide nodes that don't match search and don't have matching children\n    if (searchTerm && !matchesSearch && !hasMatchingChildren) {\n      return null;\n    }\n\n    return (\n      <div key={node.id}>\n        <div\n          className={`flex items-center px-2 py-1 cursor-pointer hover:bg-gray-100 ${\n            isSelected ? 'bg-purple-50 border-l-2 border-purple-500' : ''\n          } ${matchesSearch && searchTerm ? 'bg-yellow-50' : ''}`}\n          style={{ paddingLeft: `${level * 20 + 8}px` }}\n          onClick={() => {\n            if (node.isLeaf) {\n              onResourceSelect(node.id);\n            } else {\n              toggleNode(node.id);\n            }\n          }}\n        >\n          {/* Expand/Collapse icon for branches */}\n          {!node.isLeaf && (\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleNode(node.id);\n              }}\n              className=\"mr-1 p-0.5 hover:bg-gray-200 rounded\"\n            >\n              {isExpanded ? (\n                <ChevronDownIcon className=\"w-3 h-3 text-gray-600\" />\n              ) : (\n                <ChevronRightIcon className=\"w-3 h-3 text-gray-600\" />\n              )}\n            </button>\n          )}\n\n          {/* Folder or document icon */}\n          {node.isLeaf ? (\n            <DocumentTextIcon className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />\n          ) : isExpanded ? (\n            <FolderOpenIcon className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />\n          ) : (\n            <FolderIcon className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />\n          )}\n\n          {/* Node name */}\n          <span\n            className={`text-sm truncate ${isSelected ? 'font-medium text-purple-900' : 'text-gray-700'} ${\n              matchesSearch && searchTerm ? 'font-medium' : ''\n            }`}\n            title={node.id}\n          >\n            {node.name}\n          </span>\n\n          {/* Show child count for branches */}\n          {!node.isLeaf && node.children && (\n            <span className=\"ml-2 text-xs text-gray-500\">({node.children.size})</span>\n          )}\n        </div>\n\n        {/* Render children if expanded */}\n        {!node.isLeaf && node.children && isExpanded && (\n          <div>\n            {Array.from(node.children.values())\n              .sort((a, b) => {\n                // Sort folders first, then by name\n                if (a.isLeaf !== b.isLeaf) {\n                  return a.isLeaf ? 1 : -1;\n                }\n                return a.name.localeCompare(b.name);\n              })\n              .map((child) => renderTreeNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (!filteredTree) {\n    return (\n      <div className={`${className} p-4 text-center text-gray-500`}>\n        <p>No resources available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} overflow-y-auto`}>\n      {Array.from(filteredTree.children.values())\n        .sort((a, b) => {\n          // Sort folders first, then by name\n          if (a.isLeaf !== b.isLeaf) {\n            return a.isLeaf ? 1 : -1;\n          }\n          return a.name.localeCompare(b.name);\n        })\n        .map((child) => renderTreeNode(child))}\n    </div>\n  );\n};\n\nexport default ResourceTreeView;\n"]}