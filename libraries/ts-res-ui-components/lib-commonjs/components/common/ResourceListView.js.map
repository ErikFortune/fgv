{"version":3,"file":"ResourceListView.js","sourceRoot":"","sources":["../../../src/components/common/ResourceListView.tsx"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,yDAA+D;AAoB/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6FG;AACI,MAAM,gBAAgB,GAAoC,CAAC,EAChE,WAAW,EACX,kBAAkB,EAClB,gBAAgB,EAChB,UAAU,GAAG,EAAE,EACf,SAAS,GAAG,EAAE,EACf,EAAE,EAAE;IACH,+BAA+B;IAC/B,MAAM,mBAAmB,GAAG,eAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC7C,MAAM,QAAQ,GAAG,UAAU;YACzB,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;YACjF,CAAC,CAAC,WAAW,CAAC;QAEhB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;IAE9B,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACrC,OAAO,CACL,uCAAK,SAAS,EAAE,GAAG,SAAS,gCAAgC;YAC1D,yCAAI,UAAU,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,wBAAwB,CAAK,CAC7E,CACP,CAAC;IACJ,CAAC;IAED,OAAO,CACL,uCAAK,SAAS,EAAE,GAAG,SAAS,kBAAkB,IAC3C,mBAAmB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CACvC,uCACE,GAAG,EAAE,UAAU,EACf,SAAS,EAAE,yGACT,kBAAkB,KAAK,UAAU,CAAC,CAAC,CAAC,2CAA2C,CAAC,CAAC,CAAC,EACpF,IACE,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAC/F,EAAE,EACF,OAAO,EAAE,GAAG,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC;QAE3C,8BAAC,0BAAgB,IAAC,SAAS,EAAC,2CAA2C,GAAG;QAC1E,wCACE,SAAS,EAAE,oBACT,kBAAkB,KAAK,UAAU,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,eACtE,EAAE,EACF,KAAK,EAAE,UAAU,IAEhB,UAAU,CACN,CACH,CACP,CAAC,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAjDW,QAAA,gBAAgB,oBAiD3B;AAEF,kBAAe,wBAAgB,CAAC","sourcesContent":["import React from 'react';\nimport { DocumentTextIcon } from '@heroicons/react/24/outline';\n\n/**\n * Props for the ResourceListView component.\n *\n * @public\n */\ninterface ResourceListViewProps {\n  /** Array of resource IDs to display in the list */\n  resourceIds: string[];\n  /** Currently selected resource ID for highlighting */\n  selectedResourceId: string | null;\n  /** Callback fired when a resource is selected */\n  onResourceSelect: (resourceId: string) => void;\n  /** Optional search term to filter resources (case-insensitive) */\n  searchTerm?: string;\n  /** Optional CSS classes to apply to the container */\n  className?: string;\n}\n\n/**\n * A flat list view component for displaying and selecting resources.\n *\n * ResourceListView provides a simple, scrollable list interface for browsing through\n * resource IDs with built-in search filtering, selection highlighting, and hover effects.\n * It's optimized for flat resource hierarchies and provides a clean, accessible interface.\n *\n * @example\n * ```tsx\n * import { ResourceListView } from '@fgv/ts-res-ui-components';\n *\n * function ResourceBrowser() {\n *   const [selectedId, setSelectedId] = useState<string | null>(null);\n *   const [searchTerm, setSearchTerm] = useState('');\n *\n *   const resourceIds = ['user.welcome', 'user.goodbye', 'error.notFound', 'button.save'];\n *\n *   return (\n *     <div>\n *       <input\n *         type=\"text\"\n *         placeholder=\"Search resources...\"\n *         value={searchTerm}\n *         onChange={(e) => setSearchTerm(e.target.value)}\n *       />\n *       <ResourceListView\n *         resourceIds={resourceIds}\n *         selectedResourceId={selectedId}\n *         onResourceSelect={setSelectedId}\n *         searchTerm={searchTerm}\n *         className=\"h-64 border rounded\"\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Using with orchestrator state\n * import { ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function OrchestratorResourceList() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *   const resourceIds = state.resources?.summary?.resourceIds || [];\n *\n *   return (\n *     <ResourceListView\n *       resourceIds={resourceIds}\n *       selectedResourceId={state.selectedResourceId}\n *       onResourceSelect={(id) => actions.selectResource(id)}\n *       className=\"flex-1 min-h-0\"\n *     />\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // With search integration and custom handling\n * function SearchableResourceList({ resources, onResourceDetails }) {\n *   const [searchTerm, setSearchTerm] = useState('');\n *   const [selectedId, setSelectedId] = useState<string | null>(null);\n *\n *   const handleResourceSelect = (resourceId: string) => {\n *     setSelectedId(resourceId);\n *     onResourceDetails(resourceId);\n *   };\n *\n *   return (\n *     <div className=\"flex flex-col h-full\">\n *       <div className=\"p-4 border-b\">\n *         <input\n *           type=\"search\"\n *           placeholder=\"Filter resources...\"\n *           value={searchTerm}\n *           onChange={(e) => setSearchTerm(e.target.value)}\n *           className=\"w-full px-3 py-2 border rounded-md\"\n *         />\n *       </div>\n *       <ResourceListView\n *         resourceIds={resources.map(r => r.id)}\n *         selectedResourceId={selectedId}\n *         onResourceSelect={handleResourceSelect}\n *         searchTerm={searchTerm}\n *         className=\"flex-1 min-h-0\"\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const ResourceListView: React.FC<ResourceListViewProps> = ({\n  resourceIds,\n  selectedResourceId,\n  onResourceSelect,\n  searchTerm = '',\n  className = ''\n}) => {\n  // Filter and sort resource IDs\n  const filteredResourceIds = React.useMemo(() => {\n    const filtered = searchTerm\n      ? resourceIds.filter((id) => id.toLowerCase().includes(searchTerm.toLowerCase()))\n      : resourceIds;\n\n    return filtered.sort();\n  }, [resourceIds, searchTerm]);\n\n  if (filteredResourceIds.length === 0) {\n    return (\n      <div className={`${className} p-4 text-center text-gray-500`}>\n        <p>{searchTerm ? 'No resources match your search' : 'No resources available'}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} overflow-y-auto`}>\n      {filteredResourceIds.map((resourceId) => (\n        <div\n          key={resourceId}\n          className={`flex items-center px-3 py-2 cursor-pointer hover:bg-gray-100 border-b border-gray-100 last:border-b-0 ${\n            selectedResourceId === resourceId ? 'bg-purple-50 border-l-2 border-purple-500' : ''\n          } ${\n            searchTerm && resourceId.toLowerCase().includes(searchTerm.toLowerCase()) ? 'bg-yellow-50' : ''\n          }`}\n          onClick={() => onResourceSelect(resourceId)}\n        >\n          <DocumentTextIcon className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />\n          <span\n            className={`text-sm truncate ${\n              selectedResourceId === resourceId ? 'font-medium text-purple-900' : 'text-gray-700'\n            }`}\n            title={resourceId}\n          >\n            {resourceId}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ResourceListView;\n"]}