{"version":3,"file":"QualifierContextControl.js","sourceRoot":"","sources":["../../../src/components/common/QualifierContextControl.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { ProcessedResources, QualifierControlOptions } from '../../types';\nimport { useObservability } from '../../contexts';\n\n/**\n * Props for the QualifierContextControl component.\n *\n * @public\n */\nexport interface QualifierContextControlProps {\n  /** Name of the qualifier being controlled */\n  qualifierName: string;\n  /** Current value of the qualifier */\n  value: string | undefined;\n  /** Callback fired when the qualifier value changes */\n  onChange: (qualifierName: string, value: string | undefined) => void;\n  /** Whether the control is disabled */\n  disabled?: boolean;\n  /** Placeholder text for empty value */\n  placeholder?: string;\n  /** Optional processed resources for auto-suggesting values */\n  resources?: ProcessedResources | null;\n  /** Optional CSS classes to apply to the control */\n  className?: string;\n  /** Extended options for controlling the qualifier behavior */\n  options?: QualifierControlOptions;\n}\n\n/**\n * A control component for managing individual qualifier context values.\n *\n * QualifierContextControl provides an interface for setting and modifying qualifier values\n * used in resource resolution context. It can optionally suggest values based on available\n * resources and supports both manual input and selection from predefined options.\n *\n * @example\n * ```tsx\n * import { ResolutionTools } from '@fgv/ts-res-ui-components';\n *\n * function QualifierSettings() {\n *   const [context, setContext] = useState<Record<string, string | undefined>>({\n *     language: 'en-US',\n *     platform: undefined\n *   });\n *\n *   const handleQualifierChange = (name: string, value: string | undefined) => {\n *     setContext(prev => ({ ...prev, [name]: value }));\n *   };\n *\n *   return (\n *     <div>\n *       <ResolutionTools.QualifierContextControl\n *         qualifierName=\"language\"\n *         value={context.language}\n *         onChange={handleQualifierChange}\n *         placeholder=\"Select language...\"\n *       />\n *       <ResolutionTools.QualifierContextControl\n *         qualifierName=\"platform\"\n *         value={context.platform}\n *         onChange={handleQualifierChange}\n *         placeholder=\"Select platform...\"\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Using with processed resources for value suggestions\n * import { ResolutionTools, ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function SmartQualifierControl() {\n *   const { state } = ResourceTools.useResourceData();\n *   const [qualifierValue, setQualifierValue] = useState<string | undefined>();\n *\n *   return (\n *     <ResolutionTools.QualifierContextControl\n *       qualifierName=\"region\"\n *       value={qualifierValue}\n *       onChange={(name, value) => setQualifierValue(value)}\n *       resources={state.resources}\n *       placeholder=\"Auto-suggested regions...\"\n *       className=\"w-full\"\n *     />\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Using with host-managed values and custom options\n * import { ResolutionTools } from '@fgv/ts-res-ui-components';\n *\n * function HostControlledQualifier() {\n *   return (\n *     <ResolutionTools.QualifierContextControl\n *       qualifierName=\"platform\"\n *       value={undefined} // Ignored when hostValue is set\n *       onChange={() => {}} // Called only when editable\n *       options={{\n *         editable: false,\n *         hostValue: 'web',\n *         showHostValue: true,\n *         placeholder: 'Platform controlled by application',\n *         className: 'border-blue-300'\n *       }}\n *     />\n *   );\n * }\n * ```\n *\n * @example\n * ```tsx\n * // Using for selective visibility and editability\n * function ConditionalQualifierControls() {\n *   const [userRole, setUserRole] = useState<'admin' | 'user'>('user');\n *\n *   return (\n *     <div>\n *       <ResolutionTools.QualifierContextControl\n *         qualifierName=\"environment\"\n *         value={envValue}\n *         onChange={handleEnvChange}\n *         options={{\n *           visible: userRole === 'admin', // Only visible to admins\n *           editable: true,\n *           placeholder: 'Select environment...'\n *         }}\n *       />\n *       <ResolutionTools.QualifierContextControl\n *         qualifierName=\"language\"\n *         value={langValue}\n *         onChange={handleLangChange}\n *         options={{\n *           visible: true,\n *           editable: userRole === 'admin', // Only editable by admins\n *           placeholder: userRole === 'admin' ? 'Select language...' : 'Language locked'\n *         }}\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const QualifierContextControl: React.FC<QualifierContextControlProps> = ({\n  qualifierName,\n  value,\n  onChange,\n  disabled = false,\n  placeholder,\n  resources,\n  className = '',\n  options\n}) => {\n  // Get observability context\n  const o11y = useObservability();\n\n  // Extract qualifier type information from system configuration\n  const qualifierInfo = useMemo(() => {\n    if (!resources?.system?.qualifiers) {\n      return { hasEnumeratedValues: false, enumeratedValues: [] };\n    }\n\n    try {\n      // Get qualifier declaration\n      const qualifierResult = resources.system.qualifiers.validating.get(qualifierName);\n\n      if (!qualifierResult.isSuccess()) {\n        return { hasEnumeratedValues: false, enumeratedValues: [] };\n      }\n\n      const qualifier = qualifierResult.value;\n\n      // Access the instantiated qualifier type\n      if (qualifier.type) {\n        const qualifierType = qualifier.type;\n        // Use type assertion to access properties that may exist on specific subtypes\n        const qtAny = qualifierType as unknown as Record<string, unknown>;\n        const config = (qtAny.configuration || {}) as Record<string, unknown>;\n\n        // Look for enumerated values in different possible locations\n        const enumeratedValues =\n          config.enumeratedValues ||\n          config.allowedTerritories ||\n          qtAny.enumeratedValues ||\n          qtAny.allowedTerritories ||\n          [];\n\n        if (enumeratedValues && Array.isArray(enumeratedValues) && enumeratedValues.length > 0) {\n          return {\n            hasEnumeratedValues: true,\n            enumeratedValues: enumeratedValues as string[],\n            systemType: (qtAny.systemType as string) || 'literal',\n            caseSensitive: config.caseSensitive !== false\n          };\n        }\n      }\n\n      return { hasEnumeratedValues: false, enumeratedValues: [] };\n    } catch (error) {\n      o11y.diag.warn(`Failed to extract qualifier type info for ${qualifierName}:`, error);\n      return { hasEnumeratedValues: false, enumeratedValues: [] };\n    }\n  }, [qualifierName, resources?.system?.qualifiers]);\n\n  // Apply options with defaults\n  const isVisible = options?.visible ?? true;\n  const isEditable = options?.editable ?? true;\n  const hostValue = options?.hostValue;\n  const showHostValue = options?.showHostValue ?? true;\n  const customPlaceholder = options?.placeholder;\n  const customClassName = options?.className || '';\n\n  // Determine effective values\n  const isEffectivelyDisabled = disabled || !isEditable;\n  const effectiveValue = hostValue !== undefined ? hostValue ?? '' : value ?? '';\n  const isHostManaged = hostValue !== undefined;\n\n  // Determine placeholder text\n  const effectivePlaceholder = customPlaceholder || placeholder || `Enter ${qualifierName} value`;\n\n  const handleChange = (newValue: string) => {\n    // Only allow changes if not host-managed and editable\n    if (!isHostManaged && isEditable) {\n      onChange(qualifierName, newValue || undefined);\n    }\n  };\n\n  const handleClear = () => {\n    // Only allow clearing if not host-managed and editable\n    if (!isHostManaged && isEditable) {\n      onChange(qualifierName, undefined);\n    }\n  };\n\n  const hasEnumeratedValues = qualifierInfo.hasEnumeratedValues && qualifierInfo.enumeratedValues.length > 0;\n\n  // Don't render if not visible\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div className={`bg-white rounded border border-gray-200 p-2 ${className} ${customClassName}`}>\n      <div className=\"flex items-center gap-2\">\n        <label className=\"text-sm font-medium text-gray-700 min-w-0 flex-shrink-0 flex items-center gap-1\">\n          {qualifierName}:\n          {isHostManaged && showHostValue && (\n            <span\n              className=\"text-[10px] px-1 py-0.5 rounded bg-blue-100 text-blue-700\"\n              title=\"Host-managed value\"\n            >\n              HOST\n            </span>\n          )}\n          {!isHostManaged && !isEditable && (\n            <span\n              className=\"text-[10px] px-1 py-0.5 rounded bg-gray-200 text-gray-700\"\n              title=\"Locked by host or configuration\"\n            >\n              LOCKED\n            </span>\n          )}\n        </label>\n        <div className=\"flex-1 flex items-center gap-1\">\n          {hasEnumeratedValues ? (\n            // Dropdown for enumerated values\n            <select\n              value={effectiveValue}\n              onChange={(e) => handleChange(e.target.value)}\n              disabled={isEffectivelyDisabled}\n              title={isHostManaged ? 'Host-managed value - controlled externally' : undefined}\n              className={`flex-1 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm min-w-0 ${\n                isEffectivelyDisabled ? 'bg-gray-100 text-gray-400' : ''\n              } ${isHostManaged ? 'border-blue-300 bg-blue-50' : ''}`}\n            >\n              <option value=\"\">\n                {isHostManaged\n                  ? effectiveValue !== ''\n                    ? effectiveValue\n                    : '(undefined)'\n                  : isEffectivelyDisabled\n                  ? 'Disabled'\n                  : effectiveValue === ''\n                  ? '(undefined)'\n                  : effectivePlaceholder}\n              </option>\n              {qualifierInfo.enumeratedValues.map((enumValue: string) => (\n                <option key={enumValue} value={enumValue}>\n                  {enumValue}\n                </option>\n              ))}\n            </select>\n          ) : (\n            // Text input for non-enumerated values\n            <input\n              type=\"text\"\n              value={effectiveValue}\n              onChange={(e) => handleChange(e.target.value)}\n              disabled={isEffectivelyDisabled}\n              title={isHostManaged ? 'Host-managed value - controlled externally' : undefined}\n              className={`flex-1 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent text-sm min-w-0 ${\n                isEffectivelyDisabled ? 'bg-gray-100 text-gray-400' : ''\n              } ${isHostManaged ? 'border-blue-300 bg-blue-50' : ''}`}\n              placeholder={\n                isHostManaged && effectiveValue === ''\n                  ? '(undefined)'\n                  : isEffectivelyDisabled\n                  ? 'Disabled'\n                  : effectiveValue === ''\n                  ? '(undefined)'\n                  : effectivePlaceholder\n              }\n            />\n          )}\n          {!isEffectivelyDisabled && !isHostManaged && effectiveValue !== '' && (\n            <button\n              type=\"button\"\n              onClick={handleClear}\n              className=\"px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded transition-colors\"\n              title=\"Set to undefined\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n      </div>\n      {/* Show enumerated values indicator */}\n      {hasEnumeratedValues && (\n        <div className=\"mt-1 text-xs text-blue-600\">\n          {qualifierInfo.enumeratedValues.length} predefined values\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QualifierContextControl;\n"]}