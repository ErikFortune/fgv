{"version":3,"file":"ResourceOrchestrator.js","sourceRoot":"","sources":["../../../src/components/orchestrator/ResourceOrchestrator.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { ObservabilityProvider, useObservability } from '../../contexts';\nimport { Config, Bundle, QualifierTypes, ResourceTypes } from '@fgv/ts-res';\nimport {\n  OrchestratorState,\n  OrchestratorActions,\n  ImportedDirectory,\n  ImportedFile,\n  ProcessedResources,\n  FilterState,\n  FilterResult\n} from '../../types';\nimport * as ObservabilityTools from '../../utils/observability';\nimport { useResourceData } from '../../hooks/useResourceData';\nimport { useFilterState } from '../../hooks/useFilterState';\nimport { useViewState } from '../../hooks/useViewState';\nimport { useResolutionState } from '../../hooks/useResolutionState';\nimport { createFilteredResourceManagerSimple, analyzeFilteredResources } from '../../utils/filterResources';\nimport { DownloadUtils } from '../../utils/downloadHelper';\nimport { Runtime } from '@fgv/ts-res';\n\n/**\n * Props for the ResourceOrchestrator component.\n * Provides render props pattern for resource management UI.\n *\n * @public\n */\nexport interface ResourceOrchestratorProps {\n  /** Render function that receives orchestrator state and actions */\n  children: (orchestrator: { state: OrchestratorState; actions: OrchestratorActions }) => ReactNode;\n  /** Optional initial configuration to apply on mount */\n  initialConfiguration?: Config.Model.ISystemConfiguration;\n  /** Optional qualifier type factory for creating custom qualifier types */\n  qualifierTypeFactory?: Config.IConfigInitFactory<\n    QualifierTypes.Config.IAnyQualifierTypeConfig,\n    QualifierTypes.QualifierType\n  >;\n  /** Optional resource type factory for creating custom resource types */\n  resourceTypeFactory?: Config.IConfigInitFactory<\n    ResourceTypes.Config.IResourceTypeConfig,\n    ResourceTypes.ResourceType\n  >;\n  /** Callback fired when orchestrator state changes */\n  onStateChange?: (state: Partial<OrchestratorState>) => void;\n  /** Optional observability context for logging and user feedback */\n  observabilityContext?: ObservabilityTools.IObservabilityContext;\n}\n\n/**\n * Internal orchestrator component that has access to observability context via hook.\n */\nconst ResourceOrchestratorInternal: React.FC<Omit<ResourceOrchestratorProps, 'observabilityContext'>> = ({\n  children,\n  initialConfiguration,\n  qualifierTypeFactory,\n  resourceTypeFactory,\n  onStateChange\n}) => {\n  // Get observability context from provider\n  const o11y = useObservability();\n\n  // Core hooks\n  const resourceData = useResourceData({\n    qualifierTypeFactory,\n    resourceTypeFactory,\n    o11y\n  });\n  const filterState = useFilterState();\n  const viewState = useViewState();\n  // System update handler for resolution editing\n  const handleSystemUpdate = useCallback(\n    (updatedResources: ProcessedResources) => {\n      resourceData.actions.updateProcessedResources(updatedResources);\n      viewState.addMessage('success', 'Resource system updated with edits');\n    },\n    [resourceData.actions, viewState]\n  );\n\n  const resolutionData = useResolutionState(\n    resourceData.state.processedResources,\n    viewState.addMessage,\n    handleSystemUpdate\n  );\n\n  // Local state for filter results\n  const [filterResult, setFilterResult] = useState<FilterResult | null>(null);\n\n  // Track if filtering is in progress to prevent concurrent operations\n  const isFilteringInProgress = React.useRef(false);\n\n  // Initialize with configuration if provided\n  React.useEffect(() => {\n    if (initialConfiguration && !resourceData.state.activeConfiguration) {\n      resourceData.actions.applyConfiguration(initialConfiguration);\n    }\n  }, [initialConfiguration, resourceData.state.activeConfiguration, resourceData.actions]);\n\n  // Notify parent of state changes\n  React.useEffect(() => {\n    if (onStateChange) {\n      onStateChange({\n        resources: resourceData.state.processedResources,\n        configuration: resourceData.state.activeConfiguration,\n        filterState: filterState.state,\n        filterResult,\n        selectedResourceId: viewState.selectedResourceId,\n        isProcessing: resourceData.state.isProcessing,\n        error: resourceData.state.error,\n        messages: viewState.messages\n      });\n    }\n  }, [\n    resourceData.state,\n    filterState.state,\n    filterResult,\n    viewState.selectedResourceId,\n    viewState.messages,\n    onStateChange\n  ]);\n\n  // Internal filtering logic (used by both manual and automatic application)\n  const performFiltering = useCallback(\n    async (filterValues: Record<string, string | undefined>): Promise<FilterResult | null> => {\n      // Prevent concurrent filtering operations\n      if (isFilteringInProgress.current) {\n        o11y.diag.info('Filtering already in progress, skipping...');\n        return null;\n      }\n\n      if (!resourceData.state.processedResources || !filterState.state.enabled) {\n        setFilterResult(null);\n        return null;\n      }\n\n      // Check if we have any filter values to work with\n      const hasFilterValues = Object.values(filterValues).some(\n        (value) => value !== undefined && value !== ''\n      );\n      if (!hasFilterValues) {\n        setFilterResult(null);\n        return null;\n      }\n\n      isFilteringInProgress.current = true;\n\n      try {\n        const { system } = resourceData.state.processedResources;\n\n        viewState.addMessage('info', 'Starting filtering process...');\n        o11y.diag.info('Filtering with values:', filterValues);\n        o11y.diag.info('Filter state:', filterState.state);\n\n        // Try the simplified filtering approach using provided values\n        let filteredResult = await createFilteredResourceManagerSimple(system, filterValues, {\n          partialContextMatch: true,\n          enableDebugLogging: false, // Disable debug logging to reduce console output\n          reduceQualifiers: filterState.state.reduceQualifiers\n        });\n\n        if (filteredResult.isFailure()) {\n          const result: FilterResult = {\n            success: false,\n            error: `Filtering failed: ${filteredResult.message}`,\n            filteredResources: [],\n            warnings: []\n          };\n          setFilterResult(result);\n          viewState.addMessage('error', `Filtering failed: ${filteredResult.message}`);\n          return result;\n        }\n\n        // Analyze filtered resources compared to original\n        const originalResources = resourceData.state.processedResources.summary.resourceIds || [];\n        o11y.diag.info('Original resources count:', originalResources.length);\n\n        const analysis = analyzeFilteredResources(\n          originalResources,\n          filteredResult.value,\n          resourceData.state.processedResources\n        );\n\n        o11y.diag.info('Analysis result:', {\n          success: analysis.success,\n          filteredResourcesCount: analysis.filteredResources.length,\n          warningsCount: analysis.warnings.length,\n          hasProcessedResources: !!analysis.processedResources\n        });\n\n        o11y.diag.info(\n          'Filtered resources breakdown:',\n          analysis.filteredResources.map((r) => ({\n            id: r.id,\n            originalCandidates: r.originalCandidateCount,\n            filteredCandidates: r.filteredCandidateCount,\n            reduction: r.originalCandidateCount - r.filteredCandidateCount,\n            hasWarning: r.hasWarning\n          }))\n        );\n\n        const result: FilterResult = {\n          success: true,\n          processedResources: analysis.processedResources,\n          filteredResources: analysis.filteredResources,\n          warnings: analysis.warnings\n        };\n\n        o11y.diag.info('Setting filter result:', result);\n        setFilterResult(result);\n\n        if (analysis.warnings.length > 0) {\n          viewState.addMessage('warning', `Filtering completed with ${analysis.warnings.length} warning(s)`);\n        } else {\n          viewState.addMessage(\n            'success',\n            `Filtering completed: ${analysis.filteredResources.length} resources`\n          );\n        }\n\n        return result;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        const result: FilterResult = {\n          success: false,\n          error: errorMessage,\n          filteredResources: [],\n          warnings: []\n        };\n        setFilterResult(result);\n        viewState.addMessage('error', `Filtering error: ${errorMessage}`);\n        return result;\n      } finally {\n        isFilteringInProgress.current = false;\n      }\n    },\n    [resourceData.state.processedResources, filterState.state, viewState]\n  );\n\n  // Manual apply filter action (for the Apply button)\n  const applyFilter = useCallback(async (): Promise<FilterResult | null> => {\n    // Capture the current values before applying them\n    const currentValues = { ...filterState.state.values };\n\n    // First apply the pending values to make them the applied values\n    filterState.actions.applyFilterValues();\n\n    // Then perform filtering with the captured values\n    const result = await performFiltering(currentValues);\n\n    return result;\n  }, [performFiltering, filterState.actions]);\n\n  // Reset filter action\n  const resetFilter = useCallback(() => {\n    setFilterResult(null);\n    filterState.actions.resetFilterValues();\n    viewState.addMessage('info', 'Filter reset');\n  }, [filterState.actions, viewState]);\n\n  // Automatically apply filter when applied filter values change\n  // TEMPORARILY DISABLED to fix responsiveness issue\n  // React.useEffect(() => {\n  //   if (!resourceData.state.processedResources || !filterState.state.enabled) {\n  //     setFilterResult(null);\n  //     return;\n  //   }\n\n  //   const hasAppliedFilterValues = hasFilterValues(filterState.state.appliedValues);\n  //   if (!hasAppliedFilterValues) {\n  //     setFilterResult(null);\n  //     return;\n  //   }\n\n  //   // Apply filter automatically when appliedValues change using the applied values\n  //   performFiltering(filterState.state.appliedValues);\n  // }, [\n  //   filterState.state.appliedValues,\n  //   filterState.state.enabled,\n  //   resourceData.state.processedResources,\n  //   performFiltering\n  // ]);\n\n  // Combined state\n  const state: OrchestratorState = useMemo(\n    () => ({\n      resources: resourceData.state.processedResources,\n      configuration: resourceData.state.activeConfiguration,\n      filterState: filterState.state,\n      filterResult,\n      resolutionState: resolutionData.state,\n      selectedResourceId: viewState.selectedResourceId,\n      isProcessing: resourceData.state.isProcessing,\n      error: resourceData.state.error,\n      messages: viewState.messages\n    }),\n    [\n      resourceData.state,\n      filterState.state,\n      filterResult,\n      resolutionData.state,\n      viewState.selectedResourceId,\n      viewState.messages\n    ]\n  );\n\n  // Combined actions\n  const actions: OrchestratorActions = useMemo(\n    () => ({\n      // Resource management\n      importDirectory: async (directory: ImportedDirectory) => {\n        viewState.addMessage('info', 'Importing directory...');\n        const result = await resourceData.actions.processDirectory(directory);\n        if (result.isSuccess()) {\n          viewState.addMessage('success', 'Directory imported successfully');\n        } else {\n          viewState.addMessage('error', result.message);\n        }\n      },\n      importDirectoryWithConfig: async (\n        directory: ImportedDirectory,\n        config: Config.Model.ISystemConfiguration\n      ) => {\n        viewState.addMessage('info', 'Importing directory with configuration...');\n        await resourceData.actions.processDirectoryWithConfig(directory, config);\n        if (!resourceData.state.error) {\n          viewState.addMessage('success', 'Directory imported successfully');\n        } else {\n          viewState.addMessage('error', resourceData.state.error);\n        }\n      },\n      importFiles: async (files: ImportedFile[]) => {\n        viewState.addMessage('info', 'Importing files...');\n        await resourceData.actions.processFiles(files);\n        if (!resourceData.state.error) {\n          viewState.addMessage('success', 'Files imported successfully');\n        }\n      },\n      importBundle: async (bundle: Bundle.IBundle) => {\n        viewState.addMessage('info', 'Importing bundle...');\n        await resourceData.actions.processBundleFile(bundle);\n        if (!resourceData.state.error) {\n          viewState.addMessage('success', 'Bundle imported successfully');\n        }\n      },\n      clearResources: () => {\n        resourceData.actions.reset();\n        setFilterResult(null);\n        viewState.addMessage('info', 'Resources cleared');\n      },\n\n      // Configuration management\n      updateConfiguration: (config: Config.Model.ISystemConfiguration) => {\n        resourceData.actions.applyConfiguration(config);\n        viewState.addMessage('info', 'Configuration updated');\n      },\n      applyConfiguration: (config: Config.Model.ISystemConfiguration) => {\n        resourceData.actions.applyConfiguration(config);\n        viewState.addMessage('success', 'Configuration applied');\n      },\n\n      // Filter management\n      updateFilterState: (updates: Partial<FilterState>) => {\n        if (updates.enabled !== undefined) {\n          filterState.actions.updateFilterEnabled(updates.enabled);\n        }\n        if (updates.values !== undefined) {\n          filterState.actions.updateFilterValues(updates.values);\n        }\n        if (updates.reduceQualifiers !== undefined) {\n          filterState.actions.updateReduceQualifiers(updates.reduceQualifiers);\n        }\n      },\n      applyFilter,\n      resetFilter,\n\n      // Resolution management\n      updateResolutionContext: resolutionData.actions.updateContextValue,\n      applyResolutionContext: resolutionData.actions.applyContext,\n      selectResourceForResolution: resolutionData.actions.selectResource,\n      setResolutionViewMode: resolutionData.actions.setViewMode,\n      resetResolutionCache: resolutionData.actions.resetCache,\n\n      // Resolution editing actions\n      saveResourceEdit: resolutionData.actions.saveEdit,\n      getEditedValue: resolutionData.actions.getEditedValue,\n      hasResourceEdit: resolutionData.actions.hasEdit,\n      clearResourceEdits: resolutionData.actions.clearEdits,\n      // Edits applied through unified applyPendingResources\n      discardResourceEdits: resolutionData.actions.discardEdits,\n\n      // Resource creation actions (enhanced with atomic API)\n      createPendingResource: resolutionData.actions.createPendingResource,\n      startNewResource: resolutionData.actions.startNewResource,\n      updateNewResourceId: resolutionData.actions.updateNewResourceId,\n      selectResourceType: resolutionData.actions.selectResourceType,\n      updateNewResourceJson: resolutionData.actions.updateNewResourceJson,\n      saveNewResourceAsPending: resolutionData.actions.saveNewResourceAsPending,\n      cancelNewResource: resolutionData.actions.cancelNewResource,\n      removePendingResource: resolutionData.actions.removePendingResource,\n      markResourceForDeletion: resolutionData.actions.markResourceForDeletion,\n      applyPendingResources: resolutionData.actions.applyPendingResources,\n      discardPendingResources: resolutionData.actions.discardPendingResources,\n\n      // Combined apply/discard removed; use applyPendingResources/discard* directly\n\n      // Export functionality\n      exportBundle: () => {\n        const resources = resourceData.state.processedResources;\n        if (!resources || !resources.activeConfiguration) {\n          viewState.addMessage(\n            'error',\n            'Export bundle failed: No resource manager or configuration available'\n          );\n          return;\n        }\n\n        // Use proper Result chaining with side effects\n        const result = Config.SystemConfiguration.create(resources.activeConfiguration)\n          .onSuccess((systemConfig) =>\n            Bundle.BundleBuilder.create(resources.system.resourceManager, systemConfig)\n          )\n          .onSuccess((bundle) => DownloadUtils.downloadBundle(bundle, resources.resourceCount));\n\n        // Handle final result with side effects\n        if (result.isSuccess()) {\n          viewState.addMessage('success', 'Bundle exported successfully');\n        } else {\n          viewState.addMessage('error', `Export bundle failed: ${result.message}`);\n        }\n      },\n\n      exportSource: () => {\n        const resources = resourceData.state.processedResources;\n        if (!resources) {\n          viewState.addMessage('error', 'Export source failed: No processed resources available');\n          return;\n        }\n\n        // Use proper Result chaining with side effects\n        const result = DownloadUtils.downloadSourceResources(resources, resources.resourceCount);\n\n        // Handle result with side effects\n        if (result.isSuccess()) {\n          viewState.addMessage('success', 'Source resources exported successfully');\n        } else {\n          viewState.addMessage('error', `Export source failed: ${result.message}`);\n        }\n      },\n\n      exportCompiled: () => {\n        const resources = resourceData.state.processedResources;\n        if (!resources || !resources.compiledCollection) {\n          viewState.addMessage('error', 'Export compiled failed: No compiled resources available');\n          return;\n        }\n\n        // Use proper Result chaining with side effects\n        const result = DownloadUtils.downloadCompiledResources(\n          resources.compiledCollection,\n          resources.resourceCount\n        );\n\n        // Handle result with side effects\n        if (result.isSuccess()) {\n          viewState.addMessage('success', 'Compiled resources exported successfully');\n        } else {\n          viewState.addMessage('error', `Export compiled failed: ${result.message}`);\n        }\n      },\n\n      // UI state management\n      selectResource: viewState.selectResource,\n      addMessage: viewState.addMessage,\n      clearMessages: viewState.clearMessages,\n\n      // Observability context\n      o11y,\n\n      // Resource resolution\n      resolveResource: resourceData.actions.resolveResource\n    }),\n    [resourceData.actions, filterState.actions, resolutionData.actions, viewState, applyFilter, resetFilter]\n  );\n\n  return <>{children({ state, actions })}</>;\n};\n\n/**\n * Main orchestrator component for ts-res resource management UI.\n *\n * This component provides a centralized state management and action coordination\n * for all ts-res UI functionality. It uses the render props pattern to provide\n * state and actions to child components.\n *\n * Features:\n * - Resource processing (files, directories, bundles)\n * - Filtering and context management\n * - Resource resolution testing\n * - Configuration management\n * - View state coordination\n *\n * @param props - ResourceOrchestrator configuration\n * @returns JSX element using render props pattern\n *\n * @example\n * ```typescript\n * <ResourceOrchestrator>\n *   {({ state, actions }) => (\n *     <div>\n *       <ImportView\n *         onImport={actions.importDirectory}\n *         onBundleImport={actions.importBundle}\n *       />\n *       {state.processedResources && (\n *         <SourceView\n *           resources={state.processedResources}\n *           onExport={actions.exportData}\n *         />\n *       )}\n *     </div>\n *   )}\n * </ResourceOrchestrator>\n * ```\n *\n * @public\n */\nexport const ResourceOrchestrator: React.FC<ResourceOrchestratorProps> = ({\n  observabilityContext = ObservabilityTools.DefaultObservabilityContext,\n  ...props\n}) => (\n  <ObservabilityProvider observabilityContext={observabilityContext}>\n    <ResourceOrchestratorInternal {...props} />\n  </ObservabilityProvider>\n);\n\nexport default ResourceOrchestrator;\n"]}