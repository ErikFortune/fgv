{"version":3,"file":"ResourceOrchestrator.js","sourceRoot":"","sources":["../../../src/components/orchestrator/ResourceOrchestrator.tsx"],"names":[],"mappings":";;;;AAAA,qDAAyE;AAazE,+DAA8D;AAC9D,6DAA4D;AAC5D,yDAAwD;AACxD,qEAAoE;AAEpE,+DAKqC;AAY9B,IAAM,oBAAoB,GAAwC,UAAC,EAIzE;QAHC,QAAQ,cAAA,EACR,oBAAoB,0BAAA,EACpB,aAAa,mBAAA;IAEb,aAAa;IACb,IAAM,YAAY,GAAG,IAAA,iCAAe,GAAE,CAAC;IACvC,IAAM,WAAW,GAAG,IAAA,+BAAc,GAAE,CAAC;IACrC,IAAM,SAAS,GAAG,IAAA,2BAAY,GAAE,CAAC;IACjC,IAAM,cAAc,GAAG,IAAA,uCAAkB,EACvC,YAAY,CAAC,KAAK,CAAC,kBAAkB,EACrC,SAAS,CAAC,UAAU,CACrB,CAAC;IAEF,iCAAiC;IAC3B,IAAA,KAAkC,IAAA,gBAAQ,EAAsB,IAAI,CAAC,EAApE,YAAY,QAAA,EAAE,eAAe,QAAuC,CAAC;IAE5E,4CAA4C;IAC5C,eAAK,CAAC,SAAS,CAAC;QACd,IAAI,oBAAoB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;YACpE,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;QAChE,CAAC;IACH,CAAC,EAAE,CAAC,oBAAoB,EAAE,YAAY,CAAC,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;IAEzF,iCAAiC;IACjC,eAAK,CAAC,SAAS,CAAC;QACd,IAAI,aAAa,EAAE,CAAC;YAClB,aAAa,CAAC;gBACZ,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC,kBAAkB;gBAChD,aAAa,EAAE,YAAY,CAAC,KAAK,CAAC,mBAAmB;gBACrD,WAAW,EAAE,WAAW,CAAC,KAAK;gBAC9B,YAAY,cAAA;gBACZ,kBAAkB,EAAE,SAAS,CAAC,kBAAkB;gBAChD,YAAY,EAAE,YAAY,CAAC,KAAK,CAAC,YAAY;gBAC7C,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,KAAK;gBAC/B,QAAQ,EAAE,SAAS,CAAC,QAAQ;aAC7B,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE;QACD,YAAY,CAAC,KAAK;QAClB,WAAW,CAAC,KAAK;QACjB,YAAY;QACZ,SAAS,CAAC,kBAAkB;QAC5B,SAAS,CAAC,QAAQ;QAClB,aAAa;KACd,CAAC,CAAC;IAEH,yDAAyD;IACzD,IAAM,WAAW,GAAG,IAAA,mBAAW,EAAC;;;;;oBAC9B,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,kBAAkB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;wBACzE,eAAe,CAAC,IAAI,CAAC,CAAC;wBACtB,sBAAO,IAAI,EAAC;oBACd,CAAC;oBAGK,sBAAsB,GAAG,IAAA,iCAAe,EAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;oBAChF,IAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC5B,eAAe,CAAC,IAAI,CAAC,CAAC;wBACtB,sBAAO,IAAI,EAAC;oBACd,CAAC;;;;oBAGS,MAAM,GAAK,YAAY,CAAC,KAAK,CAAC,kBAAkB,OAA1C,CAA2C;oBAEzD,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,+BAA+B,CAAC,CAAC;oBAGzC,qBAAM,IAAA,qDAAmC,EAC5D,MAAM,EACN,WAAW,CAAC,KAAK,CAAC,aAAa,EAC/B;4BACE,mBAAmB,EAAE,IAAI;4BACzB,kBAAkB,EAAE,KAAK;4BACzB,gBAAgB,EAAE,WAAW,CAAC,KAAK,CAAC,gBAAgB;yBACrD,CACF,EAAA;;oBARG,cAAc,GAAG,SAQpB;oBAED,IAAI,cAAc,CAAC,SAAS,EAAE,EAAE,CAAC;wBACzB,WAAuB;4BAC3B,OAAO,EAAE,KAAK;4BACd,KAAK,EAAE,4BAAqB,cAAc,CAAC,OAAO,CAAE;yBACrD,CAAC;wBACF,eAAe,CAAC,QAAM,CAAC,CAAC;wBACxB,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,4BAAqB,cAAc,CAAC,OAAO,CAAE,CAAC,CAAC;wBAC7E,sBAAO,QAAM,EAAC;oBAChB,CAAC;oBAGK,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;oBACpF,QAAQ,GAAG,IAAA,0CAAwB,EACvC,iBAAiB,EACjB,cAAc,CAAC,KAAK,EACpB,YAAY,CAAC,KAAK,CAAC,kBAAkB,CACtC,CAAC;oBAEI,MAAM,GAAiB;wBAC3B,OAAO,EAAE,IAAI;wBACb,kBAAkB,EAAE,QAAQ,CAAC,kBAAkB;wBAC/C,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB;wBAC7C,QAAQ,EAAE,QAAQ,CAAC,QAAQ;qBAC5B,CAAC;oBAEF,eAAe,CAAC,MAAM,CAAC,CAAC;oBACxB,WAAW,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;oBAExC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACjC,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,mCAA4B,QAAQ,CAAC,QAAQ,CAAC,MAAM,gBAAa,CAAC,CAAC;oBACrG,CAAC;yBAAM,CAAC;wBACN,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,+BAAwB,QAAQ,CAAC,iBAAiB,CAAC,MAAM,eAAY,CAAC,CAAC;oBACzG,CAAC;oBAED,sBAAO,MAAM,EAAC;;;oBAER,YAAY,GAAG,OAAK,YAAY,KAAK,CAAC,CAAC,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAK,CAAC,CAAC;oBACtE,MAAM,GAAiB;wBAC3B,OAAO,EAAE,KAAK;wBACd,KAAK,EAAE,YAAY;qBACpB,CAAC;oBACF,eAAe,CAAC,MAAM,CAAC,CAAC;oBACxB,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,2BAAoB,YAAY,CAAE,CAAC,CAAC;oBAClE,sBAAO,MAAM,EAAC;;;;SAEjB,EAAE;QACD,YAAY,CAAC,KAAK,CAAC,kBAAkB;QACrC,WAAW,CAAC,KAAK;QACjB,WAAW,CAAC,OAAO;QACnB,SAAS;KACV,CAAC,CAAC;IAEH,sBAAsB;IACtB,IAAM,WAAW,GAAG,IAAA,mBAAW,EAAC;QAC9B,eAAe,CAAC,IAAI,CAAC,CAAC;QACtB,WAAW,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;QACxC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IAC/C,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAErC,+DAA+D;IAC/D,eAAK,CAAC,SAAS,CAAC;QACd,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,kBAAkB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACzE,eAAe,CAAC,IAAI,CAAC,CAAC;YACtB,OAAO;QACT,CAAC;QAED,IAAM,sBAAsB,GAAG,IAAA,iCAAe,EAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC5B,eAAe,CAAC,IAAI,CAAC,CAAC;YACtB,OAAO;QACT,CAAC;QAED,uDAAuD;QACvD,WAAW,EAAE,CAAC;IAChB,CAAC,EAAE;QACD,WAAW,CAAC,KAAK,CAAC,aAAa;QAC/B,WAAW,CAAC,KAAK,CAAC,OAAO;QACzB,YAAY,CAAC,KAAK,CAAC,kBAAkB;QACrC,WAAW;KACZ,CAAC,CAAC;IAEH,iBAAiB;IACjB,IAAM,KAAK,GAAsB,IAAA,eAAO,EAAC,cAAM,OAAA,CAAC;QAC9C,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC,kBAAkB;QAChD,aAAa,EAAE,YAAY,CAAC,KAAK,CAAC,mBAAmB;QACrD,WAAW,EAAE,WAAW,CAAC,KAAK;QAC9B,YAAY,cAAA;QACZ,eAAe,EAAE,cAAc,CAAC,KAAK;QACrC,kBAAkB,EAAE,SAAS,CAAC,kBAAkB;QAChD,YAAY,EAAE,YAAY,CAAC,KAAK,CAAC,YAAY;QAC7C,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,KAAK;QAC/B,QAAQ,EAAE,SAAS,CAAC,QAAQ;KAC7B,CAAC,EAV6C,CAU7C,EAAE;QACF,YAAY,CAAC,KAAK;QAClB,WAAW,CAAC,KAAK;QACjB,YAAY;QACZ,cAAc,CAAC,KAAK;QACpB,SAAS,CAAC,kBAAkB;QAC5B,SAAS,CAAC,QAAQ;KACnB,CAAC,CAAC;IAEH,mBAAmB;IACnB,IAAM,OAAO,GAAwB,IAAA,eAAO,EAAC,cAAM,OAAA,CAAC;QAClD,sBAAsB;QACtB,eAAe,EAAE,UAAO,SAA4B;;;;wBAClD,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;wBACvD,qBAAM,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAA;;wBAAtD,SAAsD,CAAC;wBACvD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;4BAC9B,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC;wBACrE,CAAC;;;;aACF;QACD,WAAW,EAAE,UAAO,KAAqB;;;;wBACvC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;wBACnD,qBAAM,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;wBAA9C,SAA8C,CAAC;wBAC/C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;4BAC9B,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC;wBACjE,CAAC;;;;aACF;QACD,YAAY,EAAE,UAAO,MAAsB;;;;wBACzC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;wBACpD,qBAAM,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAA;;wBAApD,SAAoD,CAAC;wBACrD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;4BAC9B,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC;wBAClE,CAAC;;;;aACF;QACD,cAAc,EAAE;YACd,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAC7B,eAAe,CAAC,IAAI,CAAC,CAAC;YACtB,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QAED,2BAA2B;QAC3B,mBAAmB,EAAE,UAAC,MAAyC;YAC7D,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAChD,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC;QACxD,CAAC;QACD,kBAAkB,EAAE,UAAC,MAAyC;YAC5D,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAChD,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;QAC3D,CAAC;QAED,oBAAoB;QACpB,iBAAiB,EAAE,UAAC,OAA6B;YAC/C,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;gBAClC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC3D,CAAC;YACD,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;gBACjC,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACzD,CAAC;YACD,IAAI,OAAO,CAAC,gBAAgB,KAAK,SAAS,EAAE,CAAC;gBAC3C,WAAW,CAAC,OAAO,CAAC,sBAAsB,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;QACD,WAAW,aAAA;QACX,WAAW,aAAA;QAEX,wBAAwB;QACxB,uBAAuB,EAAE,cAAc,CAAC,OAAO,CAAC,kBAAkB;QAClE,sBAAsB,EAAE,cAAc,CAAC,OAAO,CAAC,YAAY;QAC3D,2BAA2B,EAAE,cAAc,CAAC,OAAO,CAAC,cAAc;QAClE,qBAAqB,EAAE,cAAc,CAAC,OAAO,CAAC,WAAW;QACzD,oBAAoB,EAAE,cAAc,CAAC,OAAO,CAAC,UAAU;QAEvD,sBAAsB;QACtB,cAAc,EAAE,SAAS,CAAC,cAAc;QACxC,UAAU,EAAE,SAAS,CAAC,UAAU;QAChC,aAAa,EAAE,SAAS,CAAC,aAAa;QAEtC,sBAAsB;QACtB,eAAe,EAAE,YAAY,CAAC,OAAO,CAAC,eAAe;KACtD,CAAC,EApEiD,CAoEjD,EAAE;QACF,YAAY,CAAC,OAAO;QACpB,WAAW,CAAC,OAAO;QACnB,cAAc,CAAC,OAAO;QACtB,SAAS;QACT,WAAW;QACX,WAAW;KACZ,CAAC,CAAC;IAEH,OAAO,8DAAG,QAAQ,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAI,CAAC;AAC7C,CAAC,CAAC;AAjQW,QAAA,oBAAoB,wBAiQ/B;AAEF,kBAAe,4BAAoB,CAAC","sourcesContent":["import React, { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Result } from '@fgv/ts-utils';\nimport { Config, Bundle } from '@fgv/ts-res';\nimport {\n  OrchestratorState,\n  OrchestratorActions,\n  ImportedDirectory,\n  ImportedFile,\n  ProcessedResources,\n  FilterState,\n  FilterResult,\n  Message\n} from '../../types';\nimport { useResourceData } from '../../hooks/useResourceData';\nimport { useFilterState } from '../../hooks/useFilterState';\nimport { useViewState } from '../../hooks/useViewState';\nimport { useResolutionState } from '../../hooks/useResolutionState';\nimport { createSimpleContext } from '../../utils/tsResIntegration';\nimport { \n  createFilteredResourceManagerSimple, \n  analyzeFilteredResources, \n  hasFilterValues, \n  FilterResult as FilterUtilResult \n} from '../../utils/filterResources';\nimport { Runtime } from '@fgv/ts-res';\n\nexport interface ResourceOrchestratorProps {\n  children: (orchestrator: {\n    state: OrchestratorState;\n    actions: OrchestratorActions;\n  }) => ReactNode;\n  initialConfiguration?: Config.Model.ISystemConfiguration;\n  onStateChange?: (state: Partial<OrchestratorState>) => void;\n}\n\nexport const ResourceOrchestrator: React.FC<ResourceOrchestratorProps> = ({\n  children,\n  initialConfiguration,\n  onStateChange\n}) => {\n  // Core hooks\n  const resourceData = useResourceData();\n  const filterState = useFilterState();\n  const viewState = useViewState();\n  const resolutionData = useResolutionState(\n    resourceData.state.processedResources, \n    viewState.addMessage\n  );\n  \n  // Local state for filter results\n  const [filterResult, setFilterResult] = useState<FilterResult | null>(null);\n  \n  // Initialize with configuration if provided\n  React.useEffect(() => {\n    if (initialConfiguration && !resourceData.state.activeConfiguration) {\n      resourceData.actions.applyConfiguration(initialConfiguration);\n    }\n  }, [initialConfiguration, resourceData.state.activeConfiguration, resourceData.actions]);\n  \n  // Notify parent of state changes\n  React.useEffect(() => {\n    if (onStateChange) {\n      onStateChange({\n        resources: resourceData.state.processedResources,\n        configuration: resourceData.state.activeConfiguration,\n        filterState: filterState.state,\n        filterResult,\n        selectedResourceId: viewState.selectedResourceId,\n        isProcessing: resourceData.state.isProcessing,\n        error: resourceData.state.error,\n        messages: viewState.messages\n      });\n    }\n  }, [\n    resourceData.state,\n    filterState.state,\n    filterResult,\n    viewState.selectedResourceId,\n    viewState.messages,\n    onStateChange\n  ]);\n\n  // Apply filter action with comprehensive filtering logic\n  const applyFilter = useCallback(async (): Promise<FilterResult | null> => {\n    if (!resourceData.state.processedResources || !filterState.state.enabled) {\n      setFilterResult(null);\n      return null;\n    }\n\n    // Check if we have any applied filter values set\n    const hasAppliedFilterValues = hasFilterValues(filterState.state.appliedValues);\n    if (!hasAppliedFilterValues) {\n      setFilterResult(null);\n      return null;\n    }\n\n    try {\n      const { system } = resourceData.state.processedResources;\n      \n      viewState.addMessage('info', 'Starting filtering process...');\n      \n      // Try the simplified filtering approach\n      let filteredResult = await createFilteredResourceManagerSimple(\n        system,\n        filterState.state.appliedValues,\n        {\n          partialContextMatch: true,\n          enableDebugLogging: false,\n          reduceQualifiers: filterState.state.reduceQualifiers\n        }\n      );\n\n      if (filteredResult.isFailure()) {\n        const result: FilterResult = {\n          success: false,\n          error: `Filtering failed: ${filteredResult.message}`\n        };\n        setFilterResult(result);\n        viewState.addMessage('error', `Filtering failed: ${filteredResult.message}`);\n        return result;\n      }\n\n      // Analyze filtered resources compared to original\n      const originalResources = resourceData.state.processedResources.summary.resourceIds || [];\n      const analysis = analyzeFilteredResources(\n        originalResources,\n        filteredResult.value,\n        resourceData.state.processedResources\n      );\n\n      const result: FilterResult = {\n        success: true,\n        processedResources: analysis.processedResources,\n        filteredResources: analysis.filteredResources,\n        warnings: analysis.warnings\n      };\n\n      setFilterResult(result);\n      filterState.actions.applyFilterValues();\n\n      if (analysis.warnings.length > 0) {\n        viewState.addMessage('warning', `Filtering completed with ${analysis.warnings.length} warning(s)`);\n      } else {\n        viewState.addMessage('success', `Filtering completed: ${analysis.filteredResources.length} resources`);\n      }\n\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const result: FilterResult = {\n        success: false,\n        error: errorMessage\n      };\n      setFilterResult(result);\n      viewState.addMessage('error', `Filtering error: ${errorMessage}`);\n      return result;\n    }\n  }, [\n    resourceData.state.processedResources,\n    filterState.state,\n    filterState.actions,\n    viewState\n  ]);\n\n  // Reset filter action\n  const resetFilter = useCallback(() => {\n    setFilterResult(null);\n    filterState.actions.resetFilterValues();\n    viewState.addMessage('info', 'Filter reset');\n  }, [filterState.actions, viewState]);\n\n  // Automatically apply filter when applied filter values change\n  React.useEffect(() => {\n    if (!resourceData.state.processedResources || !filterState.state.enabled) {\n      setFilterResult(null);\n      return;\n    }\n\n    const hasAppliedFilterValues = hasFilterValues(filterState.state.appliedValues);\n    if (!hasAppliedFilterValues) {\n      setFilterResult(null);\n      return;\n    }\n\n    // Apply filter automatically when appliedValues change\n    applyFilter();\n  }, [\n    filterState.state.appliedValues, \n    filterState.state.enabled, \n    resourceData.state.processedResources, \n    applyFilter\n  ]);\n\n  // Combined state\n  const state: OrchestratorState = useMemo(() => ({\n    resources: resourceData.state.processedResources,\n    configuration: resourceData.state.activeConfiguration,\n    filterState: filterState.state,\n    filterResult,\n    resolutionState: resolutionData.state,\n    selectedResourceId: viewState.selectedResourceId,\n    isProcessing: resourceData.state.isProcessing,\n    error: resourceData.state.error,\n    messages: viewState.messages\n  }), [\n    resourceData.state,\n    filterState.state,\n    filterResult,\n    resolutionData.state,\n    viewState.selectedResourceId,\n    viewState.messages\n  ]);\n\n  // Combined actions\n  const actions: OrchestratorActions = useMemo(() => ({\n    // Resource management\n    importDirectory: async (directory: ImportedDirectory) => {\n      viewState.addMessage('info', 'Importing directory...');\n      await resourceData.actions.processDirectory(directory);\n      if (!resourceData.state.error) {\n        viewState.addMessage('success', 'Directory imported successfully');\n      }\n    },\n    importFiles: async (files: ImportedFile[]) => {\n      viewState.addMessage('info', 'Importing files...');\n      await resourceData.actions.processFiles(files);\n      if (!resourceData.state.error) {\n        viewState.addMessage('success', 'Files imported successfully');\n      }\n    },\n    importBundle: async (bundle: Bundle.IBundle) => {\n      viewState.addMessage('info', 'Importing bundle...');\n      await resourceData.actions.processBundleFile(bundle);\n      if (!resourceData.state.error) {\n        viewState.addMessage('success', 'Bundle imported successfully');\n      }\n    },\n    clearResources: () => {\n      resourceData.actions.reset();\n      setFilterResult(null);\n      viewState.addMessage('info', 'Resources cleared');\n    },\n    \n    // Configuration management\n    updateConfiguration: (config: Config.Model.ISystemConfiguration) => {\n      resourceData.actions.applyConfiguration(config);\n      viewState.addMessage('info', 'Configuration updated');\n    },\n    applyConfiguration: (config: Config.Model.ISystemConfiguration) => {\n      resourceData.actions.applyConfiguration(config);\n      viewState.addMessage('success', 'Configuration applied');\n    },\n    \n    // Filter management\n    updateFilterState: (updates: Partial<FilterState>) => {\n      if (updates.enabled !== undefined) {\n        filterState.actions.updateFilterEnabled(updates.enabled);\n      }\n      if (updates.values !== undefined) {\n        filterState.actions.updateFilterValues(updates.values);\n      }\n      if (updates.reduceQualifiers !== undefined) {\n        filterState.actions.updateReduceQualifiers(updates.reduceQualifiers);\n      }\n    },\n    applyFilter,\n    resetFilter,\n    \n    // Resolution management\n    updateResolutionContext: resolutionData.actions.updateContextValue,\n    applyResolutionContext: resolutionData.actions.applyContext,\n    selectResourceForResolution: resolutionData.actions.selectResource,\n    setResolutionViewMode: resolutionData.actions.setViewMode,\n    resetResolutionCache: resolutionData.actions.resetCache,\n    \n    // UI state management\n    selectResource: viewState.selectResource,\n    addMessage: viewState.addMessage,\n    clearMessages: viewState.clearMessages,\n    \n    // Resource resolution\n    resolveResource: resourceData.actions.resolveResource\n  }), [\n    resourceData.actions,\n    filterState.actions,\n    resolutionData.actions,\n    viewState,\n    applyFilter,\n    resetFilter\n  ]);\n\n  return <>{children({ state, actions })}</>;\n};\n\nexport default ResourceOrchestrator;"]}