{"version":3,"file":"ResourcePickerTree.js","sourceRoot":"","sources":["../../../../src/components/pickers/ResourcePicker/ResourcePickerTree.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport {\n  ChevronRightIcon,\n  ChevronDownIcon,\n  FolderIcon,\n  FolderOpenIcon,\n  DocumentTextIcon\n} from '@heroicons/react/24/outline';\nimport { ResourcePickerTreeProps, PendingResource } from './types';\nimport { Runtime } from '@fgv/ts-res';\nimport { useObservability } from '../../../contexts';\n\n/**\n * Virtual tree node that can represent both real and pending resources\n */\ninterface VirtualTreeNode<T = unknown> {\n  id: string;\n  name: string;\n  isLeaf: boolean;\n  isPending: boolean;\n  pendingResource?: PendingResource<T>;\n  realNode?: Runtime.ResourceTree.IReadOnlyResourceTreeNode<any>;\n  children: Map<string, VirtualTreeNode<T>>;\n}\n\n/**\n * Creates a virtual tree by merging real resource tree with pending resources\n */\nfunction createVirtualTree<T = unknown>(\n  realTree: Runtime.ResourceTree.IReadOnlyResourceTreeRoot<any> | null,\n  pendingResources: PendingResource<T>[] = []\n): VirtualTreeNode<T> | null {\n  if (!realTree) {\n    return null;\n  }\n\n  // Helper to convert real node to virtual node\n  const convertRealNode = (\n    realNode: Runtime.ResourceTree.IReadOnlyResourceTreeNode<any>\n  ): VirtualTreeNode<T> => {\n    const virtualNode: VirtualTreeNode<T> = {\n      id: realNode.id,\n      name: realNode.name,\n      isLeaf: realNode.isLeaf,\n      isPending: false,\n      realNode,\n      children: new Map()\n    };\n\n    // Convert children\n    if (!realNode.isLeaf && realNode.children) {\n      for (const child of realNode.children.values()) {\n        const virtualChild = convertRealNode(child);\n        virtualNode.children.set(child.id, virtualChild);\n      }\n    }\n\n    return virtualNode;\n  };\n\n  // Start with the real tree structure\n  const rootNode: VirtualTreeNode<T> = {\n    id: '',\n    name: 'root',\n    isLeaf: false,\n    isPending: false,\n    children: new Map()\n  };\n\n  // Convert all real children\n  for (const realChild of realTree.children.values()) {\n    const virtualChild = convertRealNode(realChild);\n    rootNode.children.set(realChild.id, virtualChild);\n  }\n\n  // Add pending resources\n  for (const pendingResource of pendingResources) {\n    if (pendingResource.type === 'deleted') continue; // Skip deleted resources\n\n    const pathParts = pendingResource.id.split('.');\n    const displayName = pendingResource.displayName || pathParts[pathParts.length - 1];\n\n    // Find or create parent nodes\n    let currentNode = rootNode;\n    for (let i = 0; i < pathParts.length - 1; i++) {\n      const partialPath = pathParts.slice(0, i + 1).join('.');\n\n      if (!currentNode.children.has(partialPath)) {\n        // Create virtual parent node\n        const parentNode: VirtualTreeNode<T> = {\n          id: partialPath,\n          name: pathParts[i],\n          isLeaf: false,\n          isPending: false,\n          children: new Map()\n        };\n        currentNode.children.set(partialPath, parentNode);\n      }\n\n      currentNode = currentNode.children.get(partialPath)!;\n      currentNode.isLeaf = false; // Ensure parent is not a leaf\n    }\n\n    // Create the pending resource node\n    const pendingNode: VirtualTreeNode<T> = {\n      id: pendingResource.id,\n      name: displayName,\n      isLeaf: true,\n      isPending: true,\n      pendingResource,\n      children: new Map()\n    };\n\n    currentNode.children.set(pendingResource.id, pendingNode);\n  }\n\n  return rootNode;\n}\n\n/**\n * Tree view for the ResourcePicker component\n * Enhanced version of ResourceTreeView with branch isolation and annotation support\n */\nexport const ResourcePickerTree = <T = unknown,>({\n  resources,\n  pendingResources,\n  selectedResourceId,\n  onResourceSelect,\n  resourceAnnotations,\n  searchTerm = '',\n  rootPath,\n  hideRootNode,\n  className = '',\n  emptyMessage = 'No resources available'\n}: ResourcePickerTreeProps<T>) => {\n  // Get observability context\n  const o11y = useObservability();\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());\n\n  // Build the virtual tree structure from resources and pending resources\n  const virtualTree = useMemo(() => {\n    if (!resources) {\n      return null;\n    }\n\n    // Get the tree from the resource manager\n    const resourceManager = resources.system.resourceManager;\n    const treeResult = resourceManager.getBuiltResourceTree();\n    if (treeResult.isFailure()) {\n      o11y.diag.error('ResourcePickerTree: Failed to build resource tree:', treeResult.message);\n      return null;\n    }\n\n    // Create virtual tree that includes pending resources\n    try {\n      const virtualTree = createVirtualTree(treeResult.value, pendingResources);\n      return virtualTree;\n    } catch (error) {\n      o11y.diag.error('ResourcePickerTree: Error in createVirtualTree:', error);\n      return null;\n    }\n  }, [resources, pendingResources]);\n\n  // Find the effective root node(s) to display\n  const effectiveRootNodes = useMemo(() => {\n    try {\n      if (!virtualTree) {\n        return [];\n      }\n\n      // If no rootPath, show all top-level nodes\n      if (!rootPath) {\n        const nodes = Array.from(virtualTree.children.values());\n        return nodes;\n      }\n    } catch (error) {\n      o11y.diag.error('ResourcePickerTree: Error in effectiveRootNodes calculation:', error);\n      return [];\n    }\n\n    // Find the target node in the virtual tree\n    const findVirtualNodeById = (node: VirtualTreeNode<T>, targetId: string): VirtualTreeNode<T> | null => {\n      if (node.id === targetId) {\n        return node;\n      }\n\n      if (!node.isLeaf && node.children) {\n        for (const child of node.children.values()) {\n          const found = findVirtualNodeById(child, targetId);\n          if (found) return found;\n        }\n      }\n\n      return null;\n    };\n\n    // Search through all top-level children to find the target\n    let targetNode: VirtualTreeNode<T> | null = null;\n    for (const child of virtualTree.children.values()) {\n      targetNode = findVirtualNodeById(child, rootPath);\n      if (targetNode) break;\n    }\n\n    if (!targetNode) {\n      return []; // Target node not found\n    }\n\n    // If hideRootNode is true, show the target's children instead of the target itself\n    if (hideRootNode && !targetNode.isLeaf && targetNode.children) {\n      return Array.from(targetNode.children.values());\n    } else {\n      // Show the target node as the new root\n      return [targetNode];\n    }\n  }, [virtualTree, rootPath, hideRootNode]);\n\n  // Create a map of pending resource IDs for quick lookup\n  const pendingResourceMap = useMemo(() => {\n    const map = new Map<string, PendingResource<T>>();\n    pendingResources?.forEach((pr) => {\n      map.set(pr.id, pr);\n    });\n    return map;\n  }, [pendingResources]);\n\n  const toggleNode = useCallback((nodeId: string) => {\n    setExpandedNodes((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(nodeId)) {\n        newSet.delete(nodeId);\n      } else {\n        newSet.add(nodeId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const renderTreeNode = (node: VirtualTreeNode<T>, level: number = 0): React.ReactElement | null => {\n    const isExpanded = expandedNodes.has(node.id);\n    const isSelected = selectedResourceId === node.id;\n    const nodeIdLower = node.id.toLowerCase();\n    const searchLower = searchTerm.toLowerCase();\n    const matchesSearch = !searchTerm || nodeIdLower.includes(searchLower);\n    const isPending = node.isPending;\n    const pendingResource = node.pendingResource;\n    const displayName = node.name; // Virtual node already has the correct display name\n\n    // Determine if this resource should be shown (not deleted)\n    const isDeleted = pendingResource?.type === 'deleted';\n    if (isDeleted) {\n      return null; // Don't render deleted resources\n    }\n\n    // Check if any children match\n    let hasMatchingChildren = false;\n    if (!node.isLeaf && node.children && searchTerm) {\n      const checkChildren = (n: VirtualTreeNode): boolean => {\n        if (n.id.toLowerCase().includes(searchLower)) return true;\n        if (!n.isLeaf && n.children) {\n          for (const child of n.children.values()) {\n            if (checkChildren(child)) return true;\n          }\n        }\n        return false;\n      };\n\n      for (const child of node.children.values()) {\n        if (checkChildren(child)) {\n          hasMatchingChildren = true;\n          break;\n        }\n      }\n    }\n\n    // Hide nodes that don't match search and don't have matching children\n    if (searchTerm && !matchesSearch && !hasMatchingChildren) {\n      return null;\n    }\n\n    return (\n      <div key={node.id} className=\"select-none\">\n        <div\n          className={`\n            flex items-center px-2 py-1 cursor-pointer hover:bg-gray-100\n            ${isSelected ? 'bg-purple-50 border-l-2 border-purple-500' : ''}\n            ${matchesSearch && searchTerm ? 'bg-yellow-50' : ''}\n            ${\n              isPending && pendingResource?.type === 'new'\n                ? 'bg-emerald-25 border-l-2 border-emerald-300'\n                : ''\n            }\n            ${\n              isPending && pendingResource?.type === 'modified'\n                ? 'bg-amber-25 border-l-2 border-amber-300'\n                : ''\n            }\n          `}\n          style={{ paddingLeft: `${level * 20 + 8}px` }}\n          onClick={() => {\n            if (node.isLeaf) {\n              onResourceSelect({\n                resourceId: node.id,\n                resourceData: node.pendingResource?.resourceData,\n                isPending: node.isPending,\n                pendingType: node.pendingResource?.type\n              });\n            } else {\n              toggleNode(node.id);\n            }\n          }}\n        >\n          {/* Expand/Collapse chevron */}\n          {!node.isLeaf && (\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleNode(node.id);\n              }}\n              className=\"mr-1 hover:bg-gray-200 rounded p-0.5\"\n            >\n              {isExpanded ? (\n                <ChevronDownIcon className=\"w-3 h-3 text-gray-600\" />\n              ) : (\n                <ChevronRightIcon className=\"w-3 h-3 text-gray-600\" />\n              )}\n            </button>\n          )}\n\n          {/* Spacer for alignment when no children */}\n          {node.isLeaf && <div className=\"w-4 mr-1\" />}\n\n          {/* Folder/Document icon */}\n          {node.isLeaf ? (\n            <DocumentTextIcon className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" />\n          ) : isExpanded ? (\n            <FolderOpenIcon className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />\n          ) : (\n            <FolderIcon className=\"w-4 h-4 text-blue-500 mr-2 flex-shrink-0\" />\n          )}\n\n          {/* Node name with search highlighting */}\n          <span\n            className={`\n              text-sm truncate flex-1\n              ${isSelected ? 'font-medium text-purple-900' : 'text-gray-700'}\n              ${isPending && pendingResource?.type === 'new' ? 'font-medium text-emerald-800' : ''}\n              ${isPending && pendingResource?.type === 'modified' ? 'font-medium text-amber-800' : ''}\n              ${matchesSearch && searchTerm ? 'font-medium' : ''}\n            `}\n            title={node.id}\n          >\n            {searchTerm ? <HighlightedText text={displayName} searchTerm={searchTerm} /> : displayName}\n          </span>\n\n          {/* Annotations for any nodes */}\n          {resourceAnnotations?.[node.id] && (\n            <div className=\"flex items-center gap-1 ml-2\">\n              {renderAnnotation(resourceAnnotations[node.id])}\n            </div>\n          )}\n\n          {/* Show child count for branches */}\n          {!node.isLeaf && node.children && (\n            <span className=\"ml-2 text-xs text-gray-500\">({node.children.size})</span>\n          )}\n        </div>\n\n        {/* Render children if expanded */}\n        {!node.isLeaf && node.children && isExpanded && (\n          <div>\n            {Array.from(node.children.values())\n              .sort((a: VirtualTreeNode<T>, b: VirtualTreeNode<T>) => {\n                // Sort folders first, then by name\n                if (a.isLeaf !== b.isLeaf) {\n                  return a.isLeaf ? 1 : -1;\n                }\n                return a.name.localeCompare(b.name);\n              })\n              .map((child) => renderTreeNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderAnnotation = (annotation: any) => {\n    const elements: React.ReactNode[] = [];\n\n    if (annotation.indicator) {\n      elements.push(\n        <span key=\"indicator\" className=\"text-xs\" title={annotation.indicator.tooltip}>\n          {annotation.indicator.type === 'dot' ? (\n            <span className=\"text-orange-500\">●</span>\n          ) : (\n            annotation.indicator.value\n          )}\n        </span>\n      );\n    }\n\n    if (annotation.badge) {\n      const getBadgeClasses = (variant: string) => {\n        const baseClasses = 'px-1.5 py-0.5 text-xs font-medium rounded';\n        const variantClasses: Record<string, string> = {\n          info: 'bg-blue-100 text-blue-800',\n          warning: 'bg-yellow-100 text-yellow-800',\n          success: 'bg-green-100 text-green-800',\n          error: 'bg-red-100 text-red-800',\n          edited: 'bg-purple-100 text-purple-800',\n          new: 'bg-emerald-100 text-emerald-800'\n        };\n        return `${baseClasses} ${variantClasses[variant] || variantClasses.info}`;\n      };\n\n      elements.push(\n        <span key=\"badge\" className={getBadgeClasses(annotation.badge.variant)}>\n          {annotation.badge.text}\n        </span>\n      );\n    }\n\n    if (annotation.suffix) {\n      elements.push(\n        <span key=\"suffix\" className=\"text-xs text-gray-500\">\n          {annotation.suffix}\n        </span>\n      );\n    }\n\n    return elements;\n  };\n\n  if (!virtualTree || effectiveRootNodes.length === 0) {\n    return (\n      <div className={`${className} p-4 text-center text-gray-500`}>\n        <p>{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} overflow-y-auto !relative !z-auto !min-h-[200px]`}>\n      {effectiveRootNodes\n        .sort((a: VirtualTreeNode, b: VirtualTreeNode) => {\n          // Sort folders first, then by name\n          if (a.isLeaf !== b.isLeaf) {\n            return a.isLeaf ? 1 : -1;\n          }\n          return a.name.localeCompare(b.name);\n        })\n        .map((child) => {\n          return renderTreeNode(child);\n        })}\n    </div>\n  );\n};\n\n/**\n * Component to highlight search terms in text\n */\nconst HighlightedText: React.FC<{ text: string; searchTerm: string }> = ({ text, searchTerm }) => {\n  if (!searchTerm) {\n    return <span>{text}</span>;\n  }\n\n  const regex = new RegExp(`(${searchTerm})`, 'gi');\n  const parts = text.split(regex);\n\n  return (\n    <span>\n      {parts.map((part, index) =>\n        regex.test(part) ? (\n          <mark key={index} className=\"bg-yellow-200\">\n            {part}\n          </mark>\n        ) : (\n          <span key={index}>{part}</span>\n        )\n      )}\n    </span>\n  );\n};\n\nexport default ResourcePickerTree;\n"]}