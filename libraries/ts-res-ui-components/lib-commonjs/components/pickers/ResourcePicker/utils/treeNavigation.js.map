{"version":3,"file":"treeNavigation.js","sourceRoot":"","sources":["../../../../../src/components/pickers/ResourcePicker/utils/treeNavigation.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAKH,4CAeC;AAMD,gDAWC;AAKD,wDAUC;AAaD,8CAwEC;AAKD,kCAeC;AAKD,0CAmBC;AAKD,8DAqBC;AA7MD;;GAEG;AACH,SAAgB,gBAAgB,CAAC,WAAqB,EAAE,QAAiB,EAAE,YAAsB;IAC/F,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE;QACzC,IAAI,YAAY,EAAE,CAAC;YACjB,0DAA0D;YAC1D,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,QAAQ,CAAC;QAC1D,CAAC;QACD,0CAA0C;QAC1C,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,UAAkB,EAAE,QAAiB,EAAE,YAAsB;IAC9F,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,mEAAmE;IACnE,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE,CAAC;QAC1C,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAED;;GAEG;AACH,SAAgB,sBAAsB,CACpC,UAAkB,EAClB,QAAiB,EACjB,YAAsB;IAEtB,MAAM,YAAY,GAAG,kBAAkB,CAAC,UAAU,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAE5E,4CAA4C;IAC5C,MAAM,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzC,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,YAAY,CAAC;AACvD,CAAC;AAaD,SAAgB,iBAAiB,CAC/B,WAAqB,EACrB,QAAiB,EACjB,YAAsB,EACtB,aAA2B;IAE3B,MAAM,IAAI,GAAe,EAAE,CAAC;IAC5B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAoB,CAAC;IAE5C,sCAAsC;IACtC,MAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAE1E,kDAAkD;IAClD,MAAM,SAAS,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;IAE1C,2DAA2D;IAC3D,MAAM,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IAEnE,2EAA2E;IAC3E,MAAM,SAAS,GAAG,IAAI,GAAG,EAAU,CAAC;IACpC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;QACvC,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CACnC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,UAAU,CAAC,WAAW,GAAG,GAAG,CAAC,CAC9E,CAAC;QACF,IAAI,WAAW,IAAI,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACtD,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,IAAI,SAAS,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC;IAC9E,CAAC;IAED,0EAA0E;IAC1E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC1C,MAAM,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,kBAAkB,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QAC3E,MAAM,gBAAgB,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/C,MAAM,IAAI,GAAa;YACrB,EAAE,EAAE,UAAU,EAAE,mBAAmB;YACnC,WAAW,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1C,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,aAAa,EAAE,GAAG,CAAC,UAAU,CAAC;SAC3C,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAE9B,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClC,sCAAsC;YACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC;aAAM,CAAC;YACN,8CAA8C;YAC9C,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,iBAAiB,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEnD,4DAA4D;YAC5D,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YACpE,IAAI,mBAAmB,IAAI,CAAC,EAAE,CAAC;gBAC7B,MAAM,gBAAgB,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAAC;gBACxD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAEjD,IAAI,UAAU,EAAE,CAAC;oBACf,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACH,SAAgB,WAAW,CAAC,KAAiB;IAC3C,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,SAAS,QAAQ,CAAC,IAAc;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACrB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,SAAgB,eAAe,CAC7B,WAAqB,EACrB,UAAkB,EAClB,cAAwC,KAAK,EAC7C,QAAiB;IAEjB,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,MAAM,IAAI,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;IACtC,IAAI,aAAa,GAAG,WAAW,CAAC;IAEhC,iDAAiD;IACjD,IAAI,WAAW,KAAK,gBAAgB,IAAI,QAAQ,EAAE,CAAC;QACjD,aAAa,GAAG,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IACjE,CAAC;IAED,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AACvE,CAAC;AAED;;GAEG;AACH,SAAgB,yBAAyB,CACvC,WAAqB,EACrB,gBAAgG;IAEhG,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,+BAA+B;IAC/B,MAAM,gBAAgB,GAAG,WAAW,CAAC,MAAM,CACzC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,CAC9E,CAAC;IAEF,yFAAyF;IACzF,MAAM,cAAc,GAAG,gBAAgB;SACpC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC;SAC3D,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;SAClB,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,mBAAmB;IAEtE,mBAAmB;IACnB,OAAO,CAAC,GAAG,gBAAgB,EAAE,GAAG,cAAc,CAAC,CAAC,IAAI,EAAE,CAAC;AACzD,CAAC","sourcesContent":["/**\n * Utility functions for tree navigation and branch isolation\n */\n\n/**\n * Filters resources to show only those under a specific path\n */\nexport function filterTreeBranch(resourceIds: string[], rootPath?: string, hideRootNode?: boolean): string[] {\n  if (!rootPath) {\n    return resourceIds;\n  }\n\n  const filtered = resourceIds.filter((id) => {\n    if (hideRootNode) {\n      // Show children of the root path, but not the root itself\n      return id.startsWith(rootPath + '.') && id !== rootPath;\n    }\n    // Show the root path and all its children\n    return id === rootPath || id.startsWith(rootPath + '.');\n  });\n\n  return filtered;\n}\n\n/**\n * Adjusts resource IDs for display when showing an isolated branch\n * This makes the branch appear as if it's the root\n */\nexport function adjustResourcePath(resourceId: string, rootPath?: string, hideRootNode?: boolean): string {\n  if (!rootPath || !hideRootNode) {\n    return resourceId;\n  }\n\n  // Remove the root path prefix to make children appear as top-level\n  if (resourceId.startsWith(rootPath + '.')) {\n    return resourceId.substring(rootPath.length + 1);\n  }\n\n  return resourceId;\n}\n\n/**\n * Gets the display name for a resource, handling path adjustments\n */\nexport function getResourceDisplayName(\n  resourceId: string,\n  rootPath?: string,\n  hideRootNode?: boolean\n): string {\n  const adjustedPath = adjustResourcePath(resourceId, rootPath, hideRootNode);\n\n  // Extract just the last segment for display\n  const segments = adjustedPath.split('/');\n  return segments[segments.length - 1] || adjustedPath;\n}\n\n/**\n * Builds a tree structure from flat resource IDs\n */\nexport interface TreeNode {\n  id: string;\n  displayName: string;\n  children: TreeNode[];\n  isExpanded?: boolean;\n  isPending?: boolean;\n}\n\nexport function buildResourceTree(\n  resourceIds: string[],\n  rootPath?: string,\n  hideRootNode?: boolean,\n  expandedNodes?: Set<string>\n): TreeNode[] {\n  const tree: TreeNode[] = [];\n  const nodeMap = new Map<string, TreeNode>();\n\n  // Filter resources based on root path\n  const filteredIds = filterTreeBranch(resourceIds, rootPath, hideRootNode);\n\n  // Sort IDs to ensure parents come before children\n  const sortedIds = [...filteredIds].sort();\n\n  // Convert dot notation to slash notation for tree building\n  const convertedIds = sortedIds.map((id) => id.replace(/\\./g, '/'));\n\n  // Check for conflicts where a converted ID would be both a parent and leaf\n  const conflicts = new Set<string>();\n  for (const convertedId of convertedIds) {\n    const hasChildren = convertedIds.some(\n      (otherId) => otherId !== convertedId && otherId.startsWith(convertedId + '/')\n    );\n    if (hasChildren && convertedIds.includes(convertedId)) {\n      conflicts.add(convertedId);\n    }\n  }\n\n  if (conflicts.size > 0) {\n    throw new Error(`${Array.from(conflicts)[0]}: Duplicate resource at path.`);\n  }\n\n  // Build tree with converted IDs but keep original IDs for node references\n  for (let i = 0; i < sortedIds.length; i++) {\n    const originalId = sortedIds[i];\n    const convertedId = convertedIds[i];\n    const segments = convertedId.split('/');\n    const adjustedId = adjustResourcePath(convertedId, rootPath, hideRootNode);\n    const adjustedSegments = adjustedId.split('/');\n\n    const node: TreeNode = {\n      id: originalId, // Keep original ID\n      displayName: segments[segments.length - 1],\n      children: [],\n      isExpanded: expandedNodes?.has(originalId)\n    };\n\n    nodeMap.set(originalId, node);\n\n    if (adjustedSegments.length === 1) {\n      // Top-level node in the adjusted tree\n      tree.push(node);\n    } else {\n      // Find parent node using converted path logic\n      const parentSegments = segments.slice(0, -1);\n      const parentConvertedId = parentSegments.join('/');\n\n      // Find the original ID that corresponds to this parent path\n      const parentOriginalIndex = convertedIds.indexOf(parentConvertedId);\n      if (parentOriginalIndex >= 0) {\n        const parentOriginalId = sortedIds[parentOriginalIndex];\n        const parentNode = nodeMap.get(parentOriginalId);\n\n        if (parentNode) {\n          parentNode.children.push(node);\n        }\n      }\n    }\n  }\n\n  return tree;\n}\n\n/**\n * Flattens a tree structure back to a list of IDs\n */\nexport function flattenTree(nodes: TreeNode[]): string[] {\n  const result: string[] = [];\n\n  function traverse(node: TreeNode) {\n    result.push(node.id);\n    for (const child of node.children) {\n      traverse(child);\n    }\n  }\n\n  for (const node of nodes) {\n    traverse(node);\n  }\n\n  return result;\n}\n\n/**\n * Searches for resources matching a search term\n */\nexport function searchResources(\n  resourceIds: string[],\n  searchTerm: string,\n  searchScope: 'all' | 'current-branch' = 'all',\n  rootPath?: string\n): string[] {\n  if (!searchTerm) {\n    return resourceIds;\n  }\n\n  const term = searchTerm.toLowerCase();\n  let searchableIds = resourceIds;\n\n  // If searching only current branch, filter first\n  if (searchScope === 'current-branch' && rootPath) {\n    searchableIds = filterTreeBranch(resourceIds, rootPath, false);\n  }\n\n  return searchableIds.filter((id) => id.toLowerCase().includes(term));\n}\n\n/**\n * Merges pending resources with existing resources\n */\nexport function mergeWithPendingResources<T = unknown>(\n  existingIds: string[],\n  pendingResources?: Array<{ id: string; type: 'new' | 'modified' | 'deleted'; resourceData?: T }>\n): string[] {\n  if (!pendingResources || pendingResources.length === 0) {\n    return existingIds;\n  }\n\n  // Filter out deleted resources\n  const filteredExisting = existingIds.filter(\n    (id) => !pendingResources.some((pr) => pr.id === id && pr.type === 'deleted')\n  );\n\n  // Add new and modified resources (modified resources might not exist in existingIds yet)\n  const newResourceIds = pendingResources\n    .filter((pr) => pr.type === 'new' || pr.type === 'modified')\n    .map((pr) => pr.id)\n    .filter((id) => !filteredExisting.includes(id)); // Avoid duplicates\n\n  // Combine and sort\n  return [...filteredExisting, ...newResourceIds].sort();\n}\n"]}