{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/components/pickers/ResourcePicker/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\nimport { MagnifyingGlassIcon, ListBulletIcon, FolderIcon } from '@heroicons/react/24/outline';\nimport { ResourcePickerProps, ResourceSelection, ResourcePickerOptions } from './types';\nimport { ResourcePickerList } from './ResourcePickerList';\nimport { ResourcePickerTree } from './ResourcePickerTree';\nimport { searchResources, filterTreeBranch } from './utils/treeNavigation';\n\n/**\n * Comprehensive resource picker component with search, view modes, and annotation support.\n *\n * The ResourcePicker provides a flexible interface for browsing and selecting resources\n * from processed resource collections. It supports both list and tree view modes,\n * search functionality, visual annotations, and pending resource management.\n *\n * Key features:\n * - **Multiple view modes**: List view for simple browsing, tree view for hierarchical navigation\n * - **Search functionality**: Search across all resources or within a specific branch\n * - **Visual annotations**: Display badges, indicators, and suffixes for enhanced UX\n * - **Pending resources**: Show unsaved changes alongside persisted resources\n * - **Branch isolation**: Focus on a specific branch node of the resource tree\n * - **Type safety**: Full TypeScript support with generic resource data types\n *\n * @example\n * ```tsx\n * function MyResourceEditor() {\n *   const [selectedId, setSelectedId] = useState<string | null>(null);\n *   const [selectedData, setSelectedData] = useState<MyResourceType | null>(null);\n *\n *   return (\n *     <ResourcePicker<MyResourceType>\n *       resources={processedResources}\n *       selectedResourceId={selectedId}\n *       onResourceSelect={(selection) => {\n *         setSelectedId(selection.resourceId);\n *         setSelectedData(selection.resourceData || null);\n *\n *         if (selection.isPending) {\n *           console.log(`Pending ${selection.pendingType} operation`);\n *         }\n *       }}\n *       defaultView=\"tree\"\n *       enableSearch={true}\n *       searchPlaceholder=\"Search resources...\"\n *       resourceAnnotations={{\n *         'user.welcome': {\n *           badge: { text: '3', variant: 'info' },\n *           suffix: '(3 candidates)'\n *         }\n *       }}\n *       pendingResources={[{\n *         id: 'user.new-item',\n *         type: 'new',\n *         displayName: 'New Welcome Message',\n *         resourceData: { text: 'Hello World!' }\n *       }]}\n *       height=\"500px\"\n *     />\n *   );\n * }\n * ```\n *\n * @public\n */\nexport const ResourcePicker = <T = unknown,>({\n  resources,\n  selectedResourceId,\n  onResourceSelect,\n  resourceAnnotations,\n  pendingResources,\n  options,\n  className = '',\n  onMessage\n}: ResourcePickerProps<T>) => {\n  // Extract options with defaults\n  const {\n    defaultView = 'list',\n    showViewToggle = true,\n    rootPath,\n    hideRootNode = false,\n    enableSearch = true,\n    searchPlaceholder,\n    searchScope = 'current-branch',\n    emptyMessage,\n    height = '600px'\n  } = options || {};\n  const [viewMode, setViewMode] = useState<'list' | 'tree'>(defaultView);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Get resource IDs based on current filters\n  const resourceIds = useMemo(() => {\n    if (!resources?.summary.resourceIds) {\n      return [];\n    }\n\n    let ids = resources.summary.resourceIds;\n\n    // Apply branch filtering if specified\n    if (rootPath) {\n      ids = filterTreeBranch(ids, rootPath, hideRootNode);\n    }\n\n    // Apply search filtering\n    if (searchTerm) {\n      ids = searchResources(ids, searchTerm, searchScope, rootPath);\n    }\n\n    return ids;\n  }, [resources?.summary.resourceIds, rootPath, hideRootNode, searchTerm, searchScope]);\n\n  // Handle resource selection\n  const handleResourceSelect = useCallback(\n    (selection: ResourceSelection<T>) => {\n      onResourceSelect(selection);\n      if (selection.resourceId) {\n        onMessage?.('info', `Selected resource: ${selection.resourceId}`);\n      }\n    },\n    [onResourceSelect, onMessage]\n  );\n\n  // Calculate dynamic search placeholder\n  const getSearchPlaceholder = () => {\n    if (searchPlaceholder) {\n      return searchPlaceholder;\n    }\n    if (rootPath && hideRootNode) {\n      const segments = rootPath.split('/');\n      const branchName = segments[segments.length - 1];\n      return `Search ${branchName}...`;\n    }\n    return 'Search resources...';\n  };\n\n  // Handle empty state\n  if (!resources) {\n    return (\n      <div className={`${className} p-4 text-center text-gray-500`}>\n        <p>{emptyMessage || 'No resources loaded'}</p>\n      </div>\n    );\n  }\n\n  const containerHeight = typeof height === 'number' ? `${height}px` : height;\n\n  return (\n    <div\n      className={`flex flex-col !relative !z-auto !min-h-[400px] ${className}`}\n      style={{\n        height: containerHeight\n      }}\n    >\n      {/* Header with search and view toggle */}\n      {(enableSearch || showViewToggle) && (\n        <div className=\"flex flex-col gap-3 mb-4\">\n          {/* Search Box */}\n          {enableSearch && (\n            <div className=\"relative\">\n              <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder={getSearchPlaceholder()}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n              />\n            </div>\n          )}\n\n          {/* View Mode Toggle */}\n          {showViewToggle && (\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">\n                {resourceIds.length} resource{resourceIds.length !== 1 ? 's' : ''}\n                {searchTerm && ` matching \"${searchTerm}\"`}\n              </span>\n              <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\n                <button\n                  onClick={() => setViewMode('list')}\n                  className={`flex items-center px-2 py-1 text-xs font-medium rounded transition-colors ${\n                    viewMode === 'list'\n                      ? 'bg-white text-gray-900 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                  title=\"List View\"\n                >\n                  <ListBulletIcon className=\"h-4 w-4\" />\n                  <span className=\"ml-1\">List</span>\n                </button>\n                <button\n                  onClick={() => setViewMode('tree')}\n                  className={`flex items-center px-2 py-1 text-xs font-medium rounded transition-colors ${\n                    viewMode === 'tree'\n                      ? 'bg-white text-gray-900 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                  title=\"Tree View\"\n                >\n                  <FolderIcon className=\"h-4 w-4\" />\n                  <span className=\"ml-1\">Tree</span>\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Resource List or Tree */}\n      <div className=\"flex-1 overflow-y-auto border border-gray-200 rounded-lg bg-gray-50 !relative !z-auto !min-h-[300px]\">\n        {viewMode === 'tree' ? (\n          <ResourcePickerTree<T>\n            resources={resources}\n            pendingResources={pendingResources}\n            selectedResourceId={selectedResourceId}\n            onResourceSelect={handleResourceSelect}\n            resourceAnnotations={resourceAnnotations}\n            searchTerm={searchTerm}\n            rootPath={rootPath}\n            hideRootNode={hideRootNode}\n            emptyMessage={emptyMessage}\n          />\n        ) : (\n          <ResourcePickerList<T>\n            resourceIds={resources.summary.resourceIds || []}\n            pendingResources={pendingResources}\n            selectedResourceId={selectedResourceId}\n            onResourceSelect={handleResourceSelect}\n            resourceAnnotations={resourceAnnotations}\n            searchTerm={searchTerm}\n            rootPath={rootPath}\n            hideRootNode={hideRootNode}\n            emptyMessage={emptyMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResourcePicker;\n"]}