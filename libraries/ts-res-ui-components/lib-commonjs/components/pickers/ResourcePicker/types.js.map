{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/components/pickers/ResourcePicker/types.ts"],"names":[],"mappings":"","sourcesContent":["import React from 'react';\nimport { ProcessedResources, ExtendedProcessedResources, ViewBaseProps } from '../../../types';\n\n/**\n * Resource selection data returned by the onResourceSelect callback.\n *\n * This interface provides comprehensive information about the selected resource,\n * eliminating the need for consumers to perform additional lookups.\n *\n * @example\n * ```tsx\n * const handleResourceSelect = (selection: ResourceSelection<MyResourceType>) => {\n *   if (selection.resourceId) {\n *     console.log('Selected:', selection.resourceId);\n *     if (selection.resourceData) {\n *       console.log('Data:', selection.resourceData);\n *     }\n *     if (selection.isPending) {\n *       console.log('Pending operation:', selection.pendingType);\n *     }\n *   }\n * };\n * ```\n *\n * @public\n */\nexport interface ResourceSelection<T = unknown> {\n  /** The ID of the selected resource, or null if no selection */\n  resourceId: string | null;\n  /** The actual resource data if available and typed */\n  resourceData?: T;\n  /** Whether this is a pending (unsaved) resource */\n  isPending?: boolean;\n  /** Type of pending operation for unsaved resources */\n  pendingType?: 'new' | 'modified' | 'deleted';\n}\n\n/**\n * UI behavior configuration options for ResourcePicker.\n *\n * This interface groups all UI-related options that control how the ResourcePicker\n * behaves and appears, separate from functional data like annotations and pending resources.\n *\n * @example\n * ```tsx\n * const pickerOptions: ResourcePickerOptions = {\n *   defaultView: 'tree',\n *   enableSearch: true,\n *   searchPlaceholder: 'Find resources...',\n *   rootPath: 'user.messages',\n *   hideRootNode: true,\n *   height: '400px'\n * };\n * ```\n *\n * @public\n */\nexport interface ResourcePickerOptions {\n  /** View and navigation options */\n  /** Default view mode to use on initial render */\n  defaultView?: 'list' | 'tree';\n  /** Whether to show the list/tree view toggle buttons */\n  showViewToggle?: boolean;\n\n  /** Branch isolation options */\n  /** Path to treat as root for tree branch isolation (e.g., \"platform/territories\") */\n  rootPath?: string;\n  /** Hide the root node itself, showing only its children */\n  hideRootNode?: boolean;\n\n  /** Search options */\n  /** Whether to enable the search input */\n  enableSearch?: boolean;\n  /** Placeholder text for the search input */\n  searchPlaceholder?: string;\n  /** Scope of search - entire tree or just the currently visible branch */\n  searchScope?: 'all' | 'current-branch';\n\n  /** Appearance options */\n  /** Message to display when no resources are available */\n  emptyMessage?: string;\n  /** Height of the picker component */\n  height?: string | number;\n}\n\n/**\n * Props for the ResourcePicker component.\n *\n * The ResourcePicker is a comprehensive component for browsing and selecting resources\n * with support for multiple view modes, search, annotations, and pending resources.\n * UI behavior is controlled through the options object, while functional data is\n * passed as separate props.\n *\n * @example\n * ```tsx\n * <ResourcePicker\n *   resources={processedResources}\n *   selectedResourceId={currentId}\n *   onResourceSelect={(selection) => {\n *     setCurrentId(selection.resourceId);\n *     if (selection.resourceData) {\n *       // Use the resource data directly\n *       handleResourceData(selection.resourceData);\n *     }\n *   }}\n *   resourceAnnotations={{\n *     'res1': { badge: { text: '3', variant: 'info' } }\n *   }}\n *   options={{\n *     defaultView: 'tree',\n *     enableSearch: true,\n *     searchPlaceholder: 'Find resources...',\n *     height: '400px'\n *   }}\n * />\n * ```\n *\n * @public\n */\nexport interface ResourcePickerProps<T = unknown> extends ViewBaseProps {\n  /** Core functionality */\n  /** Processed resources to display in the picker */\n  resources: ProcessedResources | ExtendedProcessedResources | null;\n  /** Currently selected resource ID */\n  selectedResourceId: string | null;\n  /** Callback fired when a resource is selected, providing comprehensive selection data */\n  onResourceSelect: (selection: ResourceSelection<T>) => void;\n\n  /** Functional data */\n  /** Annotations to display next to resource names (badges, indicators, etc.) */\n  resourceAnnotations?: ResourceAnnotations;\n  /** Pending (unsaved) resources to display alongside persisted resources */\n  pendingResources?: PendingResource<T>[];\n\n  /** UI behavior configuration */\n  /** Options controlling picker appearance and behavior */\n  options?: ResourcePickerOptions;\n}\n\n/**\n * Annotations that can be displayed next to resource names in the picker.\n *\n * This allows the host application to provide visual indicators for resources,\n * such as candidate counts, editing status, or validation states.\n *\n * @example\n * ```tsx\n * const annotations: ResourceAnnotations = {\n *   'user.welcome': {\n *     badge: { text: '3', variant: 'info' },\n *     suffix: '(3 candidates)'\n *   },\n *   'user.modified': {\n *     badge: { text: 'M', variant: 'edited' },\n *     indicator: { type: 'dot', value: 'orange', tooltip: 'Modified' }\n *   }\n * };\n * ```\n *\n * @public\n */\nexport interface ResourceAnnotations {\n  /** Map of resource IDs to their annotation configurations */\n  [resourceId: string]: ResourceAnnotation;\n}\n\n/**\n * Individual resource annotation configuration.\n *\n * Supports multiple types of visual indicators that can be combined:\n * - Badge: Small colored badge with text\n * - Indicator: Dot, icon, or text indicator with optional tooltip\n * - Suffix: Additional content displayed after the resource name\n *\n * @example\n * ```tsx\n * const annotation: ResourceAnnotation = {\n *   badge: { text: 'NEW', variant: 'new' },\n *   indicator: {\n *     type: 'icon',\n *     value: <CheckIcon />,\n *     tooltip: 'Validated'\n *   },\n *   suffix: <span className=\"text-gray-500\">(5 candidates)</span>,\n *   className: 'resource-highlighted'\n * };\n * ```\n *\n * @public\n */\nexport interface ResourceAnnotation {\n  /** Small colored badge displayed next to the resource name */\n  badge?: {\n    /** Text content of the badge */\n    text: string;\n    /** Visual style variant for the badge */\n    variant: 'info' | 'warning' | 'success' | 'error' | 'edited' | 'new';\n  };\n  /** Visual indicator (dot, icon, or text) with optional tooltip */\n  indicator?: {\n    /** Type of indicator to display */\n    type: 'dot' | 'icon' | 'text';\n    /** Content of the indicator (color for dot, React element for icon, string for text) */\n    value: string | React.ReactNode;\n    /** Optional tooltip text shown on hover */\n    tooltip?: string;\n  };\n  /** Additional content displayed after the resource name (e.g., candidate counts) */\n  suffix?: React.ReactNode;\n  /** Additional CSS class names to apply to the resource item */\n  className?: string;\n}\n\n/**\n * Represents a resource that hasn't been persisted yet.\n *\n * Pending resources are displayed alongside persisted resources in the picker,\n * allowing users to interact with unsaved changes. They are visually distinguished\n * with appropriate styling and annotations.\n *\n * @example\n * ```tsx\n * const pendingResources: PendingResource<MyResourceType>[] = [\n *   {\n *     id: 'user.new-welcome',\n *     type: 'new',\n *     resourceType: 'string',\n *     displayName: 'Welcome Message (New)',\n *     resourceData: { text: 'Welcome!', locale: 'en' }\n *   },\n *   {\n *     id: 'user.existing-modified',\n *     type: 'modified',\n *     displayName: 'User Profile (Modified)',\n *     resourceData: { name: 'Updated Name' }\n *   }\n * ];\n * ```\n *\n * @public\n */\nexport interface PendingResource<T = unknown> {\n  /** Unique identifier for the pending resource */\n  id: string;\n  /** Type of pending operation */\n  type: 'new' | 'modified' | 'deleted';\n  /** Optional resource type identifier */\n  resourceType?: string;\n  /** Display name for the resource in the picker */\n  displayName?: string;\n  /** The actual resource data with type safety */\n  resourceData?: T;\n}\n\n/**\n * Props for individual resource items\n */\nexport interface ResourceItemProps<T = unknown> {\n  resourceId: string;\n  displayName?: string;\n  isSelected: boolean;\n  isPending?: boolean;\n  annotation?: ResourceAnnotation;\n  onClick: (selection: ResourceSelection<T>) => void;\n  searchTerm?: string;\n  className?: string;\n  resourceData?: T; // The actual resource data if available\n  pendingType?: 'new' | 'modified' | 'deleted'; // Type of pending operation\n}\n\n/**\n * Props for the list view component\n */\nexport interface ResourcePickerListProps<T = unknown> {\n  resourceIds: string[];\n  pendingResources?: PendingResource<T>[];\n  selectedResourceId: string | null;\n  onResourceSelect: (selection: ResourceSelection<T>) => void;\n  resourceAnnotations?: ResourceAnnotations;\n  searchTerm?: string;\n  rootPath?: string;\n  hideRootNode?: boolean;\n  className?: string;\n  emptyMessage?: string;\n}\n\n/**\n * Props for the tree view component\n */\nexport interface ResourcePickerTreeProps<T = unknown> {\n  resources: ProcessedResources | ExtendedProcessedResources;\n  pendingResources?: PendingResource<T>[];\n  selectedResourceId: string | null;\n  onResourceSelect: (selection: ResourceSelection<T>) => void;\n  resourceAnnotations?: ResourceAnnotations;\n  searchTerm?: string;\n  rootPath?: string;\n  hideRootNode?: boolean;\n  className?: string;\n  emptyMessage?: string;\n}\n"]}