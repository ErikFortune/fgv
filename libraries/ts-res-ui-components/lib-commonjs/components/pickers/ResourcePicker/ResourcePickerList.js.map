{"version":3,"file":"ResourcePickerList.js","sourceRoot":"","sources":["../../../../src/components/pickers/ResourcePicker/ResourcePickerList.tsx"],"names":[],"mappings":";;;;AAAA,uDAAuC;AAEvC,iDAA8C;AAC9C,2DAAqF;AAErF;;;GAGG;AACI,MAAM,kBAAkB,GAAG,CAAe,EAC/C,WAAW,EACX,gBAAgB,EAChB,kBAAkB,EAClB,gBAAgB,EAChB,mBAAmB,EACnB,UAAU,GAAG,EAAE,EACf,QAAQ,EACR,YAAY,EACZ,SAAS,GAAG,EAAE,EACd,YAAY,GAAG,wBAAwB,EACZ,EAAE,EAAE;IAC/B,uCAAuC;IACvC,MAAM,cAAc,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAClC,OAAO,IAAA,0CAAyB,EAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;IAClE,CAAC,EAAE,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAEpC,mCAAmC;IACnC,MAAM,iBAAiB,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACrC,OAAO,IAAA,iCAAgB,EAAC,cAAc,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAClE,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;IAE7C,iCAAiC;IACjC,MAAM,mBAAmB,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACvC,MAAM,QAAQ,GAAG,UAAU;YACzB,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;YACvF,CAAC,CAAC,iBAAiB,CAAC;QAEtB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,CAAC;IAEpC,6DAA6D;IAC7D,MAAM,cAAc,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAClC,OAAO,CAAC,UAAkB,EAAE,kBAA2B,EAAE,EAAE;YACzD,6FAA6F;YAC7F,IAAI,QAAQ,EAAE,CAAC;gBACb,IAAI,YAAY,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE,CAAC;oBAC1D,uEAAuE;oBACvE,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACnD,CAAC;qBAAM,IAAI,UAAU,KAAK,QAAQ,EAAE,CAAC;oBACnC,+CAA+C;oBAC/C,OAAO,QAAQ,CAAC;gBAClB,CAAC;qBAAM,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE,CAAC;oBACjD,sDAAsD;oBACtD,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACnD,CAAC;YACH,CAAC;YAED,qCAAqC;YACrC,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;IAE7B,qDAAqD;IACrD,MAAM,kBAAkB,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACtC,MAAM,GAAG,GAAG,IAAI,GAAG,EAGhB,CAAC;QACJ,gBAAgB,EAAE,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YAC/B,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACb,SAAS,EAAE,IAAI;gBACf,IAAI,EAAE,EAAE,CAAC,IAAI;gBACb,YAAY,EAAE,EAAE,CAAC,YAAY;aAC9B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACrC,OAAO,CACL,uCAAK,SAAS,EAAE,GAAG,SAAS,gCAAgC;YAC1D,yCAAI,UAAU,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,YAAY,CAAK,CACjE,CACP,CAAC;IACJ,CAAC;IAED,OAAO,CACL,uCAAK,SAAS,EAAE,GAAG,SAAS,kBAAkB,IAC3C,mBAAmB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;QACtC,MAAM,WAAW,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,eAAe,GAAG,gBAAgB,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC;QAC7E,MAAM,oBAAoB,GAAG,cAAc,CAAC,UAAU,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;QAEtF,OAAO,CACL,8BAAC,2BAAY,IACX,GAAG,EAAE,UAAU,EACf,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,oBAAoB,EACjC,UAAU,EAAE,kBAAkB,KAAK,UAAU,EAC7C,SAAS,EAAE,SAAS,EACpB,UAAU,EAAE,mBAAmB,EAAE,CAAC,UAAU,CAAC,EAC7C,OAAO,EAAE,gBAAgB,EACzB,UAAU,EAAE,UAAU,EACtB,YAAY,EAAE,WAAW,EAAE,YAAY,EACvC,WAAW,EAAE,WAAW,EAAE,IAAI,GAC9B,CACH,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAtGW,QAAA,kBAAkB,sBAsG7B;AAEF,kBAAe,0BAAkB,CAAC","sourcesContent":["import React, { useMemo } from 'react';\nimport { ResourcePickerListProps } from './types';\nimport { ResourceItem } from './ResourceItem';\nimport { mergeWithPendingResources, filterTreeBranch } from './utils/treeNavigation';\n\n/**\n * List view for the ResourcePicker component\n * Enhanced version of ResourceListView with annotation and pending resource support\n */\nexport const ResourcePickerList = <T = unknown,>({\n  resourceIds,\n  pendingResources,\n  selectedResourceId,\n  onResourceSelect,\n  resourceAnnotations,\n  searchTerm = '',\n  rootPath,\n  hideRootNode,\n  className = '',\n  emptyMessage = 'No resources available'\n}: ResourcePickerListProps<T>) => {\n  // Merge existing and pending resources\n  const allResourceIds = useMemo(() => {\n    return mergeWithPendingResources(resourceIds, pendingResources);\n  }, [resourceIds, pendingResources]);\n\n  // Apply branch isolation filtering\n  const branchFilteredIds = useMemo(() => {\n    return filterTreeBranch(allResourceIds, rootPath, hideRootNode);\n  }, [allResourceIds, rootPath, hideRootNode]);\n\n  // Filter by search term and sort\n  const filteredResourceIds = useMemo(() => {\n    const filtered = searchTerm\n      ? branchFilteredIds.filter((id) => id.toLowerCase().includes(searchTerm.toLowerCase()))\n      : branchFilteredIds;\n\n    return filtered.sort();\n  }, [branchFilteredIds, searchTerm]);\n\n  // Helper function to get display name with prefix truncation\n  const getDisplayName = useMemo(() => {\n    return (resourceId: string, pendingDisplayName?: string) => {\n      // For all resources (existing and pending), apply prefix truncation to show full relative ID\n      if (rootPath) {\n        if (hideRootNode && resourceId.startsWith(rootPath + '.')) {\n          // Remove the root path prefix completely - show the full relative path\n          return resourceId.substring(rootPath.length + 1);\n        } else if (resourceId === rootPath) {\n          // For the root node itself, show the full path\n          return rootPath;\n        } else if (resourceId.startsWith(rootPath + '.')) {\n          // Show relative to root path - the full relative path\n          return resourceId.substring(rootPath.length + 1);\n        }\n      }\n\n      // Default: show the full resource ID\n      return resourceId;\n    };\n  }, [rootPath, hideRootNode]);\n\n  // Create a map of pending resources for quick lookup\n  const pendingResourceMap = useMemo(() => {\n    const map = new Map<\n      string,\n      { isPending: boolean; type?: 'new' | 'modified' | 'deleted'; resourceData?: T }\n    >();\n    pendingResources?.forEach((pr) => {\n      map.set(pr.id, {\n        isPending: true,\n        type: pr.type,\n        resourceData: pr.resourceData\n      });\n    });\n    return map;\n  }, [pendingResources]);\n\n  if (filteredResourceIds.length === 0) {\n    return (\n      <div className={`${className} p-4 text-center text-gray-500`}>\n        <p>{searchTerm ? 'No resources match your search' : emptyMessage}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} overflow-y-auto`}>\n      {filteredResourceIds.map((resourceId) => {\n        const pendingInfo = pendingResourceMap.get(resourceId);\n        const isPending = Boolean(pendingInfo?.isPending);\n        const pendingResource = pendingResources?.find((pr) => pr.id === resourceId);\n        const truncatedDisplayName = getDisplayName(resourceId, pendingResource?.displayName);\n\n        return (\n          <ResourceItem<T>\n            key={resourceId}\n            resourceId={resourceId}\n            displayName={truncatedDisplayName}\n            isSelected={selectedResourceId === resourceId}\n            isPending={isPending}\n            annotation={resourceAnnotations?.[resourceId]}\n            onClick={onResourceSelect}\n            searchTerm={searchTerm}\n            resourceData={pendingInfo?.resourceData}\n            pendingType={pendingInfo?.type}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ResourcePickerList;\n"]}