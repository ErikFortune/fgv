{"version":3,"file":"ViewStateTools.js","sourceRoot":"","sources":["../../src/namespaces/ViewStateTools.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8EG;;;AAEH,2CAA2C;AAC3C,qEAAoE;AAA3D,gHAAA,cAAc,OAAA;AAEvB,oCAAoC;AACpC,sDAAqD;AAA5C,4GAAA,YAAY,OAAA","sourcesContent":["/**\n * Tools and components for view state management and message handling.\n *\n * This namespace contains components and utilities for managing application view state,\n * displaying messages, and providing user feedback in development tools and interactive\n * applications. Includes the MessagesWindow component for comprehensive message management.\n *\n * @example\n * ```typescript\n * import { ViewStateTools } from '@fgv/ts-res-ui-components';\n *\n * // Use the MessagesWindow component\n * function MyTool() {\n *   const [messages, setMessages] = useState<ViewStateTools.Message[]>([]);\n *\n *   const addMessage = (type: ViewStateTools.Message['type'], text: string) => {\n *     setMessages(prev => [...prev, {\n *       id: `msg-${Date.now()}`,\n *       type,\n *       message: text,\n *       timestamp: new Date()\n *     }]);\n *   };\n *\n *   return React.createElement('div', {},\n *     React.createElement('button',\n *       { onClick: () => addMessage('info', 'Operation started') },\n *       'Add Message'\n *     ),\n *     React.createElement(ViewStateTools.MessagesWindow, {\n *       messages,\n *       onClearMessages: () => setMessages([])\n *     })\n *   );\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Integration with application state\n * import { ViewStateTools } from '@fgv/ts-res-ui-components';\n *\n * interface AppState {\n *   messages: ViewStateTools.Message[];\n *   // ... other state\n * }\n *\n * function App() {\n *   const [state, setState] = useState<AppState>({\n *     messages: []\n *   });\n *\n *   const onMessage = (type: ViewStateTools.Message['type'], message: string) => {\n *     setState(prev => ({\n *       ...prev,\n *       messages: [...prev.messages, {\n *         id: `msg-${Date.now()}-${Math.random()}`,\n *         type,\n *         message,\n *         timestamp: new Date()\n *       }]\n *     }));\n *   };\n *\n *   // Component creates MessagesWindow at bottom of screen\n *   return React.createElement('div', { className: 'flex flex-col h-screen' },\n *     React.createElement('div', { className: 'flex-1' },\n *       React.createElement(SomeComponent, { onMessage })\n *     ),\n *     React.createElement(ViewStateTools.MessagesWindow, {\n *       messages: state.messages,\n *       onClearMessages: () => setState(prev => ({ ...prev, messages: [] }))\n *     })\n *   );\n * }\n * ```\n *\n * @public\n */\n\n// Export the main MessagesWindow component\nexport { MessagesWindow } from '../components/views/MessagesWindow';\n\n// Export view state management hook\nexport { useViewState } from '../hooks/useViewState';\n\n// Export types for external consumption\nexport type { Message, MessagesWindowProps } from '../components/views/MessagesWindow';\n\n// Export base view props (shared by all view components)\nexport type { ViewBaseProps } from '../types';\n"]}