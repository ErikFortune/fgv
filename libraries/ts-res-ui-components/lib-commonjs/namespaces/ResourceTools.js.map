{"version":3,"file":"ResourceTools.js","sourceRoot":"","sources":["../../src/namespaces/ResourceTools.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2FG;;;AAEH,kDAAkD;AAClD,4DAA2D;AAAlD,kHAAA,eAAe,OAAA","sourcesContent":["/**\n * Tools and hooks for resource data management and orchestration.\n *\n * This namespace contains the core data management functionality for ts-res resources,\n * including the main orchestrator hook that handles resource import, processing, configuration,\n * and resolution. This is the primary entry point for managing resource data state.\n *\n * @example\n * ```typescript\n * import { ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function ResourceManager() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *\n *   const handleFileImport = async (files: ImportedFile[]) => {\n *     await actions.processFiles(files);\n *     if (state.error) {\n *       console.error('Import failed:', state.error);\n *     } else {\n *       console.log('Resources processed:', state.processedResources);\n *     }\n *   };\n *\n *   return React.createElement('div', {},\n *     React.createElement('button',\n *       { onClick: () => handleFileImport(importedFiles) },\n *       'Process Resources'\n *     ),\n *     state.isProcessing && React.createElement('div', {}, 'Processing...'),\n *     state.error && React.createElement('div', { className: 'error' }, state.error)\n *   );\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Resource resolution example\n * import { ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function ResourceResolver() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *\n *   const resolveResource = async (resourceId: string, context: Record<string, string>) => {\n *     const result = await actions.resolveResource(resourceId, context);\n *     if (result.isSuccess()) {\n *       console.log('Resolved:', result.value);\n *     } else {\n *       console.error('Resolution failed:', result.message);\n *     }\n *   };\n *\n *   // Only show resolver if we have processed resources\n *   if (!state.processedResources) {\n *     return React.createElement('div', {}, 'No resources loaded');\n *   }\n *\n *   return React.createElement('button', {\n *     onClick: () => resolveResource('user.welcome', { language: 'en-US' })\n *   }, 'Resolve Resource');\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Configuration and bundle processing\n * import { ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * function ConfigurationManager() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *\n *   const applyNewConfiguration = (config: Config.Model.ISystemConfiguration) => {\n *     actions.applyConfiguration(config);\n *     console.log('Configuration applied:', state.activeConfiguration);\n *   };\n *\n *   const processBundleFile = async (bundle: Bundle.IBundle) => {\n *     await actions.processBundleFile(bundle);\n *     if (state.isLoadedFromBundle) {\n *       console.log('Bundle loaded:', state.bundleMetadata);\n *     }\n *   };\n *\n *   return React.createElement('div', {},\n *     React.createElement('h3', {}, 'Resource Orchestrator'),\n *     React.createElement('p', {}, `Has data: ${state.hasProcessedData}`),\n *     React.createElement('p', {}, `From bundle: ${state.isLoadedFromBundle}`)\n *   );\n * }\n * ```\n *\n * @public\n */\n\n// Export the main resource data orchestrator hook\nexport { useResourceData } from '../hooks/useResourceData';\n\n// Export types related to resource management and processing\nexport type {\n  ProcessedResources,\n  ExtendedProcessedResources,\n  ResourceManagerState,\n  ResourceEditorFactory,\n  ResourceEditorResult,\n  ResourceEditorProps,\n  ResourceDetailData\n} from '../types';\n"]}