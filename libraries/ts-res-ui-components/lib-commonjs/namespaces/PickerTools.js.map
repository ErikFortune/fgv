{"version":3,"file":"PickerTools.js","sourceRoot":"","sources":["../../src/namespaces/PickerTools.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoFG;;;AAEH,2CAA2C;AAC3C,uEAAsE;AAA7D,gHAAA,cAAc,OAAA;AAEvB,8CAA8C;AAC9C,kGAAiG;AAAxF,4IAAA,4BAA4B,OAAA","sourcesContent":["/**\n * Tools and components for resource selection and picking operations.\n *\n * This namespace contains the ResourcePicker component and related utilities for\n * browsing, searching, and selecting resources with support for annotations,\n * pending resources, and comprehensive selection data.\n *\n * @example\n * ```tsx\n * import { PickerTools } from '@fgv/ts-res-ui-components';\n *\n * // Use the ResourcePicker component\n * <PickerTools.ResourcePicker\n *   resources={processedResources}\n *   selectedResourceId={currentId}\n *   onResourceSelect={(selection) => {\n *     setCurrentId(selection.resourceId);\n *     if (selection.resourceData) {\n *       handleResourceData(selection.resourceData);\n *     }\n *   }}\n *   options={{\n *     defaultView: \"tree\",\n *     enableSearch: true\n *   }}\n *   resourceAnnotations={{\n *     'res1': { badge: { text: '3', variant: 'info' } }\n *   }}\n * />\n *\n * // Use the ResourcePickerOptionsControl for interactive configuration\n * <PickerTools.ResourcePickerOptionsControl\n *   options={pickerOptions}\n *   onOptionsChange={setPickerOptions}\n *   mode=\"collapsible\"\n *   title=\"Picker Settings\"\n *   showAdvanced={true}\n * />\n * ```\n *\n * @example\n * ```typescript\n * // Working with resource selection data\n * import { PickerTools } from '@fgv/ts-res-ui-components';\n *\n * const handleResourceSelect = (selection: PickerTools.ResourceSelection<MyResourceType>) => {\n *   if (selection.resourceId) {\n *     console.log('Selected:', selection.resourceId);\n *     if (selection.resourceData) {\n *       console.log('Data:', selection.resourceData);\n *     }\n *     if (selection.isPending) {\n *       console.log('Pending operation:', selection.pendingType);\n *     }\n *   }\n * };\n * ```\n *\n * @example\n * ```typescript\n * // Using annotations and pending resources\n * import { PickerTools } from '@fgv/ts-res-ui-components';\n *\n * const annotations: PickerTools.ResourceAnnotations = {\n *   'user.welcome': {\n *     badge: { text: 'Modified', variant: 'warning' },\n *     icon: 'pencil'\n *   },\n *   'user.goodbye': {\n *     badge: { text: 'New', variant: 'success' }\n *   }\n * };\n *\n * const pendingResources: PickerTools.PendingResource[] = [\n *   {\n *     id: 'temp-1',\n *     name: 'New Resource',\n *     type: 'new',\n *     data: { value: 'Temporary data' }\n *   }\n * ];\n * ```\n *\n * @public\n */\n\n// Export the main ResourcePicker component\nexport { ResourcePicker } from '../components/pickers/ResourcePicker';\n\n// Export ResourcePicker configuration control\nexport { ResourcePickerOptionsControl } from '../components/common/ResourcePickerOptionsControl';\n\n// Export types related to resource picking and selection\nexport type {\n  ResourcePickerProps,\n  ResourcePickerOptions,\n  ResourceSelection,\n  ResourceAnnotations,\n  ResourceAnnotation,\n  PendingResource\n} from '../components/pickers/ResourcePicker/types';\n\n// Export types for the options control\nexport type { ResourcePickerOptionsControlProps } from '../components/common/ResourcePickerOptionsControl';\n"]}