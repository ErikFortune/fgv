{"version":3,"file":"GridTools.js","sourceRoot":"","sources":["../../src/namespaces/GridTools.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2HG;;;AAEH,8BAA8B;AAC9B,yDAAwD;AAA/C,oGAAA,QAAQ,OAAA;AACjB,4EAA2E;AAAlE,8GAAA,aAAa,OAAA;AACtB,0EAAyE;AAAhE,4GAAA,YAAY,OAAA;AACrB,kFAAiF;AAAxE,oHAAA,gBAAgB,OAAA;AACzB,4FAA2F;AAAlF,8HAAA,qBAAqB,OAAA;AAC9B,0EAAyE;AAAhE,4GAAA,YAAY,OAAA;AAErB,qCAAqC;AACrC,4DAAyG;AAAhG,mGAAA,UAAU,OAAA;AAAE,oGAAA,WAAW,OAAA;AAAE,qGAAA,YAAY,OAAA;AAAE,qGAAA,YAAY,OAAA;AAE5D,wBAAwB;AACxB,8DAAuG;AAA9F,oHAAA,gBAAgB,OAAA;AAAE,2HAAA,uBAAuB,OAAA;AAAE,mHAAA,eAAe,OAAA;AACnE,0DAKiC;AAJ/B,mHAAA,iBAAiB,OAAA;AACjB,oHAAA,kBAAkB,OAAA;AAClB,qHAAA,mBAAmB,OAAA;AACnB,qHAAA,mBAAmB,OAAA;AAErB,kFAIuD;AAHrD,2HAAA,uBAAuB,OAAA;AACvB,8HAAA,0BAA0B,OAAA;AAC1B,gIAAA,4BAA4B,OAAA","sourcesContent":["/**\n * GridTools namespace for grid-based resource management components and utilities.\n *\n * Provides components and utilities for displaying and editing multiple resources\n * simultaneously in grid/table format with configurable columns, validation,\n * and batch operations.\n *\n * @example\n * ```tsx\n * import { GridTools, ResourceTools } from '@fgv/ts-res-ui-components';\n *\n * // Single grid usage\n * function UserDataGrid() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *\n *   const gridConfig: GridTools.GridViewInitParams = {\n *     id: 'users',\n *     title: 'User Data',\n *     resourceSelection: { type: 'prefix', prefix: 'user.' },\n *     columnMapping: [{\n *       resourceType: 'user-data',\n *       columns: [\n *         {\n *           id: 'name',\n *           title: 'Name',\n *           dataPath: 'name',\n *           editable: true,\n *           cellType: 'string',\n *           validation: { required: true, maxLength: 100 }\n *         },\n *         {\n *           id: 'email',\n *           title: 'Email',\n *           dataPath: 'email',\n *           editable: true,\n *           cellType: 'string',\n *           validation: {\n *             required: true,\n *             pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n *           }\n *         },\n *         {\n *           id: 'active',\n *           title: 'Active',\n *           dataPath: 'active',\n *           editable: true,\n *           cellType: 'boolean'\n *         }\n *       ]\n *     }]\n *   };\n *\n *   return (\n *     <GridTools.GridView\n *       gridConfig={gridConfig}\n *       resources={state.resources}\n *       resolutionState={state.resolutionState}\n *       resolutionActions={actions}\n *       availableQualifiers={['language', 'territory']}\n *     />\n *   );\n * }\n *\n * // Multi-grid usage for admin workflows\n * function AdminPanel() {\n *   const { state, actions } = ResourceTools.useResourceData();\n *\n *   const gridConfigs: GridTools.GridViewInitParams[] = [\n *     {\n *       id: 'languages',\n *       title: 'Languages',\n *       resourceSelection: { type: 'resourceTypes', types: ['language-config'] },\n *       columnMapping: [{\n *         resourceType: 'language-config',\n *         columns: [\n *           { id: 'code', title: 'Code', dataPath: 'code' },\n *           {\n *             id: 'name',\n *             title: 'Display Name',\n *             dataPath: 'displayName',\n *             editable: true,\n *             cellType: 'string'\n *           }\n *         ]\n *       }]\n *     },\n *     {\n *       id: 'payment-methods',\n *       title: 'Payment Methods',\n *       resourceSelection: { type: 'prefix', prefix: 'payment.' },\n *       columnMapping: [{\n *         resourceType: 'payment-config',\n *         columns: [\n *           {\n *             id: 'status',\n *             title: 'Status',\n *             dataPath: 'status',\n *             editable: true,\n *             cellType: 'dropdown',\n *             dropdownOptions: [\n *               { value: 'active', label: 'Active' },\n *               { value: 'inactive', label: 'Inactive' }\n *             ]\n *           }\n *         ]\n *       }]\n *     }\n *   ];\n *\n *   return (\n *     <GridTools.MultiGridView\n *       gridConfigurations={gridConfigs}\n *       resources={state.resources}\n *       resolutionState={state.resolutionState}\n *       resolutionActions={actions}\n *       availableQualifiers={['country', 'language', 'environment']}\n *       tabsPresentation=\"tabs\"\n *     />\n *   );\n * }\n * ```\n *\n * @public\n */\n\n// Export grid view components\nexport { GridView } from '../components/views/GridView';\nexport { MultiGridView } from '../components/views/GridView/MultiGridView';\nexport { ResourceGrid } from '../components/views/GridView/ResourceGrid';\nexport { EditableGridCell } from '../components/views/GridView/EditableGridCell';\nexport { SharedContextControls } from '../components/views/GridView/SharedContextControls';\nexport { GridSelector } from '../components/views/GridView/GridSelector';\n\n// Export specialized cell components\nexport { StringCell, BooleanCell, TriStateCell, DropdownCell } from '../components/views/GridView/cells';\n\n// Export grid utilities\nexport { ResourceSelector, defaultResourceSelector, selectResources } from '../utils/resourceSelector';\nexport {\n  validateCellValue,\n  ValidationPatterns,\n  ValidationFunctions,\n  GridValidationState\n} from '../utils/cellValidation';\nexport {\n  hasGridValidationErrors,\n  getAllGridValidationErrors,\n  clearAllGridValidationErrors\n} from '../components/views/GridView/EditableGridCell';\n\n// Export grid-related types\nexport type {\n  GridViewProps,\n  MultiGridViewProps,\n  GridViewInitParams,\n  GridColumnDefinition,\n  GridDropdownOption,\n  GridCellValidation,\n  GridResourceSelector,\n  CustomResourceSelector,\n  GridPresentationOptions,\n  ResourceTypeColumnMapping,\n  GridCellProps,\n  GridCellEditorProps\n} from '../types';\n"]}