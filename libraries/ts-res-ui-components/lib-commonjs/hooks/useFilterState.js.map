{"version":3,"file":"useFilterState.js","sourceRoot":"","sources":["../../src/hooks/useFilterState.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\nimport { FilterState, FilterActions } from '../types';\n\n/**\n * Return type for the useFilterState hook.\n *\n * @public\n */\nexport interface UseFilterStateReturn {\n  /** Current filter state including enabled status and filter values */\n  state: FilterState;\n  /** Available actions for managing filter state */\n  actions: FilterActions;\n}\n\nconst initialFilterState: FilterState = {\n  enabled: false,\n  values: {},\n  appliedValues: {},\n  hasPendingChanges: false,\n  reduceQualifiers: false\n};\n\n// Normalize values by filtering out undefined and empty strings for consistent comparison\nconst normalizeValues = (vals: Record<string, string | undefined>): Record<string, string> => {\n  const normalized: Record<string, string> = {};\n  Object.entries(vals).forEach(([key, value]) => {\n    if (value !== undefined && value !== '') {\n      normalized[key] = value;\n    }\n  });\n  return normalized;\n};\n\n/**\n * Hook for managing resource filtering state.\n *\n * This hook provides state management for resource filtering operations,\n * including filter values, pending changes tracking, and apply/reset operations.\n * It's designed to work with the FilterView component to provide a complete\n * filtering experience with change tracking and validation.\n *\n * Key features:\n * - **Filter Management**: Enable/disable filtering and manage filter values\n * - **Change Tracking**: Track pending changes before applying filters\n * - **Validation**: Prevent invalid filter states and provide user feedback\n * - **Qualifier Reduction**: Option to reduce qualifier scope when filtering\n *\n * @example\n * ```tsx\n * function ResourceFilterView() {\n *   const { state, actions } = useFilterState({\n *     enabled: true,\n *     values: { platform: 'web', locale: 'en' }\n *   });\n *\n *   return (\n *     <div>\n *       <FilterControls\n *         enabled={state.enabled}\n *         values={state.values}\n *         hasPendingChanges={state.hasPendingChanges}\n *         onEnabledChange={actions.updateFilterEnabled}\n *         onValueChange={actions.updateFilterValue}\n *         onApply={actions.applyFilters}\n *         onReset={actions.resetFilters}\n *       />\n *\n *       {state.enabled && (\n *         <FilteredResourceView filterValues={state.appliedValues} />\n *       )}\n *     </div>\n *   );\n * }\n * ```\n *\n * @param initialState - Optional initial filter state\n * @returns Object containing filter state and actions\n * @public\n */\nexport function useFilterState(initialState?: Partial<FilterState>): UseFilterStateReturn {\n  const [state, setState] = useState<FilterState>({\n    ...initialFilterState,\n    ...initialState\n  });\n\n  const updateFilterEnabled = useCallback((enabled: boolean) => {\n    setState((prev) => {\n      const normalizedValues = normalizeValues(prev.values);\n      const normalizedApplied = normalizeValues(prev.appliedValues);\n      const hasChanges = JSON.stringify(normalizedValues) !== JSON.stringify(normalizedApplied);\n\n      return {\n        ...prev,\n        enabled,\n        // Only consider filter values when determining pending changes, not the enabled state itself\n        hasPendingChanges: enabled && hasChanges\n      };\n    });\n  }, []);\n\n  const updateFilterValues = useCallback((values: Record<string, string | undefined>) => {\n    setState((prev) => {\n      const normalizedValues = normalizeValues(values);\n      const normalizedApplied = normalizeValues(prev.appliedValues);\n      const hasChanges = JSON.stringify(normalizedValues) !== JSON.stringify(normalizedApplied);\n\n      return {\n        ...prev,\n        values,\n        hasPendingChanges: prev.enabled && hasChanges\n      };\n    });\n  }, []);\n\n  const applyFilterValues = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      appliedValues: { ...prev.values },\n      hasPendingChanges: false\n    }));\n  }, []);\n\n  const resetFilterValues = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      values: {},\n      appliedValues: {},\n      hasPendingChanges: false,\n      enabled: false\n    }));\n  }, []);\n\n  const updateReduceQualifiers = useCallback((reduceQualifiers: boolean) => {\n    setState((prev) => ({\n      ...prev,\n      reduceQualifiers\n    }));\n  }, []);\n\n  const actions: FilterActions = {\n    updateFilterEnabled,\n    updateFilterValues,\n    applyFilterValues,\n    resetFilterValues,\n    updateReduceQualifiers\n  };\n\n  return { state, actions };\n}\n"]}