{"version":3,"file":"useResourceData.js","sourceRoot":"","sources":["../../src/hooks/useResourceData.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\nimport { Result, succeed, fail, mapResults } from '@fgv/ts-utils';\nimport {\n  ResourceManagerState,\n  ProcessedResources,\n  ExtendedProcessedResources,\n  ImportedDirectory,\n  ImportedFile,\n  JsonValue\n} from '../types';\nimport {\n  Config,\n  Bundle,\n  Runtime,\n  Resources,\n  Import,\n  QualifierTypes,\n  Qualifiers,\n  ResourceTypes\n} from '@fgv/ts-res';\nimport { processImportedFiles, processImportedDirectory } from '../utils/tsResIntegration';\nimport { createResolverWithContext, resolveResourceDetailed } from '../utils/resolutionUtils';\nimport * as ObservabilityTools from '../utils/observability';\n\n/**\n * Parameters for the useResourceData hook.\n * Allows customization of type factories for extended functionality.\n *\n * @public\n */\nexport interface UseResourceDataParams {\n  /** Optional qualifier type factory for creating custom qualifier types */\n  qualifierTypeFactory?: Config.IConfigInitFactory<\n    QualifierTypes.Config.IAnyQualifierTypeConfig,\n    QualifierTypes.QualifierType\n  >;\n  /** Optional resource type factory for creating custom resource types */\n  resourceTypeFactory?: Config.IConfigInitFactory<\n    ResourceTypes.Config.IResourceTypeConfig,\n    ResourceTypes.ResourceType\n  >;\n  /** Optional observability context for logging */\n  o11y?: ObservabilityTools.IObservabilityContext;\n}\n\n/**\n * Return type for the useResourceData hook.\n * Provides state and actions for managing ts-res data processing.\n *\n * @public\n */\nexport interface UseResourceDataReturn {\n  /** Current state of the resource management system */\n  state: ResourceManagerState;\n  /** Available actions for processing and managing resources */\n  actions: {\n    /** Process an imported directory structure into a resource system */\n    processDirectory: (directory: ImportedDirectory) => Promise<Result<void>>;\n    /** Process a directory with an explicit configuration */\n    processDirectoryWithConfig: (\n      directory: ImportedDirectory,\n      config: Config.Model.ISystemConfiguration\n    ) => Promise<Result<void>>;\n    /** Process an array of imported files into a resource system */\n    processFiles: (files: ImportedFile[]) => Promise<Result<void>>;\n    /** Process a pre-compiled bundle file */\n    processBundleFile: (bundle: Bundle.IBundle) => Promise<void>;\n    /** Clear any current error state */\n    clearError: () => void;\n    /** Reset the entire resource management state */\n    reset: () => void;\n    /** Resolve a specific resource with optional context */\n    resolveResource: (resourceId: string, context?: Record<string, string>) => Result<JsonValue>;\n    /** Apply a new configuration to the current system */\n    applyConfiguration: (config: Config.Model.ISystemConfiguration) => void;\n    /** Update the processed resources state directly */\n    updateProcessedResources: (processedResources: ProcessedResources) => void;\n  };\n}\n\nconst initialState: ResourceManagerState = {\n  isProcessing: false,\n  processedResources: null,\n  error: null,\n  hasProcessedData: false,\n  activeConfiguration: null,\n  isLoadedFromBundle: false,\n  bundleMetadata: null\n};\n\n/**\n * React hook for managing ts-res resource data processing and state.\n *\n * Provides comprehensive functionality for:\n * - Importing and processing resource files and directories\n * - Loading and processing pre-compiled bundles\n * - Resource resolution with context\n * - Configuration management\n * - Error handling and state management\n *\n * @returns Object containing current state and available actions\n *\n * @example\n * ```typescript\n * const { state, actions } = useResourceData();\n *\n * // Process imported files\n * await actions.processFiles(importedFiles);\n *\n * // Resolve a resource with context\n * const result = await actions.resolveResource('my.resource', {\n *   language: 'en-US',\n *   environment: 'production'\n * });\n *\n * // Check processing state\n * if (state.isProcessing) {\n *   // Show loading UI\n * } else if (state.error) {\n *   // Show error message\n * } else if (state.processedResources) {\n *   // Use processed resources\n * }\n * ```\n *\n * @public\n */\nexport function useResourceData(params?: UseResourceDataParams): UseResourceDataReturn {\n  const [state, setState] = useState<ResourceManagerState>(initialState);\n  const o11y = params?.o11y ?? ObservabilityTools.DefaultObservabilityContext;\n\n  const processDirectory = useCallback(\n    async (directory: ImportedDirectory): Promise<Result<void>> => {\n      setState((prev) => ({ ...prev, isProcessing: true, error: null }));\n\n      try {\n        return processImportedDirectory(\n          directory,\n          state.activeConfiguration || undefined,\n          params?.qualifierTypeFactory,\n          params?.resourceTypeFactory,\n          o11y\n        )\n          .onSuccess((value) => {\n            o11y.diag.info(\n              `[useResourceData] Directory processing succeeded, resources found: ${\n                value.summary?.totalResources || 0\n              }`\n            );\n            o11y.diag.info(\n              `[useResourceData] Resource IDs: ${JSON.stringify(value.summary?.resourceIds || [])}`\n            );\n\n            setState((prev) => ({\n              ...prev,\n              isProcessing: false,\n              processedResources: value,\n              hasProcessedData: true,\n              isLoadedFromBundle: false,\n              bundleMetadata: null\n            }));\n            o11y.diag.info(\n              `[useResourceData] State updated with ${value.summary?.totalResources || 0} resources`\n            );\n            return succeed(undefined);\n          })\n          .onFailure((errorMessage) => {\n            o11y.diag.error(`[useResourceData] Directory processing failed: ${errorMessage}`);\n            o11y.user.error(`Directory import failed: ${errorMessage}`);\n\n            setState((prev) => ({\n              ...prev,\n              isProcessing: false,\n              error: errorMessage\n            }));\n            return fail(errorMessage);\n          });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        o11y.diag.error(`[useResourceData] Exception during directory processing: ${errorMessage}`);\n        o11y.user.error(`Directory import failed: ${errorMessage}`);\n\n        setState((prev) => ({\n          ...prev,\n          isProcessing: false,\n          error: errorMessage\n        }));\n        return fail(errorMessage);\n      }\n    },\n    [state.activeConfiguration, params?.qualifierTypeFactory, params?.resourceTypeFactory, o11y]\n  );\n\n  const processDirectoryWithConfig = useCallback(\n    async (\n      directory: ImportedDirectory,\n      config: Config.Model.ISystemConfiguration\n    ): Promise<Result<void>> => {\n      setState((prev) => ({ ...prev, isProcessing: true, error: null, activeConfiguration: config }));\n\n      try {\n        return processImportedDirectory(\n          directory,\n          config,\n          params?.qualifierTypeFactory,\n          params?.resourceTypeFactory,\n          o11y\n        )\n          .onSuccess((value) => {\n            setState((prev) => ({\n              ...prev,\n              isProcessing: false,\n              processedResources: value,\n              hasProcessedData: true,\n              isLoadedFromBundle: false,\n              bundleMetadata: null,\n              activeConfiguration: config\n            }));\n            return succeed(undefined);\n          })\n          .onFailure((errorMessage) => {\n            o11y.user.error(`Directory import with config failed: ${errorMessage}`);\n            setState((prev) => ({\n              ...prev,\n              isProcessing: false,\n              error: errorMessage\n            }));\n            return fail(errorMessage);\n          });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        o11y.user.error(`Directory import with config failed: ${errorMessage}`);\n        setState((prev) => ({\n          ...prev,\n          isProcessing: false,\n          error: errorMessage\n        }));\n        return fail(errorMessage);\n      }\n    },\n    [params?.qualifierTypeFactory, params?.resourceTypeFactory, o11y]\n  );\n\n  const processFiles = useCallback(\n    async (files: ImportedFile[]): Promise<Result<void>> => {\n      setState((prev) => ({ ...prev, isProcessing: true, error: null }));\n\n      try {\n        return processImportedFiles(\n          files,\n          state.activeConfiguration || undefined,\n          params?.qualifierTypeFactory,\n          params?.resourceTypeFactory,\n          o11y\n        )\n          .onSuccess((value) => {\n            setState((prev) => ({\n              ...prev,\n              isProcessing: false,\n              processedResources: value,\n              hasProcessedData: true,\n              isLoadedFromBundle: false,\n              bundleMetadata: null\n            }));\n            return succeed(undefined);\n          })\n          .onFailure((errorMessage) => {\n            o11y.user.error(`Files import failed: ${errorMessage}`);\n            setState((prev) => ({\n              ...prev,\n              isProcessing: false,\n              error: errorMessage\n            }));\n            return fail(errorMessage);\n          });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        o11y.user.error(`Files import failed: ${errorMessage}`);\n        setState((prev) => ({\n          ...prev,\n          isProcessing: false,\n          error: errorMessage\n        }));\n        return fail(errorMessage);\n      }\n    },\n    [state.activeConfiguration, params?.qualifierTypeFactory, params?.resourceTypeFactory, o11y]\n  );\n\n  const processBundleFile = useCallback(\n    async (bundle: Bundle.IBundle) => {\n      o11y.diag.info('[Bundle Processing] Starting bundle processing...', bundle);\n      setState((prev) => ({ ...prev, isProcessing: true, error: null }));\n\n      try {\n        o11y.diag.info('[Bundle Processing] Attempting to extract bundle components...');\n\n        // Extract bundle components (configuration and compiled collection)\n        const { systemConfiguration, compiledCollection, metadata } =\n          Bundle.BundleUtils.extractBundleComponents(bundle).orThrow(\n            (msg) => `Failed to extract bundle components: ${msg}`\n          );\n\n        o11y.diag.info('[Bundle Processing] Extracted components:', {\n          hasSystemConfiguration: !!systemConfiguration,\n          hasCompiledCollection: !!compiledCollection,\n          hasMetadata: !!metadata,\n          systemConfiguration: systemConfiguration\n        });\n\n        // Use BundleLoader to create a fully functional resource manager from the bundle\n        o11y.diag.info('[Bundle Processing] Using BundleLoader to create resource manager from bundle');\n\n        // The bundle's IResourceManager contains all the resources and candidates\n        // We'll use it directly for both UI and resolution\n        const bundleResourceManager = Bundle.BundleLoader.createManagerFromBundle({\n          bundle: bundle,\n          skipChecksumVerification: true // Skip for now since we're in a browser environment\n        }).orThrow((msg) => `Failed to create resource manager from bundle: ${msg}`);\n\n        // Debug: Check what resources are in the original bundle manager\n        o11y.diag.info('[Bundle Processing] Original bundle manager resources:', {\n          numResources: bundleResourceManager.numResources,\n          numCandidates: bundleResourceManager.numCandidates,\n          resourceIds: Array.from(bundleResourceManager.builtResources.keys())\n        });\n\n        // Convert the compiled collection to an editable ResourceManagerBuilder\n        // using createFromCompiledResourceCollection for exact reconstruction\n        const editableResourceManager = Resources.ResourceManagerBuilder.createFromCompiledResourceCollection(\n          compiledCollection,\n          systemConfiguration\n        ).orThrow((msg) => `Failed to reconstruct builder from compiled collection: ${msg}`);\n\n        o11y.diag.info('[Bundle Processing] Normalized builder resources:', {\n          numResources: editableResourceManager.resources.size,\n          numCandidates: Array.from(editableResourceManager.getAllCandidates()).length,\n          resourceIds: Array.from(editableResourceManager.resources.keys())\n        });\n\n        // Create the system using the normalized, editable resource manager\n        const system = {\n          qualifierTypes: systemConfiguration.qualifierTypes,\n          qualifiers: systemConfiguration.qualifiers,\n          resourceTypes: systemConfiguration.resourceTypes,\n          resourceManager: editableResourceManager, // Now editable ResourceManagerBuilder\n          importManager: Import.ImportManager.create({\n            resources: Resources.ResourceManagerBuilder.create({\n              qualifiers: systemConfiguration.qualifiers,\n              resourceTypes: systemConfiguration.resourceTypes\n            }).orThrow()\n          }).orThrow(),\n          contextQualifierProvider: Runtime.Context.ValidatingSimpleContextQualifierProvider.create({\n            qualifiers: systemConfiguration.qualifiers\n          }).orThrow()\n        };\n\n        // Extract configuration for UI display using the new getConfigurationJson method\n        const allQualifierTypes = mapResults(\n          Array.from(system.qualifierTypes.values()).map((qt) =>\n            qt\n              .getConfigurationJson()\n              .onSuccess((jsonConfig) =>\n                QualifierTypes.Config.Convert.anyQualifierTypeConfig.convert(jsonConfig)\n              )\n          )\n        ).orThrow((msg) => `Failed to extract qualifier type configurations: ${msg}`);\n\n        const systemQualifierTypes = allQualifierTypes.filter(\n          QualifierTypes.Config.isSystemQualifierTypeConfig\n        );\n\n        const configForStorage: Config.Model.ISystemConfiguration = {\n          name: 'Bundle Configuration',\n          description: metadata?.description || 'Configuration extracted from bundle',\n          qualifierTypes: systemQualifierTypes as QualifierTypes.Config.ISystemQualifierTypeConfig[],\n          qualifiers: Array.from(system.qualifiers.values()).map((q) => {\n            o11y.diag.info('[Bundle Processing] Extracting qualifier:', q);\n            // Instantiated Qualifier objects have .type property which is a QualifierType object\n            const typeName = q.type.name;\n            if (!typeName) {\n              o11y.diag.error('[Bundle Processing] Missing typeName for qualifier:', q);\n            }\n            return {\n              name: q.name,\n              typeName,\n              token: q.token,\n              defaultPriority: q.defaultPriority,\n              tokenIsOptional: q.tokenIsOptional,\n              ...(q.defaultValue !== undefined ? { defaultValue: q.defaultValue } : {})\n            };\n          }),\n          resourceTypes: Array.from(system.resourceTypes.values()).map((rt, index: number) => {\n            o11y.diag.info('[Bundle Processing] Extracting resource type:', rt);\n            // ResourceTypes in bundles might not have a name property\n            // Default to 'json' for JsonResourceType\n            const typeName = rt.systemTypeName;\n            return {\n              name: rt.key,\n              typeName: rt.systemTypeName\n            };\n          })\n        };\n\n        o11y.diag.info('[Bundle Processing] Extracted configuration for UI:', configForStorage);\n\n        // Extract resource IDs from the loaded resource manager\n        const resourceIds: string[] = [];\n        let resourceCount = 0;\n\n        // The resource manager is now fully loaded with all bundle resources\n        // Extract resource IDs from the compiled collection for tracking\n        if (compiledCollection.resources) {\n          for (const resource of compiledCollection.resources) {\n            const resourceId = resource.id || `resource-${resourceCount}`;\n            resourceIds.push(resourceId);\n            resourceCount++;\n          }\n        }\n\n        o11y.diag.info(`Bundle loaded with ${resourceCount} resources (with candidates):`, resourceIds);\n\n        // Create a resolver using the bundle's resource manager\n        const resolver = Runtime.ResourceResolver.create({\n          resourceManager: system.resourceManager,\n          qualifierTypes: system.qualifierTypes,\n          contextQualifierProvider: system.contextQualifierProvider\n        }).orThrow((msg) => `Failed to create resolver: ${msg}`);\n\n        // No longer create a separate CompiledResourceCollection manager\n        // We'll derive the compiled collection from ResourceManagerBuilder when needed\n\n        // Create the processed resources structure with bundle data\n        const processedResources: ProcessedResources = {\n          system: {\n            qualifierTypes: system.qualifierTypes,\n            qualifiers: system.qualifiers,\n            resourceTypes: system.resourceTypes,\n            resourceManager: system.resourceManager,\n            importManager: system.importManager,\n            contextQualifierProvider: system.contextQualifierProvider\n          },\n          compiledCollection,\n          resolver,\n          resourceCount,\n          summary: {\n            totalResources: resourceCount,\n            resourceIds,\n            errorCount: 0,\n            warnings: [`Bundle loaded with ${resourceCount} resources from compiled collection`]\n          }\n        };\n\n        o11y.diag.info('[Bundle Processing] Setting final state...', {\n          resourceCount,\n          resourceIds,\n          configForStorage,\n          hasProcessedResources: !!processedResources\n        });\n\n        setState((prev) => ({\n          ...prev,\n          isProcessing: false,\n          processedResources,\n          hasProcessedData: true,\n          error: null,\n          activeConfiguration: configForStorage,\n          isLoadedFromBundle: true,\n          bundleMetadata: metadata\n        }));\n\n        o11y.diag.info('[Bundle Processing] Bundle processing completed successfully!');\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          isProcessing: false,\n          error: error instanceof Error ? error.message : String(error)\n        }));\n      }\n    },\n    [o11y]\n  );\n\n  const clearError = useCallback(() => {\n    setState((prev) => ({ ...prev, error: null }));\n  }, []);\n\n  const reset = useCallback(() => {\n    setState(initialState);\n  }, []);\n\n  const resolveResource = useCallback(\n    (resourceId: string, context?: Record<string, string>): Result<JsonValue> => {\n      if (!state.processedResources?.system?.resourceManager) {\n        return fail('No resources loaded');\n      }\n\n      try {\n        // Use provided context or empty context\n        const contextValues = context || {};\n\n        return state.processedResources.system.resourceManager\n          .getBuiltResource(resourceId)\n          .onFailure(() => fail(`Resource not found: ${resourceId}`))\n          .onSuccess(() =>\n            createResolverWithContext(state.processedResources!, contextValues, {\n              enableDebugLogging: false\n            }).withErrorFormat((msg) => `Failed to create resolver: ${msg}`)\n          )\n          .onSuccess((resolver) =>\n            resolveResourceDetailed(resolver, resourceId, state.processedResources!, {\n              enableDebugLogging: false\n            }).withErrorFormat((msg) => `Failed to resolve resource details: ${msg}`)\n          )\n          .onSuccess((resolutionResult) => {\n            // Return the detailed resolution result as JsonValue\n            const detailedJson = {\n              success: resolutionResult.success,\n              resourceId: resolutionResult.resourceId,\n              resource: resolutionResult.resource\n                ? {\n                    id: resolutionResult.resource.id,\n                    resourceType: resolutionResult.resource.resourceType?.key || 'unknown',\n                    candidateCount: resolutionResult.resource.candidates.length\n                  }\n                : null,\n              bestCandidate: resolutionResult.bestCandidate?.json,\n              allCandidates: resolutionResult.allCandidates?.map((c: any) => c.json),\n              candidateDetails: resolutionResult.candidateDetails?.map((cd: any) => ({\n                candidateIndex: cd.candidateIndex,\n                matched: cd.matched,\n                matchType: cd.matchType,\n                isDefaultMatch: cd.isDefaultMatch,\n                conditionEvaluations: cd.conditionEvaluations,\n                candidateJson: cd.candidate?.json\n              })),\n              composedValue: resolutionResult.composedValue,\n              error: resolutionResult.error\n            };\n\n            return succeed(detailedJson as unknown as JsonValue);\n          });\n      } catch (error) {\n        return fail(`Failed to resolve resource: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    [state.processedResources]\n  );\n\n  const applyConfiguration = useCallback((config: Config.Model.ISystemConfiguration) => {\n    setState((prev) => ({ ...prev, activeConfiguration: config }));\n  }, []);\n\n  const updateProcessedResources = useCallback((processedResources: ProcessedResources) => {\n    setState((prev) => {\n      const incomingExtended = processedResources as ExtendedProcessedResources;\n      const existingExtended = prev.processedResources;\n\n      // Build the extended properties object, only including defined values\n      const extendedProps: Partial<ExtendedProcessedResources> = {};\n\n      // Handle activeConfiguration - prefer incoming, then existing, then leave undefined\n      const activeConfig = incomingExtended.activeConfiguration ?? existingExtended?.activeConfiguration;\n      if (activeConfig !== undefined) {\n        extendedProps.activeConfiguration = activeConfig;\n      }\n\n      // Handle isLoadedFromBundle - prefer incoming, then existing, then leave undefined\n      const isLoaded = incomingExtended.isLoadedFromBundle ?? existingExtended?.isLoadedFromBundle;\n      if (isLoaded !== undefined) {\n        extendedProps.isLoadedFromBundle = isLoaded;\n      }\n\n      // Handle bundleMetadata - prefer incoming, then existing, then leave undefined\n      const bundleMeta = incomingExtended.bundleMetadata ?? existingExtended?.bundleMetadata;\n      if (bundleMeta !== undefined) {\n        extendedProps.bundleMetadata = bundleMeta;\n      }\n\n      return {\n        ...prev,\n        processedResources: {\n          // Start with the new processedResources (core data)\n          ...processedResources,\n          // Then add any extended properties that have values\n          ...extendedProps\n        },\n        hasProcessedData: true\n      };\n    });\n  }, []);\n\n  return {\n    state,\n    actions: {\n      processDirectory,\n      processDirectoryWithConfig,\n      processFiles,\n      processBundleFile,\n      clearError,\n      reset,\n      resolveResource,\n      applyConfiguration,\n      updateProcessedResources\n    }\n  };\n}\n"]}