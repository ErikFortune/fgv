{"version":3,"file":"useResourceData.js","sourceRoot":"","sources":["../../src/hooks/useResourceData.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\nimport { Result, succeed, fail } from '@fgv/ts-utils';\nimport { ResourceManagerState, ProcessedResources, ImportedDirectory, ImportedFile } from '../types';\nimport { Config, Bundle, Runtime } from '@fgv/ts-res';\nimport { \n  processImportedFiles,\n  processImportedDirectory,\n  createSimpleContext \n} from '../utils/tsResIntegration';\n\nexport interface UseResourceDataReturn {\n  state: ResourceManagerState;\n  actions: {\n    processDirectory: (directory: ImportedDirectory) => Promise<void>;\n    processFiles: (files: ImportedFile[]) => Promise<void>;\n    processBundleFile: (bundle: Bundle.IBundle) => Promise<void>;\n    clearError: () => void;\n    reset: () => void;\n    resolveResource: (resourceId: string, context?: Record<string, string>) => Promise<Result<any>>;\n    applyConfiguration: (config: Config.Model.ISystemConfiguration) => void;\n    updateProcessedResources: (processedResources: ProcessedResources) => void;\n  };\n}\n\nconst initialState: ResourceManagerState = {\n  isProcessing: false,\n  processedResources: null,\n  error: null,\n  hasProcessedData: false,\n  activeConfiguration: null,\n  isLoadedFromBundle: false,\n  bundleMetadata: null\n};\n\nexport function useResourceData(): UseResourceDataReturn {\n  const [state, setState] = useState<ResourceManagerState>(initialState);\n\n  const processDirectory = useCallback(async (directory: ImportedDirectory) => {\n    setState(prev => ({ ...prev, isProcessing: true, error: null }));\n\n    try {\n      const result = processImportedDirectory(directory, state.activeConfiguration || undefined);\n      \n      if (result.isSuccess()) {\n        setState(prev => ({\n          ...prev,\n          isProcessing: false,\n          processedResources: result.value,\n          hasProcessedData: true,\n          isLoadedFromBundle: false,\n          bundleMetadata: null\n        }));\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isProcessing: false,\n        error: error instanceof Error ? error.message : String(error)\n      }));\n    }\n  }, [state.activeConfiguration]);\n\n  const processFiles = useCallback(async (files: ImportedFile[]) => {\n    setState(prev => ({ ...prev, isProcessing: true, error: null }));\n\n    try {\n      const result = processImportedFiles(files, state.activeConfiguration || undefined);\n      \n      if (result.isSuccess()) {\n        setState(prev => ({\n          ...prev,\n          isProcessing: false,\n          processedResources: result.value,\n          hasProcessedData: true,\n          isLoadedFromBundle: false,\n          bundleMetadata: null\n        }));\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isProcessing: false,\n        error: error instanceof Error ? error.message : String(error)\n      }));\n    }\n  }, [state.activeConfiguration]);\n\n  const processBundleFile = useCallback(async (bundle: Bundle.IBundle) => {\n    setState(prev => ({ ...prev, isProcessing: true, error: null }));\n\n    try {\n      // For now, bundle processing is simplified - this would need actual bundle loading implementation\n      // The working ts-res-browser has more complex bundle loading logic that we'd need to replicate\n      throw new Error('Bundle processing not yet implemented in component library');\n      \n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isProcessing: false,\n        error: error instanceof Error ? error.message : String(error)\n      }));\n    }\n  }, []);\n\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n\n  const reset = useCallback(() => {\n    setState(initialState);\n  }, []);\n\n  const resolveResource = useCallback(async (\n    resourceId: string,\n    context?: Record<string, string>\n  ): Promise<Result<any>> => {\n    if (!state.processedResources?.system?.resourceManager) {\n      return fail('No resources loaded');\n    }\n\n    try {\n      // Get the resource from the resource manager\n      const resourceResult = state.processedResources.system.resourceManager.getBuiltResource(resourceId);\n      if (resourceResult.isFailure()) {\n        return fail(`Resource not found: ${resourceId}`);\n      }\n\n      // For now, return the resource object itself\n      // Full resolution with context would require more complex logic\n      return succeed(resourceResult.value);\n    } catch (error) {\n      return fail(`Failed to resolve resource: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }, [state.processedResources]);\n\n  const applyConfiguration = useCallback((config: Config.Model.ISystemConfiguration) => {\n    setState(prev => ({ ...prev, activeConfiguration: config }));\n  }, []);\n\n  const updateProcessedResources = useCallback((processedResources: ProcessedResources) => {\n    setState(prev => ({ \n      ...prev, \n      processedResources,\n      hasProcessedData: true\n    }));\n  }, []);\n\n  return {\n    state,\n    actions: {\n      processDirectory,\n      processFiles,\n      processBundleFile,\n      clearError,\n      reset,\n      resolveResource,\n      applyConfiguration,\n      updateProcessedResources\n    }\n  };\n}"]}