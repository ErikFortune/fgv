{"version":3,"file":"useResolutionState.js","sourceRoot":"","sources":["../../src/hooks/useResolutionState.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { Runtime } from '@fgv/ts-res';\nimport { ResolutionState, ResolutionActions, ResolutionResult, ProcessedResources } from '../types';\nimport { \n  createResolverWithContext, \n  resolveResourceDetailed, \n  getAvailableQualifiers, \n  hasPendingContextChanges \n} from '../utils/resolutionUtils';\n\nexport interface UseResolutionStateReturn {\n  state: ResolutionState;\n  actions: ResolutionActions;\n  availableQualifiers: string[];\n}\n\nexport function useResolutionState(\n  processedResources: ProcessedResources | null,\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void\n): UseResolutionStateReturn {\n  // Get available qualifiers\n  const availableQualifiers = useMemo(() => {\n    if (!processedResources) return [];\n    return getAvailableQualifiers(processedResources);\n  }, [processedResources]);\n\n  // Initialize context with all qualifiers undefined\n  const defaultContextValues = useMemo(() => {\n    const defaults: Record<string, string | undefined> = {};\n    availableQualifiers.forEach((qualifierName) => {\n      defaults[qualifierName] = undefined;\n    });\n    return defaults;\n  }, [availableQualifiers]);\n\n  // Resolution state\n  const [contextValues, setContextValues] = useState<Record<string, string | undefined>>({});\n  const [pendingContextValues, setPendingContextValues] = useState<Record<string, string | undefined>>({});\n  const [selectedResourceId, setSelectedResourceId] = useState<string | null>(null);\n  const [currentResolver, setCurrentResolver] = useState<Runtime.ResourceResolver | null>(null);\n  const [resolutionResult, setResolutionResult] = useState<ResolutionResult | null>(null);\n  const [viewMode, setViewMode] = useState<'composed' | 'best' | 'all' | 'raw'>('composed');\n\n  // Update context state when defaults change\n  React.useEffect(() => {\n    setContextValues(defaultContextValues);\n    setPendingContextValues(defaultContextValues);\n  }, [defaultContextValues]);\n\n  // Check for pending changes\n  const hasPendingChanges = useMemo(() => {\n    return hasPendingContextChanges(contextValues, pendingContextValues);\n  }, [contextValues, pendingContextValues]);\n\n  // Update context value\n  const updateContextValue = useCallback((qualifierName: string, value: string | undefined) => {\n    setPendingContextValues((prev) => ({\n      ...prev,\n      [qualifierName]: value\n    }));\n  }, []);\n\n  // Apply context changes\n  const applyContext = useCallback(() => {\n    if (!processedResources) {\n      onMessage?.('error', 'No resources loaded');\n      return;\n    }\n\n    try {\n      // Create resolver with new context\n      const resolverResult = createResolverWithContext(\n        processedResources,\n        pendingContextValues,\n        { enableCaching: true, enableDebugLogging: false }\n      );\n\n      if (resolverResult.isFailure()) {\n        onMessage?.('error', `Failed to create resolver: ${resolverResult.message}`);\n        return;\n      }\n\n      // Update state\n      setContextValues({ ...pendingContextValues });\n      setCurrentResolver(resolverResult.value);\n\n      // If a resource is selected, resolve it with the new context\n      if (selectedResourceId) {\n        const resolutionResult = resolveResourceDetailed(\n          resolverResult.value,\n          selectedResourceId,\n          processedResources\n        );\n\n        if (resolutionResult.isSuccess()) {\n          setResolutionResult(resolutionResult.value);\n        } else {\n          onMessage?.('error', `Failed to resolve resource: ${resolutionResult.message}`);\n        }\n      }\n\n      onMessage?.('success', 'Context applied successfully');\n    } catch (error) {\n      onMessage?.('error', `Failed to apply context: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }, [processedResources, pendingContextValues, selectedResourceId, onMessage]);\n\n  // Select resource and resolve it\n  const selectResource = useCallback((resourceId: string) => {\n    setSelectedResourceId(resourceId);\n    setResolutionResult(null);\n\n    if (currentResolver && processedResources) {\n      const resolutionResult = resolveResourceDetailed(\n        currentResolver,\n        resourceId,\n        processedResources\n      );\n\n      if (resolutionResult.isSuccess()) {\n        setResolutionResult(resolutionResult.value);\n        onMessage?.('info', `Selected resource: ${resourceId}`);\n      } else {\n        onMessage?.('error', `Failed to resolve resource: ${resolutionResult.message}`);\n      }\n    }\n  }, [currentResolver, processedResources, onMessage]);\n\n  // Reset cache\n  const resetCache = useCallback(() => {\n    if (currentResolver) {\n      currentResolver.clearConditionCache();\n      onMessage?.('info', 'Cache cleared');\n    }\n  }, [currentResolver, onMessage]);\n\n  // Auto-apply default context when resources are loaded\n  React.useEffect(() => {\n    if (processedResources && Object.keys(defaultContextValues).length > 0) {\n      applyContext();\n    }\n  }, [processedResources, defaultContextValues]);\n\n  const state: ResolutionState = {\n    contextValues,\n    pendingContextValues,\n    selectedResourceId,\n    currentResolver,\n    resolutionResult,\n    viewMode,\n    hasPendingChanges\n  };\n\n  const actions: ResolutionActions = {\n    updateContextValue,\n    applyContext,\n    selectResource,\n    setViewMode,\n    resetCache\n  };\n\n  return {\n    state,\n    actions,\n    availableQualifiers\n  };\n}"]}