{"version":3,"file":"useResolutionState.js","sourceRoot":"","sources":["../../src/hooks/useResolutionState.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport {\n  QualifierTypes,\n  Qualifiers,\n  Runtime,\n  ResourceJson,\n  ResourceTypes,\n  ResourceId,\n  Validate,\n  QualifierName\n} from '@fgv/ts-res';\nimport { Result, succeed, fail, MessageAggregator } from '@fgv/ts-utils';\nimport type { JsonObject as ResourceJsonObject } from '@fgv/ts-json-base';\nimport { isJsonObject } from '@fgv/ts-json-base';\nimport {\n  ResolutionState,\n  ResolutionActions,\n  ResolutionResult,\n  ProcessedResources,\n  JsonValue,\n  CreatePendingResourceParams,\n  StartNewResourceParams\n} from '../types';\nimport {\n  createResolverWithContext,\n  resolveResourceDetailed,\n  getAvailableQualifiers,\n  hasPendingContextChanges\n} from '../utils/resolutionUtils';\nimport { useObservability } from '../contexts';\nimport {\n  validateEditedResource,\n  computeResourceDelta,\n  rebuildSystemWithEdits,\n  rebuildSystemWithChanges,\n  extractResolutionContext,\n  checkEditConflicts\n} from '../utils/resolutionEditing';\n\n/**\n * Return type for the useResolutionState hook.\n *\n * @public\n */\nexport interface UseResolutionStateReturn {\n  /** Current resolution state including context, results, and editing state */\n  state: ResolutionState;\n  /** Available actions for managing resolution and editing */\n  actions: ResolutionActions;\n  /** List of available qualifier keys that can be used in the resolution context */\n  availableQualifiers: string[];\n}\n\n/**\n * Helper function to find and validate a resource type by name.\n *\n * @param typeName - The resource type name to find\n * @param availableResourceTypes - Array of available resource types\n * @param onMessage - Optional callback for error messages\n * @returns Result containing the found resource type or error\n */\nfunction findResourceType(\n  typeName: string,\n  availableResourceTypes: ResourceTypes.IResourceType[],\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void\n): Result<ResourceTypes.IResourceType> {\n  const resourceType = availableResourceTypes.find((t) => t.key === typeName);\n\n  if (!resourceType) {\n    const availableTypes = availableResourceTypes.map((t) => t.key).join(', ');\n    const error = `Resource type '${typeName}' not found`;\n    onMessage?.('error', error);\n    return fail(`${error}\\nAvailable types: ${availableTypes}`);\n  }\n\n  return succeed(resourceType);\n}\n\n/**\n * Helper function to create condition declarations from context with proper validation.\n *\n * @param effectiveContext - The context values to create conditions from\n * @param qualifiers - The qualifiers collection for validation\n * @param onMessage - Optional callback for error messages\n * @returns Result containing condition declarations or error\n */\nfunction createContextConditions(\n  effectiveContext: Record<string, string | undefined>,\n  qualifiers: Qualifiers.IReadOnlyQualifierCollector | undefined,\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void\n): Result<ResourceJson.Json.ILooseConditionDecl[]> {\n  // Qualifiers are required for proper validation\n  if (!qualifiers) {\n    const error = 'Qualifiers not available - cannot validate context values';\n    onMessage?.('error', error);\n    return fail(error);\n  }\n  const contextConditions: ResourceJson.Json.ILooseConditionDecl[] = [];\n  const errors: MessageAggregator = new MessageAggregator();\n\n  for (const [qualifierName, qualifierValue] of Object.entries(effectiveContext)) {\n    if (qualifierValue === undefined || qualifierValue === null) {\n      continue; // Skip undefined/null values\n    }\n\n    qualifiers\n      .get(qualifierName as QualifierName)\n      .asResult.withErrorFormat((error) => `${qualifierName}: unknown qualifier': ${error}`)\n      .onSuccess((qualifier) => {\n        return qualifier\n          .validateCondition(qualifierValue)\n          .withErrorFormat((error) => `${qualifierName}: invalid value '${qualifierValue}': ${error}`);\n      })\n      .onSuccess((qualifier) => {\n        contextConditions.push({ qualifierName, operator: 'matches', value: qualifierValue });\n        return succeed(qualifier);\n      })\n      .onFailure((error) => {\n        onMessage?.('error', error);\n        return fail(error);\n      })\n      .aggregateError(errors);\n  }\n\n  return errors.returnOrReport(succeed(contextConditions));\n}\n\n/**\n * Helper function to check if a resource ID already exists.\n *\n * @param resourceId - The resource ID to check\n * @param processedResources - The processed resources (may be null)\n * @param pendingResources - Map of pending resources\n * @returns true if the ID already exists, false otherwise\n */\nfunction isResourceIdTaken(\n  resourceId: string,\n  processedResources: ProcessedResources | null,\n  pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>\n): boolean {\n  return (\n    processedResources?.summary?.resourceIds?.find((rid) => rid === resourceId) !== undefined ||\n    pendingResources.has(resourceId)\n  );\n}\n\n/**\n * Hook for managing resource resolution state and editing operations.\n *\n * This hook provides comprehensive state management for resource resolution,\n * including context management, resource editing, and conflict detection.\n * It integrates with the ts-res library to provide real-time resolution\n * results and supports editing resources with validation and preview functionality.\n *\n * Key features:\n * - **Context Management**: Set and update resolution context (qualifiers)\n * - **Resource Resolution**: Real-time resolution with detailed results\n * - **Resource Editing**: Edit resources with validation and conflict detection\n * - **Preview Mode**: See how edits affect resolution without committing\n * - **Change Tracking**: Track pending changes and detect conflicts\n *\n * @example\n * ```tsx\n * function ResourceResolutionView({ processedResources }: { processedResources: ProcessedResources }) {\n *   const { state, actions, availableQualifiers } = useResolutionState(\n *     processedResources,\n *     (type, message) => console.log(`${type}: ${message}`),\n *     (updatedResources) => {\n *       // Handle system updates when edits are applied\n *       setProcessedResources(updatedResources);\n *     }\n *   );\n *\n *   return (\n *     <div>\n *       <QualifierSelector\n *         availableQualifiers={availableQualifiers}\n *         context={state.context}\n *         onChange={actions.updateContext}\n *       />\n *\n *       <ResourcePicker\n *         selectedResourceId={state.selectedResourceId}\n *         onResourceSelect={(selection) => {\n *           actions.selectResource(selection.resourceId);\n *         }}\n *       />\n *\n *       {state.resolutionResult && (\n *         <ResolutionDisplay\n *           result={state.resolutionResult}\n *           isEditing={state.isEditing}\n *           editedValue={state.editedValue}\n *           onEdit={actions.startEditing}\n *           onSave={actions.saveEdit}\n *           onCancel={actions.cancelEdit}\n *         />\n *       )}\n *     </div>\n *   );\n * }\n * ```\n *\n * @param processedResources - The processed resources to work with\n * @param onMessage - Optional callback for displaying messages to the user\n * @param onSystemUpdate - Optional callback when the resource system is updated with edits\n * @returns Object containing resolution state, actions, and available qualifiers\n * @public\n */\nexport function useResolutionState(\n  processedResources: ProcessedResources | null,\n  onMessage?: (type: 'info' | 'warning' | 'error' | 'success', message: string) => void,\n  onSystemUpdate?: (updatedResources: ProcessedResources) => void\n): UseResolutionStateReturn {\n  // Get observability context\n  const o11y = useObservability();\n  // Get available qualifiers\n  const availableQualifiers = useMemo(() => {\n    if (!processedResources) return [];\n    return getAvailableQualifiers(processedResources);\n  }, [processedResources]);\n\n  // Initialize context with all qualifiers undefined\n  const defaultContextValues = useMemo(() => {\n    const defaults: Record<string, string | undefined> = {};\n    availableQualifiers.forEach((qualifierName) => {\n      defaults[qualifierName] = undefined;\n    });\n    return defaults;\n  }, [availableQualifiers]);\n\n  // Resolution state - Three layers:\n  // 1. appliedUserValues: User values that have been applied (via Apply button)\n  // 2. pendingUserValues: User values that haven't been applied yet\n  // 3. hostManagedValues: Values controlled by the host (passed as prop)\n  // Effective context = appliedUserValues + hostManagedValues (host overrides user)\n\n  const [appliedUserValues, setAppliedUserValues] = useState<Record<string, string | undefined>>({});\n  const [pendingUserValues, setPendingUserValues] = useState<Record<string, string | undefined>>({});\n  const [selectedResourceId, setSelectedResourceId] = useState<string | null>(null);\n  const [currentResolver, setCurrentResolver] = useState<Runtime.ResourceResolver | null>(null);\n  const [resolutionResult, setResolutionResult] = useState<ResolutionResult | null>(null);\n  const [viewMode, setViewMode] = useState<'composed' | 'best' | 'all' | 'raw'>('composed');\n\n  // Store host-managed values that can be updated via applyContext\n  const [hostManagedValues, setHostManagedValues] = useState<Record<string, string | undefined>>({});\n\n  // Compute effective context: user values + host values (host wins)\n  const effectiveContext = useMemo(\n    () => ({\n      ...appliedUserValues,\n      ...hostManagedValues\n    }),\n    [appliedUserValues, hostManagedValues]\n  );\n\n  // Edit state - stores original, edited, and delta for each resource\n  const [editedResourcesInternal, setEditedResourcesInternal] = useState<\n    Map<string, { originalValue: JsonValue; editedValue: JsonValue; delta: JsonValue }>\n  >(new Map());\n\n  // Pending resource edit state - tracks edits to pending resources separately from templates\n  const [pendingResourceEdits, setPendingResourceEdits] = useState<\n    Map<string, { originalValue: JsonValue; editedValue: JsonValue }>\n  >(new Map());\n\n  // Convert to the simpler Map format expected by ResolutionState\n  const editedResources = useMemo(() => {\n    const simpleMap = new Map<string, JsonValue>();\n\n    // Include existing resource edits\n    editedResourcesInternal.forEach((value, key) => {\n      simpleMap.set(key, value.editedValue);\n    });\n\n    // Include pending resource edits\n    pendingResourceEdits.forEach((value, key) => {\n      simpleMap.set(key, value.editedValue);\n    });\n\n    return simpleMap;\n  }, [editedResourcesInternal, pendingResourceEdits]);\n  const [isApplyingEdits, setIsApplyingEdits] = useState(false);\n\n  // Pending resource state\n  const [pendingResources, setPendingResources] = useState<Map<string, ResourceJson.Json.ILooseResourceDecl>>(\n    new Map()\n  );\n  const [pendingResourceDeletions, setPendingResourceDeletions] = useState<Set<string>>(new Set());\n  const [newResourceDraft, setNewResourceDraft] = useState<\n    | {\n        resourceId: string;\n        resourceType: string;\n        template: ResourceJson.Json.ILooseResourceDecl;\n        isValid: boolean;\n      }\n    | undefined\n  >(undefined);\n\n  // Get available resource types from the processed resources\n  const availableResourceTypes = useMemo<ResourceTypes.IResourceType[]>(() => {\n    if (!processedResources) return [];\n    const types: ResourceTypes.IResourceType[] = [];\n    processedResources.system.resourceTypes.forEach((type) => {\n      types.push(type as ResourceTypes.IResourceType);\n    });\n    return types;\n  }, [processedResources]);\n\n  // Update context state when defaults change\n  React.useEffect(() => {\n    setAppliedUserValues(defaultContextValues);\n    setPendingUserValues(defaultContextValues);\n  }, [defaultContextValues]);\n\n  // Check for pending changes - only user values, not host values\n  const hasPendingChanges = useMemo(() => {\n    return hasPendingContextChanges(appliedUserValues, pendingUserValues);\n  }, [appliedUserValues, pendingUserValues]);\n\n  // Check for unsaved edits\n  const hasUnsavedEdits = useMemo(() => {\n    return editedResourcesInternal.size > 0 || pendingResourceEdits.size > 0;\n  }, [editedResourcesInternal, pendingResourceEdits]);\n\n  // Check for pending resource changes\n  const hasPendingResourceChanges = useMemo(() => {\n    return pendingResources.size > 0 || pendingResourceDeletions.size > 0;\n  }, [pendingResources, pendingResourceDeletions]);\n\n  // Update context value (only updates pending user values, not host values)\n  const updateContextValue = useCallback(\n    (qualifierName: string, value: string | undefined): Result<void> => {\n      let validatedQualifierName: QualifierName | undefined;\n      try {\n        // Validate qualifier name using proper ts-res validator\n        const qualifierNameResult = Validate.toQualifierName(qualifierName);\n        if (qualifierNameResult.isFailure()) {\n          const error = `Invalid qualifier name: ${qualifierNameResult.message}`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        validatedQualifierName = qualifierNameResult.value;\n\n        // Validate qualifier exists in system (if available)\n        if (processedResources?.system?.qualifiers) {\n          const availableQualifiers = Array.from(processedResources.system.qualifiers.keys());\n          if (!availableQualifiers.includes(validatedQualifierName)) {\n            const error = `Unknown qualifier '${qualifierName}'. Available qualifiers: ${availableQualifiers.join(\n              ', '\n            )}`;\n            onMessage?.('warning', error);\n            // Continue anyway for flexibility, but warn user\n          }\n        }\n\n        setPendingUserValues((prev) => ({\n          ...prev,\n          [validatedQualifierName as string]: value\n        }));\n\n        onMessage?.('info', `Updated context value: ${validatedQualifierName} = ${value ?? 'undefined'}`);\n        return succeed(undefined);\n      } catch (error) {\n        const errorMessage = `Failed to update context value '${validatedQualifierName ?? qualifierName}': ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [processedResources, onMessage]\n  );\n\n  // Apply context changes - applies pending user values and/or updates host values\n  const applyContext = useCallback(\n    (newHostManagedValues?: Record<string, string | undefined>): Result<void> => {\n      if (!processedResources) {\n        const error = 'No resources loaded - cannot apply context';\n        onMessage?.('error', error);\n        return fail(error);\n      }\n\n      try {\n        if (newHostManagedValues !== undefined) {\n          // When called with host values, ONLY update host values\n          o11y.diag.info('Applying host managed values:', newHostManagedValues);\n          setHostManagedValues(newHostManagedValues);\n          onMessage?.('success', 'Host-managed context values updated');\n          return succeed(undefined);\n        } else {\n          // When called without arguments (from Apply button), apply pending user values\n          o11y.diag.info('Applying pending user values:', pendingUserValues);\n          setAppliedUserValues(pendingUserValues);\n\n          // Create resolver with the new effective context\n          const newEffectiveContext = {\n            ...pendingUserValues,\n            ...hostManagedValues\n          };\n\n          // Create resolver with effective context\n          const resolverResult = createResolverWithContext(processedResources, newEffectiveContext, {\n            enableCaching: true,\n            enableDebugLogging: false\n          });\n\n          if (resolverResult.isFailure()) {\n            const error = `Failed to create resolver: ${resolverResult.message}`;\n            onMessage?.('error', error);\n            return fail(error);\n          }\n\n          setCurrentResolver(resolverResult.value);\n\n          // If a resource is selected, resolve it with the new context (skip pending resources)\n          if (selectedResourceId && !pendingResources.has(selectedResourceId)) {\n            const resolutionResult = resolveResourceDetailed(\n              resolverResult.value,\n              selectedResourceId,\n              processedResources\n            );\n\n            if (resolutionResult.isSuccess()) {\n              setResolutionResult(resolutionResult.value);\n            } else {\n              onMessage?.(\n                'warning',\n                `Failed to resolve selected resource after context change: ${resolutionResult.message}`\n              );\n              // Don't fail the context apply just because selected resource failed\n            }\n          } else if (selectedResourceId && pendingResources.has(selectedResourceId)) {\n            // Re-create the mock result for pending resource with new context\n            const pendingResource = pendingResources.get(selectedResourceId);\n            if (pendingResource) {\n              const mockResult: ResolutionResult = {\n                success: true,\n                resourceId: selectedResourceId,\n                composedValue: pendingResource.candidates?.[0]?.json || {},\n                candidateDetails: (pendingResource.candidates || []).map((c, index) => ({\n                  candidate: {\n                    json: c.json || {},\n                    conditions: c.conditions,\n                    isPartial: c.isPartial || false,\n                    mergeMethod: c.mergeMethod || 'replace'\n                  } as Runtime.IResourceCandidate,\n                  conditionSetKey: null,\n                  candidateIndex: index,\n                  matched: true,\n                  matchType: 'match' as const,\n                  isDefaultMatch: false\n                }))\n              };\n              setResolutionResult(mockResult);\n            }\n          }\n\n          onMessage?.('success', 'Context applied successfully');\n          return succeed(undefined);\n        }\n      } catch (error) {\n        const errorMessage = `Failed to apply context: ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [\n      processedResources,\n      pendingUserValues,\n      selectedResourceId,\n      onMessage,\n      hostManagedValues,\n      pendingResources\n    ]\n  );\n\n  // Select resource and resolve it\n  const selectResource = useCallback(\n    (resourceId: string): Result<void> => {\n      try {\n        // Validate resource ID using proper ts-res validator\n        const resourceIdResult = Validate.toResourceId(resourceId);\n        if (resourceIdResult.isFailure()) {\n          const error = `Invalid resource ID: ${resourceIdResult.message}`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        const validatedResourceId = resourceIdResult.value;\n\n        // Check if this is a pending new resource\n        const pendingResource = pendingResources.get(resourceId);\n        if (pendingResource) {\n          setSelectedResourceId(resourceId);\n          setResolutionResult(null);\n\n          // For pending new resources, create a mock resolution result\n          const mockResult: ResolutionResult = {\n            success: true,\n            resourceId,\n            composedValue: pendingResource.candidates?.[0]?.json || {},\n            candidateDetails: (pendingResource.candidates || []).map((c, index) => ({\n              candidate: {\n                json: c.json || {},\n                conditions: c.conditions,\n                isPartial: c.isPartial || false,\n                mergeMethod: c.mergeMethod || 'replace'\n              } as Runtime.IResourceCandidate,\n              conditionSetKey: null,\n              candidateIndex: index,\n              matched: true,\n              matchType: 'match' as const,\n              isDefaultMatch: false\n            }))\n          };\n          setResolutionResult(mockResult);\n          onMessage?.('info', `Selected pending resource: ${resourceId}`);\n          return succeed(undefined);\n        }\n\n        // Check if resource exists in the system before setting selection\n        if (!processedResources) {\n          const error = 'No resource system available for resource lookup';\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Check if resource exists in the system\n        const resourceExists = processedResources.summary.resourceIds.includes(resourceId);\n\n        if (!resourceExists) {\n          // Resource doesn't exist - create error result but still set selection for UI consistency\n          setSelectedResourceId(resourceId);\n          const errorResult: ResolutionResult = {\n            success: false,\n            resourceId,\n            error: `Failed to get resource: ${resourceId}: not found.`\n          };\n          setResolutionResult(errorResult);\n          const error = `Resource '${resourceId}' not found in the system`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Resource exists, proceed with selection and resolution\n        setSelectedResourceId(resourceId);\n        setResolutionResult(null);\n\n        // For existing resources, resolve normally\n        if (!currentResolver) {\n          const error = 'No resolver available for resource resolution';\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        return resolveResourceDetailed(currentResolver, validatedResourceId, processedResources)\n          .onSuccess((resolvedResult) => {\n            setResolutionResult(resolvedResult);\n            onMessage?.('info', `Selected resource: ${resourceId}`);\n            return succeed(undefined);\n          })\n          .onFailure((resolutionError) => {\n            // Create error result\n            const errorResult: ResolutionResult = {\n              success: false,\n              resourceId,\n              error: resolutionError\n            };\n            setResolutionResult(errorResult);\n            const error = `Failed to resolve resource '${resourceId}': ${resolutionError}`;\n            onMessage?.('error', error);\n            return fail(error);\n          });\n      } catch (error) {\n        const errorMessage = `Unexpected error selecting resource '${resourceId}': ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [currentResolver, processedResources, pendingResources, onMessage]\n  );\n\n  // Reset cache\n  const resetCache = useCallback((): Result<void> => {\n    if (!currentResolver) {\n      const error = 'No resolver available - cache cannot be cleared';\n      onMessage?.('warning', error);\n      return fail(error);\n    }\n\n    try {\n      currentResolver.clearConditionCache();\n      onMessage?.('info', 'Resolution cache cleared successfully');\n      return succeed(undefined);\n    } catch (error) {\n      const errorMessage = `Failed to clear cache: ${error instanceof Error ? error.message : String(error)}`;\n      onMessage?.('error', errorMessage);\n      return fail(errorMessage);\n    }\n  }, [currentResolver, onMessage]);\n\n  // Auto-apply when resources are loaded or host values change\n  React.useEffect(() => {\n    if (!processedResources) return;\n\n    o11y.diag.info('Auto-applying effective context:', effectiveContext);\n    o11y.diag.info('Host managed values in hook:', hostManagedValues);\n    o11y.diag.info('Applied user values in hook:', appliedUserValues);\n\n    // Create resolver with effective context whenever host values change\n    const resolverResult = createResolverWithContext(processedResources, effectiveContext, {\n      enableCaching: true,\n      enableDebugLogging: false\n    });\n\n    if (resolverResult.isSuccess()) {\n      setCurrentResolver(resolverResult.value);\n      o11y.diag.info('Resolver created successfully with context:', effectiveContext);\n\n      // Re-resolve selected resource if any (but skip pending resources)\n      if (selectedResourceId && !pendingResources.has(selectedResourceId)) {\n        o11y.diag.info('Re-resolving resource:', selectedResourceId);\n        const resolutionResult = resolveResourceDetailed(\n          resolverResult.value,\n          selectedResourceId,\n          processedResources\n        );\n\n        if (resolutionResult.isSuccess()) {\n          o11y.diag.info('Resolution successful for resource:', selectedResourceId);\n          setResolutionResult(resolutionResult.value);\n        } else {\n          o11y.diag.error('Resolution failed:', resolutionResult.message);\n        }\n      } else if (selectedResourceId && pendingResources.has(selectedResourceId)) {\n        // Keep the existing mock resolution result for pending resources\n        o11y.diag.info('Skipping resolution for pending resource:', selectedResourceId);\n      }\n    } else {\n      o11y.diag.error('Failed to create resolver with effective context:', resolverResult.message);\n    }\n  }, [\n    processedResources,\n    effectiveContext,\n    selectedResourceId,\n    hostManagedValues,\n    appliedUserValues,\n    pendingResources\n  ]);\n\n  // Edit management functions\n  const saveEdit = useCallback(\n    (resourceId: string, editedValue: JsonValue, originalValue?: JsonValue): Result<void> => {\n      try {\n        // Validate inputs using proper validators\n        const resourceIdResult = Validate.toResourceId(resourceId);\n        if (resourceIdResult.isFailure()) {\n          const error = `Invalid resource ID: ${resourceIdResult.message}`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Validate edited value is not null/undefined (JsonValue allows null, but we need a real value)\n        if (editedValue === null || editedValue === undefined) {\n          const error = 'Edited value cannot be null or undefined';\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Validate the edited value\n        const validation = validateEditedResource(editedValue);\n        if (!validation.isValid) {\n          const error = `Invalid edit: ${validation.errors.join(', ')}`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Show warnings if any\n        if (validation.warnings.length > 0) {\n          validation.warnings.forEach((warning) => onMessage?.('warning', warning));\n        }\n\n        // Check if this is a pending new resource\n        const pendingResource = pendingResources.get(resourceId);\n        if (pendingResource) {\n          // For pending resources, track the edit separately from the original template\n          const originalCandidate = pendingResource.candidates?.[0];\n          const originalValue = originalCandidate?.json || {};\n\n          // Store the edit in pending resource edits\n          setPendingResourceEdits((prev) => {\n            const newMap = new Map(prev);\n            newMap.set(resourceId, {\n              originalValue,\n              editedValue\n            });\n            return newMap;\n          });\n\n          // Update the resolution result to reflect the new value\n          if (selectedResourceId === resourceId) {\n            const mockResult: ResolutionResult = {\n              success: true,\n              resourceId,\n              composedValue: isJsonObject(editedValue) ? editedValue : { value: editedValue },\n              candidateDetails: [\n                {\n                  candidate: {\n                    json: (isJsonObject(editedValue)\n                      ? editedValue\n                      : { value: editedValue }) as ResourceJsonObject,\n                    conditions: originalCandidate?.conditions,\n                    isPartial: false,\n                    mergeMethod: 'replace'\n                  } as Runtime.IResourceCandidate,\n                  conditionSetKey: null,\n                  candidateIndex: 0,\n                  matched: true,\n                  matchType: 'match' as const,\n                  isDefaultMatch: false\n                }\n              ]\n            };\n            setResolutionResult(mockResult);\n          }\n\n          onMessage?.('info', `Edit saved for pending resource: ${resourceId}`);\n          return succeed(undefined);\n        }\n\n        // Check if resource exists (for existing resources)\n        if (!processedResources?.summary.resourceIds.includes(resourceId)) {\n          const error = `Resource '${resourceId}' not found in the system`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // For existing resources, compute the delta and save as edit\n        const resolvedValue = originalValue || editedValue; // Use originalValue as the resolved/baseline\n        const deltaResult = computeResourceDelta(undefined, resolvedValue, editedValue);\n\n        if (deltaResult.isFailure()) {\n          onMessage?.('warning', `Could not compute delta, saving full value: ${deltaResult.message}`);\n        }\n\n        const delta = deltaResult.isSuccess() ? deltaResult.value : null;\n\n        // Save the edit with original, edited, and delta\n        setEditedResourcesInternal((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(resourceId, {\n            originalValue: resolvedValue,\n            editedValue,\n            delta\n          });\n          return newMap;\n        });\n\n        // Log info about delta\n        if (delta !== null && delta !== editedValue) {\n          const deltaSize = JSON.stringify(delta).length;\n          const fullSize = JSON.stringify(editedValue).length;\n          const reduction = Math.round((1 - deltaSize / fullSize) * 100);\n          onMessage?.('info', `Edit saved for ${resourceId} (delta: ${reduction}% smaller)`);\n        } else {\n          onMessage?.('info', `Edit saved for resource ${resourceId}`);\n        }\n\n        return succeed(undefined);\n      } catch (error) {\n        const errorMessage = `Failed to save edit: ${error instanceof Error ? error.message : String(error)}`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [onMessage, pendingResources, selectedResourceId, effectiveContext, processedResources]\n  );\n\n  const getEditedValue = useCallback(\n    (resourceId: string) => {\n      // Check pending resource edits first\n      const pendingEdit = pendingResourceEdits.get(resourceId);\n      if (pendingEdit) {\n        return pendingEdit.editedValue;\n      }\n\n      // Check existing resource edits\n      const existingEdit = editedResourcesInternal.get(resourceId);\n      if (existingEdit) {\n        return existingEdit.editedValue;\n      }\n\n      // Fall back to original pending resource value if no edits\n      const pendingResource = pendingResources.get(resourceId);\n      if (pendingResource) {\n        return pendingResource.candidates?.[0]?.json;\n      }\n\n      return undefined;\n    },\n    [pendingResourceEdits, editedResourcesInternal, pendingResources]\n  );\n\n  const hasEdit = useCallback(\n    (resourceId: string) => {\n      // Check if there are pending resource edits\n      if (pendingResourceEdits.has(resourceId)) {\n        return true;\n      }\n\n      // Check if there are existing resource edits\n      if (editedResourcesInternal.has(resourceId)) {\n        return true;\n      }\n\n      // No edits found\n      return false;\n    },\n    [pendingResourceEdits, editedResourcesInternal]\n  );\n\n  const clearEdits = useCallback((): Result<{ clearedCount: number }> => {\n    try {\n      const existingResourceEditCount = editedResourcesInternal.size;\n      const pendingResourceEditCount = pendingResourceEdits.size;\n      const totalCount = existingResourceEditCount + pendingResourceEditCount;\n\n      // Clear both types of edits\n      setEditedResourcesInternal(new Map());\n      setPendingResourceEdits(new Map());\n\n      const message =\n        totalCount > 0\n          ? `Cleared ${totalCount} pending edit${\n              totalCount === 1 ? '' : 's'\n            } (${existingResourceEditCount} existing resource${\n              existingResourceEditCount === 1 ? '' : 's'\n            }, ${pendingResourceEditCount} pending resource${pendingResourceEditCount === 1 ? '' : 's'})`\n          : 'No pending edits to clear';\n\n      onMessage?.('info', message);\n      return succeed({ clearedCount: totalCount });\n    } catch (error) {\n      const errorMessage = `Failed to clear edits: ${error instanceof Error ? error.message : String(error)}`;\n      onMessage?.('error', errorMessage);\n      return fail(errorMessage);\n    }\n  }, [editedResourcesInternal, pendingResourceEdits, onMessage]);\n\n  const discardEdits = useCallback((): Result<{ discardedCount: number }> => {\n    try {\n      const existingResourceEditCount = editedResourcesInternal.size;\n      const pendingResourceEditCount = pendingResourceEdits.size;\n      const totalCount = existingResourceEditCount + pendingResourceEditCount;\n\n      if (!hasUnsavedEdits || totalCount === 0) {\n        onMessage?.('info', 'No unsaved edits to discard');\n        return succeed({ discardedCount: 0 });\n      }\n\n      // Clear both types of edits\n      setEditedResourcesInternal(new Map());\n      setPendingResourceEdits(new Map());\n\n      const message = `Discarded ${totalCount} unsaved edit${\n        totalCount === 1 ? '' : 's'\n      } (${existingResourceEditCount} existing resource${\n        existingResourceEditCount === 1 ? '' : 's'\n      }, ${pendingResourceEditCount} pending resource${pendingResourceEditCount === 1 ? '' : 's'})`;\n      onMessage?.('info', message);\n      return succeed({ discardedCount: totalCount });\n    } catch (error) {\n      const errorMessage = `Failed to discard edits: ${\n        error instanceof Error ? error.message : String(error)\n      }`;\n      onMessage?.('error', errorMessage);\n      return fail(errorMessage);\n    }\n  }, [editedResourcesInternal, pendingResourceEdits, hasUnsavedEdits, onMessage]);\n\n  // Removed applyEdits in favor of unified applyPendingResources\n\n  // Atomic resource creation API\n  const createPendingResource = useCallback(\n    (params: CreatePendingResourceParams): Result<void> => {\n      try {\n        if (!processedResources) {\n          return fail('No resource system available');\n        }\n\n        // Validate resource ID format first (catches empty, null, and invalid formats)\n        const resourceIdResult = Validate.toResourceId(params.id);\n        if (resourceIdResult.isFailure()) {\n          return fail(`Invalid resource ID format '${params.id}': ${resourceIdResult.message}`);\n        }\n\n        const validatedResourceId = resourceIdResult.value;\n\n        // Prevent temporary IDs from being persisted\n        if (params.id.startsWith('new-resource-')) {\n          return fail(\n            `Cannot save resource with temporary ID '${params.id}'. Please provide a final resource ID.`\n          );\n        }\n\n        // Validate resource ID uniqueness\n        if (isResourceIdTaken(params.id, processedResources, pendingResources)) {\n          return fail(`Resource ID '${params.id}' already exists. Resource IDs must be unique.`);\n        }\n\n        // Validate resource type exists\n        const resourceTypeResult = findResourceType(\n          params.resourceTypeName,\n          availableResourceTypes,\n          onMessage\n        );\n        if (resourceTypeResult.isFailure()) {\n          return fail(resourceTypeResult.message);\n        }\n        const resourceType = resourceTypeResult.value;\n\n        // Create conditions from current effective context\n        const contextConditionsResult = createContextConditions(\n          effectiveContext,\n          processedResources?.system.qualifiers,\n          onMessage\n        );\n        if (contextConditionsResult.isFailure()) {\n          return fail(contextConditionsResult.message);\n        }\n        const contextConditions = contextConditionsResult.value;\n\n        // Prepare initial JSON value - if no json provided, let resource type use its base template\n        const initialJson =\n          params.json !== undefined\n            ? isJsonObject(params.json)\n              ? params.json\n              : { value: params.json }\n            : undefined;\n\n        // Create resource template using the new API with conditions and resolver\n        // Pass undefined initialJson to allow resource type to provide base template\n        const templateResult = resourceType.createTemplate(\n          validatedResourceId,\n          initialJson,\n          contextConditions.length > 0 ? contextConditions : undefined,\n          processedResources?.resolver\n        );\n        if (templateResult.isFailure()) {\n          return fail(templateResult.message);\n        }\n        const looseResourceDecl = templateResult.value;\n\n        // Add to pending resources\n        setPendingResources((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(params.id, looseResourceDecl);\n          return newMap;\n        });\n\n        onMessage?.('success', `Resource '${params.id}' created and added to pending resources`);\n        return succeed(undefined);\n      } catch (error) {\n        const errorMessage = `Failed to create pending resource: ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [processedResources, pendingResources, availableResourceTypes, effectiveContext, onMessage]\n  );\n\n  // Resource creation actions (enhanced with Result pattern return values)\n  const startNewResource = useCallback(\n    (\n      params?: StartNewResourceParams\n    ): Result<{ draft: ResolutionState['newResourceDraft']; diagnostics: string[] }> => {\n      try {\n        // Determine resource type to use\n        let targetTypeName = params?.resourceTypeName || params?.defaultTypeName;\n        const targetType = targetTypeName\n          ? availableResourceTypes.find((t) => t.key === targetTypeName) || availableResourceTypes[0]\n          : availableResourceTypes[0];\n\n        if (!targetType) {\n          const error = 'No resource types available for resource creation';\n          onMessage?.('error', error);\n          const diagnostics = `Available types: ${availableResourceTypes.map((t) => t.key).join(', ')}`;\n          return fail(`${error}\\n${diagnostics}`);\n        }\n\n        // Determine resource ID (pre-seeded or generate temporary)\n        const resourceId = params?.id || `new-resource-${Date.now()}`;\n\n        // If pre-seeded with an ID, validate it\n        if (params?.id) {\n          if (isResourceIdTaken(params.id, processedResources, pendingResources)) {\n            const error = `Resource ID '${params.id}' already exists. Resource IDs must be unique.`;\n            onMessage?.('error', error);\n            return fail(`${error}\\nUse a different resource ID or let the system generate a temporary one`);\n          }\n        }\n\n        // Stamp conditions from current effective context at creation time\n        const contextConditionsResult = createContextConditions(\n          effectiveContext,\n          processedResources?.system.qualifiers,\n          onMessage\n        );\n        if (contextConditionsResult.isFailure()) {\n          return fail(contextConditionsResult.message);\n        }\n        const contextConditions = contextConditionsResult.value;\n\n        // Prepare initial JSON value if provided\n        const initialJson =\n          params?.json !== undefined\n            ? isJsonObject(params.json)\n              ? params.json\n              : { value: params.json }\n            : undefined;\n\n        // Create template using new API with context conditions and resolver\n        // For pre-seeded IDs, use the validated one; for temporary IDs, convert to ResourceId\n        const templateResourceId = Validate.isValidResourceId(resourceId)\n          ? resourceId // Type guard ensures this is ResourceId\n          : Validate.toResourceId(resourceId).orDefault(resourceId as any); // Fallback for temporary IDs\n\n        const templateResult = targetType.createTemplate(\n          templateResourceId,\n          initialJson,\n          contextConditions.length > 0 ? contextConditions : undefined,\n          processedResources?.resolver\n        );\n        if (templateResult.isFailure()) {\n          return fail(templateResult.message);\n        }\n        const template = templateResult.value;\n\n        const draft = {\n          resourceId,\n          resourceType: targetType.key,\n          template,\n          isValid: !resourceId.startsWith('new-resource-') && Validate.isValidResourceId(resourceId)\n        };\n\n        setNewResourceDraft(draft);\n\n        const diagnostics = [];\n        if (params?.id) diagnostics.push(`Pre-seeded with resource ID '${params.id}'`);\n        if (params?.resourceTypeName)\n          diagnostics.push(`Pre-seeded with resource type '${params.resourceTypeName}'`);\n        if (params?.json) diagnostics.push('Pre-seeded with JSON content');\n        if (contextConditions.length > 0)\n          diagnostics.push(`Stamped with ${contextConditions.length} context conditions`);\n\n        onMessage?.('info', `Started new ${targetType.key} resource: ${resourceId}`);\n        return succeed({ draft, diagnostics });\n      } catch (error) {\n        const errorMessage = `Failed to start new resource: ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [availableResourceTypes, onMessage, effectiveContext, processedResources, pendingResources]\n  );\n\n  const updateNewResourceId = useCallback(\n    (id: string): Result<{ draft: ResolutionState['newResourceDraft']; diagnostics: string[] }> => {\n      try {\n        if (!newResourceDraft) {\n          const error = 'No resource draft in progress. Call startNewResource first.';\n          onMessage?.('error', error);\n          return fail(`${error}\\nUse startNewResource() to begin creating a new resource`);\n        }\n\n        // Validate ID format\n        if (!Validate.isValidResourceId(id)) {\n          const error = `Invalid resource ID '${id}'. Resource IDs must be dot-separated identifiers and cannot be empty.`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Check if ID already exists\n        const diagnostics = [];\n        let isValid = true;\n        let validationError: string | undefined;\n\n        if (isResourceIdTaken(id, processedResources, pendingResources)) {\n          isValid = false;\n          validationError = `Resource ID '${id}' already exists. Resource IDs must be unique.`;\n          diagnostics.push('ID uniqueness validation failed');\n        } else if (id.startsWith('new-resource-')) {\n          isValid = false;\n          validationError = `Resource ID '${id}' appears to be a temporary ID. Please provide a final resource ID.`;\n        } else if (!Validate.isValidResourceId(id)) {\n          isValid = false;\n          validationError = `Resource ID '${id}' has invalid format. Resource IDs must be dot-separated identifiers.`;\n          diagnostics.push('Temporary ID detected - not suitable for saving');\n        } else {\n          diagnostics.push('ID validation passed');\n        }\n\n        const updatedDraft = {\n          ...newResourceDraft,\n          resourceId: id,\n          template: {\n            ...newResourceDraft.template,\n            id\n          },\n          isValid\n        };\n\n        setNewResourceDraft(updatedDraft);\n\n        if (validationError) {\n          onMessage?.('warning', validationError);\n          return fail(`${validationError}\\n${diagnostics.join('\\n')}`);\n        } else {\n          onMessage?.('info', `Updated resource ID to: ${id}`);\n          return succeed({ draft: updatedDraft, diagnostics });\n        }\n      } catch (error) {\n        const errorMessage = `Failed to update resource ID: ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [newResourceDraft, processedResources, pendingResources, onMessage]\n  );\n\n  const selectResourceType = useCallback(\n    (typeName: string): Result<{ draft: ResolutionState['newResourceDraft']; diagnostics: string[] }> => {\n      try {\n        if (!newResourceDraft) {\n          const error = 'No resource draft in progress. Call startNewResource first.';\n          onMessage?.('error', error);\n          return fail(`${error}\\nUse startNewResource() to begin creating a new resource`);\n        }\n\n        const typeResult = findResourceType(typeName, availableResourceTypes, onMessage);\n        if (typeResult.isFailure()) {\n          return fail(typeResult.message);\n        }\n        const type = typeResult.value;\n\n        // Extract existing JSON content and conditions from current template\n        const existingCandidate = newResourceDraft.template.candidates?.[0];\n        const existingJson = existingCandidate?.json;\n        const existingConditions = existingCandidate?.conditions;\n\n        // Create template with new API, preserving existing content and conditions\n        // Validate the resource ID or use as-is for temporary IDs\n        const templateResourceId = Validate.isValidResourceId(newResourceDraft.resourceId)\n          ? newResourceDraft.resourceId // Type guard ensures this is ResourceId\n          : Validate.toResourceId(newResourceDraft.resourceId).orDefault(newResourceDraft.resourceId as any);\n\n        const templateResult = type.createTemplate(\n          templateResourceId,\n          existingJson,\n          existingConditions,\n          processedResources?.resolver\n        );\n        if (templateResult.isFailure()) {\n          return fail(templateResult.message);\n        }\n\n        const updatedDraft = {\n          ...newResourceDraft,\n          resourceType: typeName,\n          template: templateResult.value\n        };\n\n        setNewResourceDraft(updatedDraft);\n        onMessage?.('info', `Selected resource type: ${typeName}`);\n\n        return succeed({\n          draft: updatedDraft,\n          diagnostics: [`Created ${typeName} template for resource ${newResourceDraft.resourceId}`]\n        });\n      } catch (error) {\n        const errorMessage = `Failed to select resource type: ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [newResourceDraft, availableResourceTypes, onMessage]\n  );\n\n  // New public updateNewResourceJson action\n  const updateNewResourceJson = useCallback(\n    (json: JsonValue): Result<{ draft: ResolutionState['newResourceDraft']; diagnostics: string[] }> => {\n      try {\n        if (!newResourceDraft) {\n          const error = 'No resource draft in progress. Call startNewResource first.';\n          onMessage?.('error', error);\n          return fail(`${error}\\nUse startNewResource() to begin creating a new resource`);\n        }\n\n        // Validate JSON content using proper validation\n        if (json === undefined || json === null) {\n          const error = 'JSON content cannot be null or undefined';\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Validate that the JSON content is a valid structure\n        try {\n          // Ensure the JSON can be serialized and is valid\n          JSON.stringify(json);\n        } catch (jsonError) {\n          const error = `Invalid JSON content: ${\n            jsonError instanceof Error ? jsonError.message : String(jsonError)\n          }`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Update the template with new JSON content\n        const updatedTemplate = {\n          ...newResourceDraft.template,\n          candidates: [\n            {\n              json: (isJsonObject(json) ? json : { value: json }) as ResourceJsonObject,\n              // Preserve existing conditions if any\n              conditions: newResourceDraft.template.candidates?.[0]?.conditions,\n              isPartial: false,\n              mergeMethod: 'replace' as const\n            }\n          ]\n        };\n\n        const updatedDraft = {\n          ...newResourceDraft,\n          template: updatedTemplate\n        };\n\n        setNewResourceDraft(updatedDraft);\n        onMessage?.('info', `Updated JSON content for resource ${newResourceDraft.resourceId}`);\n\n        return succeed({\n          draft: updatedDraft,\n          diagnostics: ['JSON content updated successfully', 'Resource is ready for saving as pending']\n        });\n      } catch (error) {\n        const errorMessage = `Failed to update resource JSON: ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [newResourceDraft, onMessage]\n  );\n\n  const saveNewResourceAsPending = useCallback((): Result<{\n    pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>;\n    diagnostics: string[];\n  }> => {\n    try {\n      // Enhanced validation with specific error messages\n      if (!newResourceDraft) {\n        const error = 'No resource draft in progress. Call startNewResource first.';\n        onMessage?.('error', error);\n        return fail(`${error}\\nUse startNewResource() to begin creating a new resource`);\n      }\n\n      if (!newResourceDraft.isValid) {\n        const errors = [];\n        if (newResourceDraft.resourceId.startsWith('new-resource-')) {\n          errors.push('Resource ID is temporary - please set a final resource ID');\n        } else if (!Validate.isValidResourceId(newResourceDraft.resourceId)) {\n          errors.push('Resource ID has invalid format - must be dot-separated identifiers');\n        }\n        if (!newResourceDraft.resourceType) {\n          errors.push('Resource type is not selected');\n        }\n        if (!newResourceDraft.template.candidates || newResourceDraft.template.candidates.length === 0) {\n          errors.push('Resource template has no candidates');\n        }\n\n        const error = `Cannot save resource with validation errors: ${errors.join(', ')}`;\n        onMessage?.('error', error);\n        return fail(`${error}\\n${errors.join('\\n')}`);\n      }\n\n      // Prevent temporary IDs from being persisted (additional safety check)\n      if (\n        newResourceDraft.resourceId.startsWith('new-resource-') ||\n        !Validate.isValidResourceId(newResourceDraft.resourceId)\n      ) {\n        const error = newResourceDraft.resourceId.startsWith('new-resource-')\n          ? `Cannot save resource with temporary ID '${newResourceDraft.resourceId}'. Please set a final resource ID first.`\n          : `Cannot save resource with invalid ID '${newResourceDraft.resourceId}'. Resource IDs must be dot-separated identifiers.`;\n        onMessage?.('error', error);\n        return fail(`${error}\\nUse updateNewResourceId() to set a final resource ID before saving`);\n      }\n\n      // Check resource type exists\n      if (!newResourceDraft.resourceType) {\n        const error = `Resource type is required`;\n        onMessage?.('error', error);\n        return fail(error);\n      }\n\n      const resourceTypeResult = findResourceType(\n        newResourceDraft.resourceType,\n        availableResourceTypes,\n        onMessage\n      );\n      if (resourceTypeResult.isFailure()) {\n        return fail(resourceTypeResult.message);\n      }\n\n      // Check candidates exist\n      if (!newResourceDraft.template.candidates || newResourceDraft.template.candidates.length === 0) {\n        const error = 'Resource template must have at least one candidate';\n        onMessage?.('error', error);\n        return fail(`${error}\\nUse updateNewResourceJson() to add JSON content to the resource`);\n      }\n\n      let updatedPendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>;\n\n      setPendingResources((prev) => {\n        const newMap = new Map(prev);\n        // Stamp conditions from current effective context onto all candidates for the new resource\n        const contextConditionsResult = createContextConditions(\n          effectiveContext,\n          processedResources?.system.qualifiers,\n          onMessage\n        );\n        if (contextConditionsResult.isFailure()) {\n          o11y.diag.warn(`Failed to create context conditions: ${contextConditionsResult.message}`);\n          return prev; // Return previous state if validation fails\n        }\n        const contextConditions = contextConditionsResult.value;\n\n        const stampedTemplate: ResourceJson.Json.ILooseResourceDecl = {\n          ...newResourceDraft.template,\n          candidates: (newResourceDraft.template.candidates || []).map((c) => ({\n            ...c,\n            conditions: contextConditions.length > 0 ? contextConditions : c.conditions\n          }))\n        };\n\n        newMap.set(newResourceDraft.resourceId, stampedTemplate);\n        updatedPendingResources = newMap;\n        return newMap;\n      });\n\n      setNewResourceDraft(undefined);\n\n      const diagnostics = [];\n      if (effectiveContext && Object.keys(effectiveContext).length > 0) {\n        const contextKeys = Object.keys(effectiveContext).filter((k) => effectiveContext[k] !== undefined);\n        if (contextKeys.length > 0) {\n          diagnostics.push(`Stamped with context: ${contextKeys.join(', ')}`);\n        }\n      }\n      diagnostics.push('Resource draft cleared');\n\n      onMessage?.('success', `Resource '${newResourceDraft.resourceId}' added to pending resources`);\n\n      return succeed({\n        pendingResources: updatedPendingResources!,\n        diagnostics\n      });\n    } catch (error) {\n      const errorMessage = `Failed to save resource as pending: ${\n        error instanceof Error ? error.message : String(error)\n      }`;\n      onMessage?.('error', errorMessage);\n      return fail(errorMessage);\n    }\n  }, [newResourceDraft, onMessage, effectiveContext, availableResourceTypes]);\n\n  const cancelNewResource = useCallback(() => {\n    setNewResourceDraft(undefined);\n  }, []);\n\n  const removePendingResource = useCallback(\n    (resourceId: string): Result<void> => {\n      try {\n        // Validate resource ID using proper ts-res validator\n        const resourceIdResult = Validate.toResourceId(resourceId);\n        if (resourceIdResult.isFailure()) {\n          const error = `Invalid resource ID: ${resourceIdResult.message}`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n\n        // Check if the pending resource exists\n        if (!pendingResources.has(resourceId)) {\n          const error = `Pending resource '${resourceId}' not found`;\n          onMessage?.('warning', error);\n          return fail(error);\n        }\n\n        // Remove the pending resource\n        setPendingResources((prev) => {\n          const newMap = new Map(prev);\n          newMap.delete(resourceId);\n          return newMap;\n        });\n\n        // Also remove any edits for this pending resource\n        setPendingResourceEdits((prev) => {\n          const newMap = new Map(prev);\n          newMap.delete(resourceId);\n          return newMap;\n        });\n\n        // Clear selection if this resource was selected\n        if (selectedResourceId === resourceId) {\n          setSelectedResourceId(null);\n          setResolutionResult(null);\n        }\n\n        onMessage?.('info', `Removed pending resource: ${resourceId}`);\n        return succeed(undefined);\n      } catch (error) {\n        const errorMessage = `Failed to remove pending resource '${resourceId}': ${\n          error instanceof Error ? error.message : String(error)\n        }`;\n        onMessage?.('error', errorMessage);\n        return fail(errorMessage);\n      }\n    },\n    [pendingResources, selectedResourceId, onMessage]\n  );\n\n  const markResourceForDeletion = useCallback(\n    (resourceId: string) => {\n      setPendingResourceDeletions((prev) => {\n        const newSet = new Set(prev);\n        newSet.add(resourceId);\n        return newSet;\n      });\n      onMessage?.('info', `Marked resource ${resourceId} for deletion`);\n    },\n    [onMessage]\n  );\n\n  const applyPendingResources = useCallback(async (): Promise<\n    Result<{\n      appliedCount: number;\n      existingResourceEditCount: number;\n      pendingResourceEditCount: number;\n      newResourceCount: number;\n      deletionCount: number;\n    }>\n  > => {\n    const hasAnyChanges =\n      editedResourcesInternal.size > 0 ||\n      pendingResourceEdits.size > 0 ||\n      pendingResources.size > 0 ||\n      pendingResourceDeletions.size > 0;\n\n    if (!hasAnyChanges) {\n      const error = 'No pending changes to apply';\n      onMessage?.('warning', error);\n      return fail(error);\n    }\n\n    if (!processedResources) {\n      const error = 'No resource system available';\n      onMessage?.('error', error);\n      return fail(error);\n    }\n\n    if (!onSystemUpdate) {\n      const error = 'No system update handler provided';\n      onMessage?.('error', error);\n      return fail(error);\n    }\n\n    try {\n      setIsApplyingEdits(true);\n      // Extract current resolution context (filter out undefined values)\n      const cleanedContextValues: Record<string, string> = {};\n      Object.entries(effectiveContext).forEach(([key, value]) => {\n        if (value !== undefined) {\n          cleanedContextValues[key] = value as string;\n        }\n      });\n\n      // Ensure we have a resolver instance to extract context\n      let resolverForContext = currentResolver;\n      if (!resolverForContext) {\n        const resolverCreateResult = Runtime.ResourceResolver.create({\n          resourceManager: processedResources.system.resourceManager,\n          qualifierTypes: processedResources.system.qualifierTypes,\n          contextQualifierProvider: processedResources.system.contextQualifierProvider\n        });\n        if (resolverCreateResult.isFailure()) {\n          const error = `Failed to create resolver: ${resolverCreateResult.message}`;\n          onMessage?.('error', error);\n          return fail(error);\n        }\n        resolverForContext = resolverCreateResult.value;\n      }\n\n      const currentContext = extractResolutionContext(resolverForContext, cleanedContextValues);\n\n      // Convert pending new resources (map → array) and apply any edits to them\n      const newResourcesArray: ResourceJson.Json.ILooseResourceDecl[] = [];\n      for (const [resourceId, resource] of pendingResources.entries()) {\n        const pendingEdit = pendingResourceEdits.get(resourceId);\n        if (pendingEdit) {\n          // Apply the edit to the pending resource\n          const updatedResource = {\n            ...resource,\n            candidates: [\n              {\n                json: (isJsonObject(pendingEdit.editedValue)\n                  ? pendingEdit.editedValue\n                  : { value: pendingEdit.editedValue }) as ResourceJsonObject,\n                conditions: resource.candidates?.[0]?.conditions,\n                isPartial: false,\n                mergeMethod: 'replace' as const\n              }\n            ]\n          };\n          newResourcesArray.push(updatedResource);\n        } else {\n          newResourcesArray.push(resource);\n        }\n      }\n\n      // Rebuild system with both edits and new resources in one pass\n      const rebuildResult = await rebuildSystemWithChanges(\n        processedResources.system,\n        {\n          editedResources: editedResourcesInternal,\n          newResources: newResourcesArray\n        },\n        currentContext\n      );\n\n      if (rebuildResult.isFailure()) {\n        const error = `Failed to apply changes: ${rebuildResult.message}`;\n        onMessage?.('error', error);\n        return fail(error);\n      }\n\n      // Capture counts before clearing the state\n      const existingResourceEditCount = editedResourcesInternal.size;\n      const pendingResourceEditCount = pendingResourceEdits.size;\n      const newResourceCount = newResourcesArray.length;\n      const deletionCount = pendingResourceDeletions.size;\n      const appliedCount =\n        existingResourceEditCount + pendingResourceEditCount + newResourceCount + deletionCount;\n\n      onSystemUpdate(rebuildResult.value);\n\n      onMessage?.(\n        'success',\n        `Applied ${existingResourceEditCount} existing resource edits, ${pendingResourceEditCount} pending resource edits, ${newResourceCount} additions, and ${deletionCount} deletions`\n      );\n\n      // Clear pending additions and edits after successful application\n      setPendingResources(new Map());\n      setPendingResourceEdits(new Map());\n      setPendingResourceDeletions(new Set());\n      setEditedResourcesInternal(new Map());\n\n      return succeed({\n        appliedCount,\n        existingResourceEditCount,\n        pendingResourceEditCount,\n        newResourceCount,\n        deletionCount\n      });\n    } catch (error) {\n      const errorMessage = `Failed to apply pending resources: ${\n        error instanceof Error ? error.message : String(error)\n      }`;\n      onMessage?.('error', errorMessage);\n      return fail(errorMessage);\n    } finally {\n      setIsApplyingEdits(false);\n    }\n  }, [\n    pendingResources,\n    pendingResourceEdits,\n    pendingResourceDeletions,\n    processedResources,\n    onSystemUpdate,\n    onMessage,\n    effectiveContext,\n    currentResolver,\n    editedResourcesInternal\n  ]);\n\n  const discardPendingResources = useCallback(() => {\n    if (hasPendingResourceChanges || pendingResourceEdits.size > 0) {\n      setPendingResources(new Map());\n      setPendingResourceEdits(new Map());\n      setPendingResourceDeletions(new Set());\n      onMessage?.('info', 'Discarded all pending resource changes and edits');\n    }\n  }, [hasPendingResourceChanges, pendingResourceEdits, onMessage]);\n\n  const state: ResolutionState = {\n    contextValues: effectiveContext, // Effective context (user + host)\n    pendingContextValues: pendingUserValues, // Only user's pending values\n    selectedResourceId,\n    currentResolver,\n    resolutionResult,\n    viewMode,\n    hasPendingChanges,\n    // Edit state\n    editedResources,\n    hasUnsavedEdits,\n    isApplyingEdits,\n    // Pending resource state\n    pendingResources,\n    pendingResourceDeletions,\n    newResourceDraft,\n    availableResourceTypes,\n    hasPendingResourceChanges\n  };\n\n  const actions: ResolutionActions = useMemo(\n    () => ({\n      updateContextValue,\n      applyContext,\n      selectResource,\n      setViewMode,\n      resetCache,\n      // Edit actions\n      saveEdit,\n      getEditedValue,\n      hasEdit,\n      clearEdits,\n      discardEdits,\n      // Enhanced resource creation actions\n      createPendingResource,\n      startNewResource,\n      updateNewResourceId,\n      selectResourceType,\n      updateNewResourceJson,\n      saveNewResourceAsPending,\n      cancelNewResource,\n      removePendingResource,\n      markResourceForDeletion,\n      applyPendingResources,\n      discardPendingResources\n    }),\n    [\n      updateContextValue,\n      applyContext,\n      selectResource,\n      setViewMode,\n      resetCache,\n      saveEdit,\n      getEditedValue,\n      hasEdit,\n      clearEdits,\n      discardEdits,\n      createPendingResource,\n      startNewResource,\n      updateNewResourceId,\n      selectResourceType,\n      updateNewResourceJson,\n      saveNewResourceAsPending,\n      cancelNewResource,\n      removePendingResource,\n      markResourceForDeletion,\n      applyPendingResources,\n      discardPendingResources\n    ]\n  );\n\n  return {\n    state,\n    actions,\n    availableQualifiers\n  };\n}\n"]}