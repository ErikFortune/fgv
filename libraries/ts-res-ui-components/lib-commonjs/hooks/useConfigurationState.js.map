{"version":3,"file":"useConfigurationState.js","sourceRoot":"","sources":["../../src/hooks/useConfigurationState.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo, useRef } from 'react';\nimport { Config, QualifierTypes, Qualifiers, ResourceTypes } from '@fgv/ts-res';\nimport { Result, succeed, fail } from '@fgv/ts-utils';\nimport {\n  getDefaultConfiguration,\n  validateConfiguration,\n  cloneConfiguration,\n  compareConfigurations,\n  trackConfigurationChanges,\n  exportConfiguration,\n  importConfiguration,\n  getConfigurationTemplates,\n  ConfigurationChanges,\n  ConfigurationValidationResult,\n  ConfigurationExportOptions,\n  ConfigurationTemplate\n} from '../utils/configurationUtils';\n\nexport interface ConfigurationState {\n  currentConfiguration: Config.Model.ISystemConfiguration;\n  originalConfiguration: Config.Model.ISystemConfiguration;\n  hasUnsavedChanges: boolean;\n  changes: ConfigurationChanges;\n  validation: ConfigurationValidationResult;\n  activeTab: 'qualifierTypes' | 'qualifiers' | 'resourceTypes' | 'json';\n  isJsonView: boolean;\n  jsonString: string;\n  jsonError: string | null;\n}\n\nexport interface ConfigurationActions {\n  // Configuration management\n  loadConfiguration: (config: Config.Model.ISystemConfiguration) => void;\n  resetConfiguration: () => void;\n  applyConfiguration: () => void;\n\n  // Editing operations\n  updateQualifierTypes: (qualifierTypes: QualifierTypes.Config.IAnyQualifierTypeConfig[]) => void;\n  updateQualifiers: (qualifiers: Qualifiers.IQualifierDecl[]) => void;\n  updateResourceTypes: (resourceTypes: ResourceTypes.Config.IResourceTypeConfig[]) => void;\n\n  // Individual item operations\n  addQualifierType: (qualifierType: QualifierTypes.Config.IAnyQualifierTypeConfig) => void;\n  updateQualifierType: (index: number, qualifierType: QualifierTypes.Config.IAnyQualifierTypeConfig) => void;\n  removeQualifierType: (index: number) => void;\n\n  addQualifier: (qualifier: Qualifiers.IQualifierDecl) => void;\n  updateQualifier: (index: number, qualifier: Qualifiers.IQualifierDecl) => void;\n  removeQualifier: (index: number) => void;\n\n  addResourceType: (resourceType: ResourceTypes.Config.IResourceTypeConfig) => void;\n  updateResourceType: (index: number, resourceType: ResourceTypes.Config.IResourceTypeConfig) => void;\n  removeResourceType: (index: number) => void;\n\n  // View management\n  setActiveTab: (tab: ConfigurationState['activeTab']) => void;\n  toggleJsonView: () => void;\n  updateJsonString: (json: string) => void;\n  applyJsonChanges: () => Result<void>;\n\n  // Import/Export\n  exportToJson: (options?: ConfigurationExportOptions) => Result<string>;\n  importFromJson: (jsonData: string) => Result<void>;\n  loadTemplate: (templateId: string) => Result<void>;\n\n  // Validation\n  validateCurrent: () => ConfigurationValidationResult;\n}\n\nexport interface UseConfigurationStateReturn {\n  state: ConfigurationState;\n  actions: ConfigurationActions;\n  templates: ConfigurationTemplate[];\n}\n\n/**\n * Hook for managing system configuration state including qualifiers, qualifier types, and resource types.\n *\n * Provides comprehensive configuration management with validation, change tracking, and import/export capabilities.\n * Supports both visual editing and JSON editing modes with real-time validation.\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { state, actions } = useConfigurationState();\n *\n * // Check for unsaved changes\n * if (state.hasUnsavedChanges) {\n *   console.log('Configuration has been modified');\n * }\n *\n * // Add a new qualifier\n * actions.addQualifier({\n *   name: 'language',\n *   typeName: 'language',\n *   defaultPriority: 100\n * });\n * ```\n *\n * @example\n * With change notifications:\n * ```typescript\n * const { state, actions } = useConfigurationState(\n *   undefined,\n *   (config) => console.log('Configuration changed:', config),\n *   (hasChanges) => console.log('Has unsaved changes:', hasChanges)\n * );\n * ```\n *\n * @example\n * JSON import/export:\n * ```typescript\n * const { actions } = useConfigurationState();\n *\n * // Export to JSON\n * const exportResult = actions.exportToJson({ pretty: true });\n * if (exportResult.isSuccess()) {\n *   console.log(exportResult.value); // JSON string\n * }\n *\n * // Import from JSON\n * const importResult = actions.importFromJson(jsonString);\n * if (importResult.isFailure()) {\n *   console.error('Import failed:', importResult.message);\n * }\n * ```\n *\n * @param initialConfiguration - Optional initial configuration. Defaults to system default configuration\n * @param onConfigurationChange - Optional callback invoked when configuration changes (not on first mount)\n * @param onUnsavedChanges - Optional callback invoked when unsaved changes state changes\n *\n * @returns Object containing:\n * - `state` - Current configuration state with change tracking and validation\n * - `actions` - Methods for modifying and managing the configuration\n * - `templates` - Available configuration templates for quick loading\n *\n * @public\n */\nexport function useConfigurationState(\n  initialConfiguration?: Config.Model.ISystemConfiguration,\n  onConfigurationChange?: (config: Config.Model.ISystemConfiguration) => void,\n  onUnsavedChanges?: (hasChanges: boolean) => void\n): UseConfigurationStateReturn {\n  const defaultConfig = useMemo(\n    () => initialConfiguration || getDefaultConfiguration(),\n    [initialConfiguration]\n  );\n  const originalConfigRef = useRef(defaultConfig);\n\n  // State\n  const [currentConfiguration, setCurrentConfiguration] = useState<Config.Model.ISystemConfiguration>(\n    cloneConfiguration(defaultConfig)\n  );\n  const [activeTab, setActiveTab] = useState<ConfigurationState['activeTab']>('qualifiers');\n  const [isJsonView, setIsJsonView] = useState(false);\n  const [jsonString, setJsonString] = useState('');\n  const [jsonError, setJsonError] = useState<string | null>(null);\n\n  // Computed state\n  const hasUnsavedChanges = useMemo(() => {\n    return !compareConfigurations(originalConfigRef.current, currentConfiguration);\n  }, [currentConfiguration]);\n\n  const changes = useMemo(() => {\n    return trackConfigurationChanges(originalConfigRef.current, currentConfiguration);\n  }, [currentConfiguration]);\n\n  const validation = useMemo(() => {\n    return validateConfiguration(currentConfiguration);\n  }, [currentConfiguration]);\n\n  // Update JSON string when configuration changes and in JSON view\n  React.useEffect(() => {\n    if (isJsonView) {\n      const result = exportConfiguration(currentConfiguration, { format: 'json', pretty: true });\n      if (result.isSuccess()) {\n        setJsonString(result.value);\n        setJsonError(null);\n      } else {\n        setJsonError(result.message);\n      }\n    }\n  }, [currentConfiguration, isJsonView]);\n\n  // Notify parent of configuration changes\n  const isFirstMount = useRef(true);\n  const lastNotifiedConfig = useRef(currentConfiguration);\n\n  React.useEffect(() => {\n    // Skip notification on first mount to avoid loops\n    if (isFirstMount.current) {\n      isFirstMount.current = false;\n      return;\n    }\n\n    // Only notify if configuration actually changed\n    if (!compareConfigurations(lastNotifiedConfig.current, currentConfiguration)) {\n      lastNotifiedConfig.current = currentConfiguration;\n      onConfigurationChange?.(currentConfiguration);\n    }\n  }, [currentConfiguration, onConfigurationChange]);\n\n  // Notify parent of unsaved changes\n  React.useEffect(() => {\n    onUnsavedChanges?.(hasUnsavedChanges);\n  }, [hasUnsavedChanges, onUnsavedChanges]);\n\n  // Actions\n  const loadConfiguration = useCallback((config: Config.Model.ISystemConfiguration) => {\n    const cloned = cloneConfiguration(config);\n    setCurrentConfiguration(cloned);\n    originalConfigRef.current = cloneConfiguration(config);\n  }, []);\n\n  const resetConfiguration = useCallback(() => {\n    setCurrentConfiguration(cloneConfiguration(originalConfigRef.current));\n  }, []);\n\n  const applyConfiguration = useCallback(() => {\n    originalConfigRef.current = cloneConfiguration(currentConfiguration);\n  }, [currentConfiguration]);\n\n  // Qualifier Types operations\n  const updateQualifierTypes = useCallback(\n    (qualifierTypes: QualifierTypes.Config.IAnyQualifierTypeConfig[]) => {\n      setCurrentConfiguration((prev) => ({\n        ...prev,\n        qualifierTypes\n      }));\n    },\n    []\n  );\n\n  const addQualifierType = useCallback((qualifierType: QualifierTypes.Config.IAnyQualifierTypeConfig) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      qualifierTypes: [...(prev.qualifierTypes || []), qualifierType]\n    }));\n  }, []);\n\n  const updateQualifierType = useCallback(\n    (index: number, qualifierType: QualifierTypes.Config.IAnyQualifierTypeConfig) => {\n      setCurrentConfiguration((prev) => ({\n        ...prev,\n        qualifierTypes: prev.qualifierTypes?.map((qt, i) => (i === index ? qualifierType : qt)) || []\n      }));\n    },\n    []\n  );\n\n  const removeQualifierType = useCallback((index: number) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      qualifierTypes: prev.qualifierTypes?.filter((_, i) => i !== index) || []\n    }));\n  }, []);\n\n  // Qualifiers operations\n  const updateQualifiers = useCallback((qualifiers: Qualifiers.IQualifierDecl[]) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      qualifiers\n    }));\n  }, []);\n\n  const addQualifier = useCallback((qualifier: Qualifiers.IQualifierDecl) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      qualifiers: [...(prev.qualifiers || []), qualifier]\n    }));\n  }, []);\n\n  const updateQualifier = useCallback((index: number, qualifier: Qualifiers.IQualifierDecl) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      qualifiers: prev.qualifiers?.map((q, i) => (i === index ? qualifier : q)) || []\n    }));\n  }, []);\n\n  const removeQualifier = useCallback((index: number) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      qualifiers: prev.qualifiers?.filter((_, i) => i !== index) || []\n    }));\n  }, []);\n\n  // Resource Types operations\n  const updateResourceTypes = useCallback((resourceTypes: ResourceTypes.Config.IResourceTypeConfig[]) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      resourceTypes\n    }));\n  }, []);\n\n  const addResourceType = useCallback((resourceType: ResourceTypes.Config.IResourceTypeConfig) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      resourceTypes: [...(prev.resourceTypes || []), resourceType]\n    }));\n  }, []);\n\n  const updateResourceType = useCallback(\n    (index: number, resourceType: ResourceTypes.Config.IResourceTypeConfig) => {\n      setCurrentConfiguration((prev) => ({\n        ...prev,\n        resourceTypes: prev.resourceTypes?.map((rt, i) => (i === index ? resourceType : rt)) || []\n      }));\n    },\n    []\n  );\n\n  const removeResourceType = useCallback((index: number) => {\n    setCurrentConfiguration((prev) => ({\n      ...prev,\n      resourceTypes: prev.resourceTypes?.filter((_, i) => i !== index) || []\n    }));\n  }, []);\n\n  // View management\n  const toggleJsonView = useCallback(() => {\n    if (!isJsonView) {\n      // Switching to JSON view - export current config\n      const result = exportConfiguration(currentConfiguration, { format: 'json', pretty: true });\n      if (result.isSuccess()) {\n        setJsonString(result.value);\n        setJsonError(null);\n      } else {\n        setJsonError(result.message);\n      }\n    }\n    setIsJsonView(!isJsonView);\n  }, [isJsonView, currentConfiguration]);\n\n  const updateJsonString = useCallback((json: string) => {\n    setJsonString(json);\n    setJsonError(null);\n  }, []);\n\n  const applyJsonChanges = useCallback((): Result<void> => {\n    const result = importConfiguration(jsonString);\n    if (result.isSuccess()) {\n      setCurrentConfiguration(result.value);\n      setJsonError(null);\n      return succeed(undefined);\n    } else {\n      setJsonError(result.message);\n      return fail(result.message);\n    }\n  }, [jsonString]);\n\n  // Import/Export\n  const exportToJson = useCallback(\n    (options?: ConfigurationExportOptions): Result<string> => {\n      return exportConfiguration(currentConfiguration, options);\n    },\n    [currentConfiguration]\n  );\n\n  const importFromJson = useCallback(\n    (jsonData: string): Result<void> => {\n      const result = importConfiguration(jsonData);\n      if (result.isSuccess()) {\n        loadConfiguration(result.value);\n        return succeed(undefined);\n      }\n      return fail(result.message);\n    },\n    [loadConfiguration]\n  );\n\n  const loadTemplate = useCallback(\n    (templateId: string): Result<void> => {\n      const templates = getConfigurationTemplates();\n      const template = templates.find((t) => t.id === templateId);\n\n      if (!template) {\n        return fail(`Template '${templateId}' not found`);\n      }\n\n      loadConfiguration(template.configuration);\n      return succeed(undefined);\n    },\n    [loadConfiguration]\n  );\n\n  const validateCurrent = useCallback((): ConfigurationValidationResult => {\n    return validateConfiguration(currentConfiguration);\n  }, [currentConfiguration]);\n\n  const state: ConfigurationState = {\n    currentConfiguration,\n    originalConfiguration: originalConfigRef.current,\n    hasUnsavedChanges,\n    changes,\n    validation,\n    activeTab,\n    isJsonView,\n    jsonString,\n    jsonError\n  };\n\n  const actions: ConfigurationActions = {\n    loadConfiguration,\n    resetConfiguration,\n    applyConfiguration,\n    updateQualifierTypes,\n    updateQualifiers,\n    updateResourceTypes,\n    addQualifierType,\n    updateQualifierType,\n    removeQualifierType,\n    addQualifier,\n    updateQualifier,\n    removeQualifier,\n    addResourceType,\n    updateResourceType,\n    removeResourceType,\n    setActiveTab,\n    toggleJsonView,\n    updateJsonString,\n    applyJsonChanges,\n    exportToJson,\n    importFromJson,\n    loadTemplate,\n    validateCurrent\n  };\n\n  return {\n    state,\n    actions,\n    templates: getConfigurationTemplates()\n  };\n}\n"]}