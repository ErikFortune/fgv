{"version":3,"file":"useConfigurationState.js","sourceRoot":"","sources":["../../src/hooks/useConfigurationState.ts"],"names":[],"mappings":";;AA4EA,sDAqQC;;AAjVD,qDAAsE;AAEtE,0CAAsD;AACtD,kEAcqC;AA2DrC,SAAgB,qBAAqB,CACnC,oBAAwD,EACxD,qBAA2E,EAC3E,gBAAgD;IAGhD,IAAM,aAAa,GAAG,IAAA,eAAO,EAAC,cAAM,OAAA,oBAAoB,IAAI,IAAA,4CAAuB,GAAE,EAAjD,CAAiD,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC/G,IAAM,iBAAiB,GAAG,IAAA,cAAM,EAAC,aAAa,CAAC,CAAC;IAEhD,QAAQ;IACF,IAAA,KAAkD,IAAA,gBAAQ,EAC9D,IAAA,uCAAkB,EAAC,aAAa,CAAC,CAClC,EAFM,oBAAoB,QAAA,EAAE,uBAAuB,QAEnD,CAAC;IACI,IAAA,KAA4B,IAAA,gBAAQ,EAAkC,gBAAgB,CAAC,EAAtF,SAAS,QAAA,EAAE,YAAY,QAA+D,CAAC;IACxF,IAAA,KAA8B,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAA5C,UAAU,QAAA,EAAE,aAAa,QAAmB,CAAC;IAC9C,IAAA,KAA8B,IAAA,gBAAQ,EAAC,EAAE,CAAC,EAAzC,UAAU,QAAA,EAAE,aAAa,QAAgB,CAAC;IAC3C,IAAA,KAA4B,IAAA,gBAAQ,EAAgB,IAAI,CAAC,EAAxD,SAAS,QAAA,EAAE,YAAY,QAAiC,CAAC;IAEhE,iBAAiB;IACjB,IAAM,iBAAiB,GAAG,IAAA,eAAO,EAAC;QAChC,OAAO,CAAC,IAAA,0CAAqB,EAAC,iBAAiB,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;IACjF,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE3B,IAAM,OAAO,GAAG,IAAA,eAAO,EAAC;QACtB,OAAO,IAAA,8CAAyB,EAAC,iBAAiB,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;IACpF,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE3B,IAAM,UAAU,GAAG,IAAA,eAAO,EAAC;QACzB,OAAO,IAAA,0CAAqB,EAAC,oBAAoB,CAAC,CAAC;IACrD,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE3B,iEAAiE;IACjE,eAAK,CAAC,SAAS,CAAC;QACd,IAAI,UAAU,EAAE,CAAC;YACf,IAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,oBAAoB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YAC3F,IAAI,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC;gBACvB,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;iBAAM,CAAC;gBACN,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC,CAAC;IAEvC,yCAAyC;IACzC,eAAK,CAAC,SAAS,CAAC;QACd,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAG,oBAAoB,CAAC,CAAC;IAChD,CAAC,EAAE,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAAC,CAAC;IAElD,mCAAmC;IACnC,eAAK,CAAC,SAAS,CAAC;QACd,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAG,iBAAiB,CAAC,CAAC;IACxC,CAAC,EAAE,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAE1C,UAAU;IACV,IAAM,iBAAiB,GAAG,IAAA,mBAAW,EAAC,UAAC,MAAyC;QAC9E,IAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,MAAM,CAAC,CAAC;QAC1C,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAChC,iBAAiB,CAAC,OAAO,GAAG,IAAA,uCAAkB,EAAC,MAAM,CAAC,CAAC;IACzD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC;QACrC,uBAAuB,CAAC,IAAA,uCAAkB,EAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;IACzE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC;QACrC,iBAAiB,CAAC,OAAO,GAAG,IAAA,uCAAkB,EAAC,oBAAoB,CAAC,CAAC;IACvE,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE3B,6BAA6B;IAC7B,IAAM,oBAAoB,GAAG,IAAA,mBAAW,EAAC,UAAC,cAAkE;QAC1G,uBAAuB,CAAC,UAAA,IAAI,IAAI,OAAA,uCAC3B,IAAI,KACP,cAAc,gBAAA,IACd,EAH8B,CAG9B,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC,UAAC,aAA+D;QACnG,uBAAuB,CAAC,UAAA,IAAI,IAAI,OAAA,uCAC3B,IAAI,KACP,cAAc,kDAAM,CAAC,IAAI,CAAC,cAAc,IAAI,EAAE,CAAC,UAAE,aAAa,aAC9D,EAH8B,CAG9B,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,mBAAmB,GAAG,IAAA,mBAAW,EAAC,UAAC,KAAa,EAAE,aAA+D;QACrH,uBAAuB,CAAC,UAAA,IAAI;;YAAI,OAAA,uCAC3B,IAAI,KACP,cAAc,EAAE,CAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,CAAC,UAAC,EAAE,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,EAAhC,CAAgC,CAAC,KAAI,EAAE,IAC3F,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,mBAAmB,GAAG,IAAA,mBAAW,EAAC,UAAC,KAAa;QACpD,uBAAuB,CAAC,UAAA,IAAI;;YAAI,OAAA,uCAC3B,IAAI,KACP,cAAc,EAAE,CAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,EAAX,CAAW,CAAC,KAAI,EAAE,IACxE,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,wBAAwB;IACxB,IAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC,UAAC,UAAuC;QAC3E,uBAAuB,CAAC,UAAA,IAAI,IAAI,OAAA,uCAC3B,IAAI,KACP,UAAU,YAAA,IACV,EAH8B,CAG9B,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,UAAC,SAAoC;QACpE,uBAAuB,CAAC,UAAA,IAAI,IAAI,OAAA,uCAC3B,IAAI,KACP,UAAU,kDAAM,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,UAAE,SAAS,aAClD,EAH8B,CAG9B,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,eAAe,GAAG,IAAA,mBAAW,EAAC,UAAC,KAAa,EAAE,SAAoC;QACtF,uBAAuB,CAAC,UAAA,IAAI;;YAAI,OAAA,uCAC3B,IAAI,KACP,UAAU,EAAE,CAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAA3B,CAA2B,CAAC,KAAI,EAAE,IAC7E,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,eAAe,GAAG,IAAA,mBAAW,EAAC,UAAC,KAAa;QAChD,uBAAuB,CAAC,UAAA,IAAI;;YAAI,OAAA,uCAC3B,IAAI,KACP,UAAU,EAAE,CAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,EAAX,CAAW,CAAC,KAAI,EAAE,IAChE,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,4BAA4B;IAC5B,IAAM,mBAAmB,GAAG,IAAA,mBAAW,EAAC,UAAC,aAAyD;QAChG,uBAAuB,CAAC,UAAA,IAAI,IAAI,OAAA,uCAC3B,IAAI,KACP,aAAa,eAAA,IACb,EAH8B,CAG9B,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,eAAe,GAAG,IAAA,mBAAW,EAAC,UAAC,YAAsD;QACzF,uBAAuB,CAAC,UAAA,IAAI,IAAI,OAAA,uCAC3B,IAAI,KACP,aAAa,kDAAM,CAAC,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC,UAAE,YAAY,aAC3D,EAH8B,CAG9B,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC,UAAC,KAAa,EAAE,YAAsD;QAC3G,uBAAuB,CAAC,UAAA,IAAI;;YAAI,OAAA,uCAC3B,IAAI,KACP,aAAa,EAAE,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,GAAG,CAAC,UAAC,EAAE,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,EAA/B,CAA+B,CAAC,KAAI,EAAE,IACxF,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,kBAAkB,GAAG,IAAA,mBAAW,EAAC,UAAC,KAAa;QACnD,uBAAuB,CAAC,UAAA,IAAI;;YAAI,OAAA,uCAC3B,IAAI,KACP,aAAa,EAAE,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,EAAX,CAAW,CAAC,KAAI,EAAE,IACtE,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,kBAAkB;IAClB,IAAM,cAAc,GAAG,IAAA,mBAAW,EAAC;QACjC,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,iDAAiD;YACjD,IAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,oBAAoB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YAC3F,IAAI,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC;gBACvB,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;iBAAM,CAAC;gBACN,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QACD,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC,EAAE,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;IAEvC,IAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC,UAAC,IAAY;QAChD,aAAa,CAAC,IAAI,CAAC,CAAC;QACpB,YAAY,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC;QACnC,IAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC;YACvB,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnB,OAAO,IAAA,kBAAO,EAAC,SAAS,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC7B,OAAO,IAAA,eAAI,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,gBAAgB;IAChB,IAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,UAAC,OAAoC;QACpE,OAAO,IAAA,wCAAmB,EAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE3B,IAAM,cAAc,GAAG,IAAA,mBAAW,EAAC,UAAC,QAAgB;QAClD,IAAM,MAAM,GAAG,IAAA,wCAAmB,EAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC;YACvB,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,IAAA,kBAAO,EAAC,SAAS,CAAC,CAAC;QAC5B,CAAC;QACD,OAAO,IAAA,eAAI,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAExB,IAAM,YAAY,GAAG,IAAA,mBAAW,EAAC,UAAC,UAAkB;QAClD,IAAM,SAAS,GAAG,IAAA,8CAAyB,GAAE,CAAC;QAC9C,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,UAAU,EAAnB,CAAmB,CAAC,CAAC;QAE1D,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,IAAA,eAAI,EAAC,oBAAa,UAAU,gBAAa,CAAC,CAAC;QACpD,CAAC;QAED,iBAAiB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC1C,OAAO,IAAA,kBAAO,EAAC,SAAS,CAAC,CAAC;IAC5B,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAExB,IAAM,eAAe,GAAG,IAAA,mBAAW,EAAC;QAClC,OAAO,IAAA,0CAAqB,EAAC,oBAAoB,CAAC,CAAC;IACrD,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE3B,IAAM,KAAK,GAAuB;QAChC,oBAAoB,sBAAA;QACpB,qBAAqB,EAAE,iBAAiB,CAAC,OAAO;QAChD,iBAAiB,mBAAA;QACjB,OAAO,SAAA;QACP,UAAU,YAAA;QACV,SAAS,WAAA;QACT,UAAU,YAAA;QACV,UAAU,YAAA;QACV,SAAS,WAAA;KACV,CAAC;IAEF,IAAM,OAAO,GAAyB;QACpC,iBAAiB,mBAAA;QACjB,kBAAkB,oBAAA;QAClB,kBAAkB,oBAAA;QAClB,oBAAoB,sBAAA;QACpB,gBAAgB,kBAAA;QAChB,mBAAmB,qBAAA;QACnB,gBAAgB,kBAAA;QAChB,mBAAmB,qBAAA;QACnB,mBAAmB,qBAAA;QACnB,YAAY,cAAA;QACZ,eAAe,iBAAA;QACf,eAAe,iBAAA;QACf,eAAe,iBAAA;QACf,kBAAkB,oBAAA;QAClB,kBAAkB,oBAAA;QAClB,YAAY,cAAA;QACZ,cAAc,gBAAA;QACd,gBAAgB,kBAAA;QAChB,gBAAgB,kBAAA;QAChB,YAAY,cAAA;QACZ,cAAc,gBAAA;QACd,YAAY,cAAA;QACZ,eAAe,iBAAA;KAChB,CAAC;IAEF,OAAO;QACL,KAAK,OAAA;QACL,OAAO,SAAA;QACP,SAAS,EAAE,IAAA,8CAAyB,GAAE;KACvC,CAAC;AACJ,CAAC","sourcesContent":["import React, { useState, useCallback, useMemo, useRef } from 'react';\nimport { Config, QualifierTypes, Qualifiers, ResourceTypes } from '@fgv/ts-res';\nimport { Result, succeed, fail } from '@fgv/ts-utils';\nimport {\n  getDefaultConfiguration,\n  validateConfiguration,\n  cloneConfiguration,\n  compareConfigurations,\n  trackConfigurationChanges,\n  exportConfiguration,\n  importConfiguration,\n  getConfigurationTemplates,\n  generateConfigurationFilename,\n  ConfigurationChanges,\n  ConfigurationValidationResult,\n  ConfigurationExportOptions,\n  ConfigurationTemplate\n} from '../utils/configurationUtils';\n\nexport interface ConfigurationState {\n  currentConfiguration: Config.Model.ISystemConfiguration;\n  originalConfiguration: Config.Model.ISystemConfiguration;\n  hasUnsavedChanges: boolean;\n  changes: ConfigurationChanges;\n  validation: ConfigurationValidationResult;\n  activeTab: 'qualifierTypes' | 'qualifiers' | 'resourceTypes' | 'json';\n  isJsonView: boolean;\n  jsonString: string;\n  jsonError: string | null;\n}\n\nexport interface ConfigurationActions {\n  // Configuration management\n  loadConfiguration: (config: Config.Model.ISystemConfiguration) => void;\n  resetConfiguration: () => void;\n  applyConfiguration: () => void;\n  \n  // Editing operations\n  updateQualifierTypes: (qualifierTypes: QualifierTypes.Config.ISystemQualifierTypeConfig[]) => void;\n  updateQualifiers: (qualifiers: Qualifiers.IQualifierDecl[]) => void;\n  updateResourceTypes: (resourceTypes: ResourceTypes.Config.IResourceTypeConfig[]) => void;\n  \n  // Individual item operations\n  addQualifierType: (qualifierType: QualifierTypes.Config.ISystemQualifierTypeConfig) => void;\n  updateQualifierType: (index: number, qualifierType: QualifierTypes.Config.ISystemQualifierTypeConfig) => void;\n  removeQualifierType: (index: number) => void;\n  \n  addQualifier: (qualifier: Qualifiers.IQualifierDecl) => void;\n  updateQualifier: (index: number, qualifier: Qualifiers.IQualifierDecl) => void;\n  removeQualifier: (index: number) => void;\n  \n  addResourceType: (resourceType: ResourceTypes.Config.IResourceTypeConfig) => void;\n  updateResourceType: (index: number, resourceType: ResourceTypes.Config.IResourceTypeConfig) => void;\n  removeResourceType: (index: number) => void;\n  \n  // View management\n  setActiveTab: (tab: ConfigurationState['activeTab']) => void;\n  toggleJsonView: () => void;\n  updateJsonString: (json: string) => void;\n  applyJsonChanges: () => Result<void>;\n  \n  // Import/Export\n  exportToJson: (options?: ConfigurationExportOptions) => Result<string>;\n  importFromJson: (jsonData: string) => Result<void>;\n  loadTemplate: (templateId: string) => Result<void>;\n  \n  // Validation\n  validateCurrent: () => ConfigurationValidationResult;\n}\n\nexport interface UseConfigurationStateReturn {\n  state: ConfigurationState;\n  actions: ConfigurationActions;\n  templates: ConfigurationTemplate[];\n}\n\nexport function useConfigurationState(\n  initialConfiguration?: Config.Model.ISystemConfiguration,\n  onConfigurationChange?: (config: Config.Model.ISystemConfiguration) => void,\n  onUnsavedChanges?: (hasChanges: boolean) => void\n): UseConfigurationStateReturn {\n  \n  const defaultConfig = useMemo(() => initialConfiguration || getDefaultConfiguration(), [initialConfiguration]);\n  const originalConfigRef = useRef(defaultConfig);\n  \n  // State\n  const [currentConfiguration, setCurrentConfiguration] = useState<Config.Model.ISystemConfiguration>(\n    cloneConfiguration(defaultConfig)\n  );\n  const [activeTab, setActiveTab] = useState<ConfigurationState['activeTab']>('qualifierTypes');\n  const [isJsonView, setIsJsonView] = useState(false);\n  const [jsonString, setJsonString] = useState('');\n  const [jsonError, setJsonError] = useState<string | null>(null);\n  \n  // Computed state\n  const hasUnsavedChanges = useMemo(() => {\n    return !compareConfigurations(originalConfigRef.current, currentConfiguration);\n  }, [currentConfiguration]);\n  \n  const changes = useMemo(() => {\n    return trackConfigurationChanges(originalConfigRef.current, currentConfiguration);\n  }, [currentConfiguration]);\n  \n  const validation = useMemo(() => {\n    return validateConfiguration(currentConfiguration);\n  }, [currentConfiguration]);\n  \n  // Update JSON string when configuration changes and in JSON view\n  React.useEffect(() => {\n    if (isJsonView) {\n      const result = exportConfiguration(currentConfiguration, { format: 'json', pretty: true });\n      if (result.isSuccess()) {\n        setJsonString(result.value);\n        setJsonError(null);\n      } else {\n        setJsonError(result.message);\n      }\n    }\n  }, [currentConfiguration, isJsonView]);\n  \n  // Notify parent of configuration changes\n  React.useEffect(() => {\n    onConfigurationChange?.(currentConfiguration);\n  }, [currentConfiguration, onConfigurationChange]);\n  \n  // Notify parent of unsaved changes\n  React.useEffect(() => {\n    onUnsavedChanges?.(hasUnsavedChanges);\n  }, [hasUnsavedChanges, onUnsavedChanges]);\n  \n  // Actions\n  const loadConfiguration = useCallback((config: Config.Model.ISystemConfiguration) => {\n    const cloned = cloneConfiguration(config);\n    setCurrentConfiguration(cloned);\n    originalConfigRef.current = cloneConfiguration(config);\n  }, []);\n  \n  const resetConfiguration = useCallback(() => {\n    setCurrentConfiguration(cloneConfiguration(originalConfigRef.current));\n  }, []);\n  \n  const applyConfiguration = useCallback(() => {\n    originalConfigRef.current = cloneConfiguration(currentConfiguration);\n  }, [currentConfiguration]);\n  \n  // Qualifier Types operations\n  const updateQualifierTypes = useCallback((qualifierTypes: QualifierTypes.Config.ISystemQualifierTypeConfig[]) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifierTypes\n    }));\n  }, []);\n  \n  const addQualifierType = useCallback((qualifierType: QualifierTypes.Config.ISystemQualifierTypeConfig) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifierTypes: [...(prev.qualifierTypes || []), qualifierType]\n    }));\n  }, []);\n  \n  const updateQualifierType = useCallback((index: number, qualifierType: QualifierTypes.Config.ISystemQualifierTypeConfig) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifierTypes: prev.qualifierTypes?.map((qt, i) => i === index ? qualifierType : qt) || []\n    }));\n  }, []);\n  \n  const removeQualifierType = useCallback((index: number) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifierTypes: prev.qualifierTypes?.filter((_, i) => i !== index) || []\n    }));\n  }, []);\n  \n  // Qualifiers operations\n  const updateQualifiers = useCallback((qualifiers: Qualifiers.IQualifierDecl[]) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifiers\n    }));\n  }, []);\n  \n  const addQualifier = useCallback((qualifier: Qualifiers.IQualifierDecl) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifiers: [...(prev.qualifiers || []), qualifier]\n    }));\n  }, []);\n  \n  const updateQualifier = useCallback((index: number, qualifier: Qualifiers.IQualifierDecl) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifiers: prev.qualifiers?.map((q, i) => i === index ? qualifier : q) || []\n    }));\n  }, []);\n  \n  const removeQualifier = useCallback((index: number) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      qualifiers: prev.qualifiers?.filter((_, i) => i !== index) || []\n    }));\n  }, []);\n  \n  // Resource Types operations\n  const updateResourceTypes = useCallback((resourceTypes: ResourceTypes.Config.IResourceTypeConfig[]) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      resourceTypes\n    }));\n  }, []);\n  \n  const addResourceType = useCallback((resourceType: ResourceTypes.Config.IResourceTypeConfig) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      resourceTypes: [...(prev.resourceTypes || []), resourceType]\n    }));\n  }, []);\n  \n  const updateResourceType = useCallback((index: number, resourceType: ResourceTypes.Config.IResourceTypeConfig) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      resourceTypes: prev.resourceTypes?.map((rt, i) => i === index ? resourceType : rt) || []\n    }));\n  }, []);\n  \n  const removeResourceType = useCallback((index: number) => {\n    setCurrentConfiguration(prev => ({\n      ...prev,\n      resourceTypes: prev.resourceTypes?.filter((_, i) => i !== index) || []\n    }));\n  }, []);\n  \n  // View management\n  const toggleJsonView = useCallback(() => {\n    if (!isJsonView) {\n      // Switching to JSON view - export current config\n      const result = exportConfiguration(currentConfiguration, { format: 'json', pretty: true });\n      if (result.isSuccess()) {\n        setJsonString(result.value);\n        setJsonError(null);\n      } else {\n        setJsonError(result.message);\n      }\n    }\n    setIsJsonView(!isJsonView);\n  }, [isJsonView, currentConfiguration]);\n  \n  const updateJsonString = useCallback((json: string) => {\n    setJsonString(json);\n    setJsonError(null);\n  }, []);\n  \n  const applyJsonChanges = useCallback((): Result<void> => {\n    const result = importConfiguration(jsonString);\n    if (result.isSuccess()) {\n      setCurrentConfiguration(result.value);\n      setJsonError(null);\n      return succeed(undefined);\n    } else {\n      setJsonError(result.message);\n      return fail(result.message);\n    }\n  }, [jsonString]);\n  \n  // Import/Export\n  const exportToJson = useCallback((options?: ConfigurationExportOptions): Result<string> => {\n    return exportConfiguration(currentConfiguration, options);\n  }, [currentConfiguration]);\n  \n  const importFromJson = useCallback((jsonData: string): Result<void> => {\n    const result = importConfiguration(jsonData);\n    if (result.isSuccess()) {\n      loadConfiguration(result.value);\n      return succeed(undefined);\n    }\n    return fail(result.message);\n  }, [loadConfiguration]);\n  \n  const loadTemplate = useCallback((templateId: string): Result<void> => {\n    const templates = getConfigurationTemplates();\n    const template = templates.find(t => t.id === templateId);\n    \n    if (!template) {\n      return fail(`Template '${templateId}' not found`);\n    }\n    \n    loadConfiguration(template.configuration);\n    return succeed(undefined);\n  }, [loadConfiguration]);\n  \n  const validateCurrent = useCallback((): ConfigurationValidationResult => {\n    return validateConfiguration(currentConfiguration);\n  }, [currentConfiguration]);\n  \n  const state: ConfigurationState = {\n    currentConfiguration,\n    originalConfiguration: originalConfigRef.current,\n    hasUnsavedChanges,\n    changes,\n    validation,\n    activeTab,\n    isJsonView,\n    jsonString,\n    jsonError\n  };\n  \n  const actions: ConfigurationActions = {\n    loadConfiguration,\n    resetConfiguration,\n    applyConfiguration,\n    updateQualifierTypes,\n    updateQualifiers,\n    updateResourceTypes,\n    addQualifierType,\n    updateQualifierType,\n    removeQualifierType,\n    addQualifier,\n    updateQualifier,\n    removeQualifier,\n    addResourceType,\n    updateResourceType,\n    removeResourceType,\n    setActiveTab,\n    toggleJsonView,\n    updateJsonString,\n    applyJsonChanges,\n    exportToJson,\n    importFromJson,\n    loadTemplate,\n    validateCurrent\n  };\n  \n  return {\n    state,\n    actions,\n    templates: getConfigurationTemplates()\n  };\n}"]}