{"version":3,"file":"useViewState.js","sourceRoot":"","sources":["../../src/hooks/useViewState.ts"],"names":[],"mappings":";;AAWA,oCAqCC;;AAhDD,+BAA8C;AAW9C,SAAgB,YAAY;IACpB,IAAA,KAA0B,IAAA,gBAAQ,EAAY,EAAE,CAAC,EAAhD,QAAQ,QAAA,EAAE,WAAW,QAA2B,CAAC;IAClD,IAAA,KAA8C,IAAA,gBAAQ,EAAgB,IAAI,CAAC,EAA1E,kBAAkB,QAAA,EAAE,qBAAqB,QAAiC,CAAC;IAElF,IAAM,UAAU,GAAG,IAAA,mBAAW,EAAC,UAAC,IAAqB,EAAE,OAAe;QACpE,IAAM,UAAU,GAAY;YAC1B,EAAE,EAAE,cAAO,IAAI,CAAC,GAAG,EAAE,cAAI,IAAI,CAAC,MAAM,EAAE,CAAE;YACxC,IAAI,MAAA;YACJ,OAAO,SAAA;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;QAEF,WAAW,CAAC,UAAA,IAAI,IAAI,uDAAI,IAAI,UAAE,UAAU,WAApB,CAAqB,CAAC,CAAC;QAE3C,2CAA2C;QAC3C,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC;YACpB,UAAU,CAAC;gBACT,WAAW,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE,EAAtB,CAAsB,CAAC,EAAxC,CAAwC,CAAC,CAAC;YAChE,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,aAAa,GAAG,IAAA,mBAAW,EAAC;QAChC,WAAW,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,cAAc,GAAG,IAAA,mBAAW,EAAC,UAAC,UAAyB;QAC3D,qBAAqB,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACL,QAAQ,UAAA;QACR,kBAAkB,oBAAA;QAClB,UAAU,YAAA;QACV,aAAa,eAAA;QACb,cAAc,gBAAA;KACf,CAAC;AACJ,CAAC","sourcesContent":["import { useState, useCallback } from 'react';\nimport { Message } from '../types';\n\nexport interface UseViewStateReturn {\n  messages: Message[];\n  selectedResourceId: string | null;\n  addMessage: (type: Message['type'], message: string) => void;\n  clearMessages: () => void;\n  selectResource: (resourceId: string | null) => void;\n}\n\nexport function useViewState(): UseViewStateReturn {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [selectedResourceId, setSelectedResourceId] = useState<string | null>(null);\n\n  const addMessage = useCallback((type: Message['type'], message: string) => {\n    const newMessage: Message = {\n      id: `msg-${Date.now()}-${Math.random()}`,\n      type,\n      message,\n      timestamp: new Date()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    \n    // Auto-clear info messages after 5 seconds\n    if (type === 'info') {\n      setTimeout(() => {\n        setMessages(prev => prev.filter(m => m.id !== newMessage.id));\n      }, 5000);\n    }\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  const selectResource = useCallback((resourceId: string | null) => {\n    setSelectedResourceId(resourceId);\n  }, []);\n\n  return {\n    messages,\n    selectedResourceId,\n    addMessage,\n    clearMessages,\n    selectResource\n  };\n}"]}