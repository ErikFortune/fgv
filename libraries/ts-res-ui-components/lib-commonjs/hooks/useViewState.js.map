{"version":3,"file":"useViewState.js","sourceRoot":"","sources":["../../src/hooks/useViewState.ts"],"names":[],"mappings":";;AAgEA,oCAgCC;AAhGD,iCAA8C;AAqB9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,SAAgB,YAAY;IAC1B,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAY,EAAE,CAAC,CAAC;IACxD,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,IAAA,gBAAQ,EAAgB,IAAI,CAAC,CAAC;IAElF,MAAM,UAAU,GAAG,IAAA,mBAAW,EAAC,CAAC,IAAqB,EAAE,OAAe,EAAE,EAAE;QACxE,MAAM,UAAU,GAAY;YAC1B,EAAE,EAAE,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;YACxC,IAAI;YACJ,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;QAEF,WAAW,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;QAE7C,4DAA4D;IAC9D,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QACrC,WAAW,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,cAAc,GAAG,IAAA,mBAAW,EAAC,CAAC,UAAyB,EAAE,EAAE;QAC/D,qBAAqB,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACL,QAAQ;QACR,kBAAkB;QAClB,UAAU;QACV,aAAa;QACb,cAAc;KACf,CAAC;AACJ,CAAC","sourcesContent":["import { useState, useCallback } from 'react';\nimport { Message } from '../types';\n\n/**\n * Return type for the useViewState hook.\n *\n * @public\n */\nexport interface UseViewStateReturn {\n  /** Array of current messages (info, warning, error, success) */\n  messages: Message[];\n  /** Currently selected resource ID */\n  selectedResourceId: string | null;\n  /** Add a new message to the message list */\n  addMessage: (type: Message['type'], message: string) => void;\n  /** Clear all messages */\n  clearMessages: () => void;\n  /** Select a resource by ID */\n  selectResource: (resourceId: string | null) => void;\n}\n\n/**\n * Hook for managing view state including messages and resource selection.\n *\n * This hook provides a centralized way to manage common view state concerns\n * like user messages (notifications) and resource selection. It's designed\n * to be used by view components that need to display messages and track\n * the currently selected resource.\n *\n * @example\n * ```tsx\n * function MyResourceView() {\n *   const {\n *     messages,\n *     selectedResourceId,\n *     addMessage,\n *     clearMessages,\n *     selectResource\n *   } = useViewState();\n *\n *   const handleOperation = async () => {\n *     try {\n *       await someAsyncOperation();\n *       addMessage('success', 'Operation completed successfully');\n *     } catch (error) {\n *       addMessage('error', `Operation failed: ${error.message}`);\n *     }\n *   };\n *\n *   return (\n *     <div>\n *       <MessageDisplay messages={messages} onClear={clearMessages} />\n *       <ResourcePicker\n *         selectedResourceId={selectedResourceId}\n *         onResourceSelect={(selection) => selectResource(selection.resourceId)}\n *       />\n *     </div>\n *   );\n * }\n * ```\n *\n * @returns Object containing view state and state management functions\n * @public\n */\nexport function useViewState(): UseViewStateReturn {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [selectedResourceId, setSelectedResourceId] = useState<string | null>(null);\n\n  const addMessage = useCallback((type: Message['type'], message: string) => {\n    const newMessage: Message = {\n      id: `msg-${Date.now()}-${Math.random()}`,\n      type,\n      message,\n      timestamp: new Date()\n    };\n\n    setMessages((prev) => [...prev, newMessage]);\n\n    // No auto-clearing - let users manage messages with filters\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  const selectResource = useCallback((resourceId: string | null) => {\n    setSelectedResourceId(resourceId);\n  }, []);\n\n  return {\n    messages,\n    selectedResourceId,\n    addMessage,\n    clearMessages,\n    selectResource\n  };\n}\n"]}