{"version":3,"file":"ObservabilityContext.js","sourceRoot":"","sources":["../../src/contexts/ObservabilityContext.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;;;AAEH,uDAAoE;AACpE,mFAA6D;AAE7D;;;;GAIG;AACU,QAAA,oBAAoB,GAAG,IAAA,qBAAa,EAC/C,kBAAkB,CAAC,2BAA2B,CAC/C,CAAC;AAaF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACI,MAAM,qBAAqB,GAAyC,CAAC,EAC1E,QAAQ,EACR,oBAAoB,GAAG,kBAAkB,CAAC,2BAA2B,EACtE,EAAE,EAAE,CAAC,8BAAC,4BAAoB,CAAC,QAAQ,IAAC,KAAK,EAAE,oBAAoB,IAAG,QAAQ,CAAiC,CAAC;AAHhG,QAAA,qBAAqB,yBAG2E;AAE7G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACI,MAAM,gBAAgB,GAAG,GAA6C,EAAE;IAC7E,OAAO,IAAA,kBAAU,EAAC,4BAAoB,CAAC,CAAC;AAC1C,CAAC,CAAC;AAFW,QAAA,gBAAgB,oBAE3B","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, { createContext, useContext, ReactNode } from 'react';\nimport * as ObservabilityTools from '../utils/observability';\n\n/**\n * React context for observability infrastructure.\n * Provides access to diagnostic and user loggers throughout the component tree.\n * @public\n */\nexport const ObservabilityContext = createContext<ObservabilityTools.IObservabilityContext>(\n  ObservabilityTools.DefaultObservabilityContext\n);\n\n/**\n * Props for the ObservabilityProvider component.\n * @public\n */\nexport interface ObservabilityProviderProps {\n  /** Child components that will have access to the observability context */\n  children: ReactNode;\n  /** Optional observability context to provide (defaults to console-based context) */\n  observabilityContext?: ObservabilityTools.IObservabilityContext;\n}\n\n/**\n * Provider component that makes observability context available to all child components.\n *\n * @example\n * ```tsx\n * // Basic usage with default console logging\n * <ObservabilityProvider>\n *   <MyApp />\n * </ObservabilityProvider>\n *\n * // Custom observability context\n * const customContext = ObservabilityTools.createConsoleObservabilityContext('debug', 'info');\n * <ObservabilityProvider observabilityContext={customContext}>\n *   <MyApp />\n * </ObservabilityProvider>\n *\n * // With custom user logger that forwards to app's message system\n * const contextWithMessages = new ObservabilityTools.ObservabilityContext(\n *   new ObservabilityTools.ConsoleUserLogger('info'),\n *   createCallbackUserLogger((type, message) => showToast(type, message))\n * );\n * <ObservabilityProvider observabilityContext={contextWithMessages}>\n *   <MyApp />\n * </ObservabilityProvider>\n * ```\n *\n * @param props - Provider configuration\n * @returns JSX provider element\n * @public\n */\nexport const ObservabilityProvider: React.FC<ObservabilityProviderProps> = ({\n  children,\n  observabilityContext = ObservabilityTools.DefaultObservabilityContext\n}) => <ObservabilityContext.Provider value={observabilityContext}>{children}</ObservabilityContext.Provider>;\n\n/**\n * Hook to access the current observability context.\n *\n * Provides access to both diagnostic logging (for developers/debugging) and\n * user logging (for user-facing messages and feedback).\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const observability = useObservability();\n *\n *   const handleAction = () => {\n *     // Log diagnostic info for developers\n *     observability.diag.info('User clicked action button');\n *\n *     try {\n *       performAction();\n *       // Show success message to user\n *       observability.user.success('Action completed successfully!');\n *     } catch (error) {\n *       // Log error for debugging\n *       observability.diag.error('Action failed:', error);\n *       // Show error to user\n *       observability.user.error('Action failed. Please try again.');\n *     }\n *   };\n *\n *   return <button onClick={handleAction}>Perform Action</button>;\n * }\n * ```\n *\n * @returns The current observability context with diag and user loggers\n * @public\n */\nexport const useObservability = (): ObservabilityTools.IObservabilityContext => {\n  return useContext(ObservabilityContext);\n};\n"]}