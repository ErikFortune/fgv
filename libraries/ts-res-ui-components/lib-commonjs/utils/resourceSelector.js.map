{"version":3,"file":"resourceSelector.js","sourceRoot":"","sources":["../../src/utils/resourceSelector.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { ProcessedResources, GridResourceSelector, CustomResourceSelector } from '../types';\n\n/**\n * Handler function type for resource selector implementations.\n */\ntype SelectorHandler = (selector: any, resources: ProcessedResources) => Result<string[]>;\n\n/**\n * Resource selector utility for filtering resources based on various criteria.\n * Supports built-in selector types and extensible custom selectors.\n *\n * @example\n * ```typescript\n * const selector = new ResourceSelector();\n *\n * // Use built-in selectors\n * const prefixResult = selector.select(\n *   { type: 'prefix', prefix: 'user.' },\n *   processedResources\n * );\n *\n * // Register and use custom selector\n * selector.registerSelector('byMetadata', (config, resources) => {\n *   return succeed(resources.summary.resourceIds.filter(id =>\n *     hasMetadata(id, config.key, config.value)\n *   ));\n * });\n * ```\n * @public\n */\nexport class ResourceSelector {\n  private registry = new Map<string, SelectorHandler>();\n\n  constructor() {\n    // Register built-in selectors\n    this.registry.set('ids', this.selectByIds);\n    this.registry.set('prefix', this.selectByPrefix);\n    this.registry.set('suffix', this.selectBySuffix);\n    this.registry.set('resourceTypes', this.selectByResourceTypes);\n    this.registry.set('pattern', this.selectByPattern);\n    this.registry.set('all', this.selectAll);\n    this.registry.set('custom', this.selectCustom);\n  }\n\n  /**\n   * Register a new selector type that can be used in grid configurations.\n   *\n   * @param type - Unique identifier for the selector type\n   * @param handler - Function that implements the selection logic\n   */\n  registerSelector(type: string, handler: SelectorHandler): void {\n    this.registry.set(type, handler);\n  }\n\n  /**\n   * Get all registered selector types (useful for debugging/tooling).\n   */\n  getRegisteredTypes(): string[] {\n    return Array.from(this.registry.keys());\n  }\n\n  /**\n   * Select resources based on the provided selector configuration.\n   *\n   * @param selector - Resource selector configuration\n   * @param resources - Processed resources to select from\n   * @returns Result containing array of selected resource IDs\n   */\n  select(selector: GridResourceSelector, resources: ProcessedResources): Result<string[]> {\n    const handler = this.registry.get(selector.type);\n    if (!handler) {\n      return fail(`Unknown selector type: ${selector.type}`);\n    }\n\n    try {\n      return handler(selector, resources);\n    } catch (error) {\n      return fail(`Selector error: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Select resources by explicit resource IDs.\n   */\n  private selectByIds = (\n    selector: { resourceIds: string[] },\n    resources: ProcessedResources\n  ): Result<string[]> => {\n    const availableIds = new Set(resources.summary.resourceIds);\n    const selectedIds = selector.resourceIds.filter((id) => availableIds.has(id));\n\n    if (selectedIds.length === 0 && selector.resourceIds.length > 0) {\n      return fail(`None of the specified resource IDs were found in the resource collection`);\n    }\n\n    return succeed(selectedIds);\n  };\n\n  /**\n   * Select resources with IDs starting with the specified prefix.\n   */\n  private selectByPrefix = (\n    selector: { prefix: string },\n    resources: ProcessedResources\n  ): Result<string[]> => {\n    if (!selector.prefix) {\n      return fail('Prefix cannot be empty');\n    }\n\n    const matchingIds = resources.summary.resourceIds.filter((id) => id.startsWith(selector.prefix));\n    return succeed(matchingIds);\n  };\n\n  /**\n   * Select resources with IDs ending with the specified suffix.\n   */\n  private selectBySuffix = (\n    selector: { suffix: string },\n    resources: ProcessedResources\n  ): Result<string[]> => {\n    if (!selector.suffix) {\n      return fail('Suffix cannot be empty');\n    }\n\n    const matchingIds = resources.summary.resourceIds.filter((id) => id.endsWith(selector.suffix));\n    return succeed(matchingIds);\n  };\n\n  /**\n   * Select resources by resource type names.\n   */\n  private selectByResourceTypes = (\n    selector: { types: string[] },\n    resources: ProcessedResources\n  ): Result<string[]> => {\n    if (!selector.types || selector.types.length === 0) {\n      return fail('Resource types array cannot be empty');\n    }\n\n    const typeSet = new Set(selector.types);\n    const matchingIds: string[] = [];\n\n    // Iterate through all resources and check their types\n    resources.summary.resourceIds.forEach((resourceId) => {\n      try {\n        // Get the resource from the resolver to check its type\n        const resourceResult = resources.resolver.resourceManager.getBuiltResource(resourceId);\n        if (resourceResult.isSuccess()) {\n          const resource = resourceResult.value;\n          if (typeSet.has(resource.resourceType.key)) {\n            matchingIds.push(resourceId);\n          }\n        }\n      } catch {\n        // Skip resources that can't be accessed\n      }\n    });\n\n    return succeed(matchingIds);\n  };\n\n  /**\n   * Select resources by simple glob pattern matching.\n   * Supports * as wildcard character.\n   */\n  private selectByPattern = (\n    selector: { pattern: string },\n    resources: ProcessedResources\n  ): Result<string[]> => {\n    if (!selector.pattern) {\n      return fail('Pattern cannot be empty');\n    }\n\n    try {\n      // Convert glob pattern to regex\n      const regexPattern = selector.pattern\n        .replace(/[.+?^${}()|[\\]\\\\]/g, '\\\\$&') // Escape special regex chars\n        .replace(/\\*/g, '.*'); // Convert * to .*\n\n      const regex = new RegExp(`^${regexPattern}$`);\n      const matchingIds = resources.summary.resourceIds.filter((id) => regex.test(id));\n\n      return succeed(matchingIds);\n    } catch (error) {\n      return fail(`Invalid pattern: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  };\n\n  /**\n   * Select all available resources.\n   */\n  private selectAll = (_selector: {}, resources: ProcessedResources): Result<string[]> => {\n    return succeed([...resources.summary.resourceIds]);\n  };\n\n  /**\n   * Select resources using custom selector logic.\n   */\n  private selectCustom = (\n    selector: { selector: CustomResourceSelector },\n    resources: ProcessedResources\n  ): Result<string[]> => {\n    if (!selector.selector) {\n      return fail('Custom selector configuration is required');\n    }\n\n    try {\n      const selectedIds = selector.selector.select(resources);\n\n      // Validate that all returned IDs exist in the resource collection\n      const availableIds = new Set(resources.summary.resourceIds);\n      const validIds = selectedIds.filter((id) => availableIds.has(id));\n\n      if (validIds.length !== selectedIds.length) {\n        const invalidIds = selectedIds.filter((id) => !availableIds.has(id));\n        console.warn(`Custom selector returned invalid resource IDs: ${invalidIds.join(', ')}`);\n      }\n\n      return succeed(validIds);\n    } catch (error) {\n      return fail(`Custom selector failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  };\n}\n\n/**\n * Default resource selector instance for use throughout the application.\n * @public\n */\nexport const defaultResourceSelector = new ResourceSelector();\n\n/**\n * Utility function to select resources using the default selector.\n *\n * @param selector - Resource selector configuration\n * @param resources - Processed resources to select from\n * @returns Result containing array of selected resource IDs\n * @public\n */\nexport function selectResources(\n  selector: GridResourceSelector,\n  resources: ProcessedResources\n): Result<string[]> {\n  return defaultResourceSelector.select(selector, resources);\n}\n"]}