{"version":3,"file":"factories.js","sourceRoot":"","sources":["../../../src/utils/observability/factories.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;;AAaH,8EAOC;AASD,wEAOC;AAlCD,4CAAwC;AAExC,uDAA4F;AAE5F;;;;;;GAMG;AACH,SAAgB,iCAAiC,CAC/C,eAAyC,MAAM,EAC/C,eAAyC,MAAM;IAE/C,MAAM,IAAI,GAAG,IAAI,kBAAO,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACrD,MAAM,IAAI,GAAG,IAAI,mCAAiB,CAAC,YAAY,CAAC,CAAC;IACjD,OAAO,IAAI,sCAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,8BAA8B,CAC5C,eAAyC,QAAQ,EACjD,eAAyC,QAAQ;IAEjD,MAAM,IAAI,GAAG,IAAI,kBAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAClD,MAAM,IAAI,GAAG,IAAI,gCAAc,CAAC,YAAY,CAAC,CAAC;IAC9C,OAAO,IAAI,sCAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED;;;GAGG;AACU,QAAA,2BAA2B,GAAG,iCAAiC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE7F;;;GAGG;AACU,QAAA,wBAAwB,GAAG,8BAA8B,EAAE,CAAC","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Logging } from '@fgv/ts-utils';\nimport type { IObservabilityContext } from './interfaces';\nimport { ObservabilityContext, ConsoleUserLogger, NoOpUserLogger } from './implementations';\n\n/**\n * Creates a console-based observability context for development and debugging.\n * @param diagLogLevel - Log level for diagnostic messages.\n * @param userLogLevel - Log level for user messages.\n * @returns A new observability context with console loggers.\n * @public\n */\nexport function createConsoleObservabilityContext(\n  diagLogLevel: Logging.ReporterLogLevel = 'info',\n  userLogLevel: Logging.ReporterLogLevel = 'info'\n): IObservabilityContext {\n  const diag = new Logging.ConsoleLogger(diagLogLevel);\n  const user = new ConsoleUserLogger(userLogLevel);\n  return new ObservabilityContext(diag, user);\n}\n\n/**\n * Creates a no-op observability context that suppresses all logging.\n * @param diagLogLevel - Log level for diagnostic messages.\n * @param userLogLevel - Log level for user messages.\n * @returns A new observability context with no-op loggers.\n * @public\n */\nexport function createNoOpObservabilityContext(\n  diagLogLevel: Logging.ReporterLogLevel = 'silent',\n  userLogLevel: Logging.ReporterLogLevel = 'silent'\n): IObservabilityContext {\n  const diag = new Logging.NoOpLogger(diagLogLevel);\n  const user = new NoOpUserLogger(userLogLevel);\n  return new ObservabilityContext(diag, user);\n}\n\n/**\n * Default console-only observability context for general use.\n * @public\n */\nexport const DefaultObservabilityContext = createConsoleObservabilityContext('info', 'info');\n\n/**\n * Test observability context with no-op loggers.\n * @public\n */\nexport const TestObservabilityContext = createNoOpObservabilityContext();\n"]}