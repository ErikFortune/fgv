{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/utils/observability/interfaces.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport type { Logging, Success } from '@fgv/ts-utils';\n\n/**\n * User logger interface that extends ILogger with success method for UI feedback.\n * @public\n */\nexport interface IUserLogger extends Logging.ILogger {\n  /**\n   * Logs a success message for user feedback.\n   * @param message - The message to log.\n   * @param parameters - The parameters to log.\n   * @returns `Success` with the logged message if the level is enabled, or\n   * `Success` with `undefined` if the message is suppressed.\n   */\n  success(message?: unknown, ...parameters: unknown[]): Success<string | undefined>;\n}\n\n/**\n * Observability context that provides both diagnostic and user logging capabilities.\n * @public\n */\nexport interface IObservabilityContext {\n  /**\n   * Diagnostic logger for internal system diagnostics.\n   */\n  readonly diag: Logging.ILogger;\n\n  /**\n   * User logger for user-facing messages and feedback.\n   */\n  readonly user: IUserLogger;\n}\n"]}