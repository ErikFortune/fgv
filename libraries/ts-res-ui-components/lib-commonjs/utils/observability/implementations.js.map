{"version":3,"file":"implementations.js","sourceRoot":"","sources":["../../../src/utils/observability/implementations.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;GAoBG;;;AAEH,4CAA2E;AAG3E;;;GAGG;AACH,MAAa,iBAAkB,SAAQ,kBAAO,CAAC,UAAU;IACvD;;;OAGG;IACH,YAAmB,QAAmC;QACpD,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,OAAiB,EAAE,GAAG,UAAqB;QACxD,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACO,IAAI,CAAC,OAAe,EAAE,KAAsB;QACpD,QAAQ,KAAK,EAAE,CAAC;YACd,KAAK,OAAO;gBACV,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACvB,MAAM;YACR,KAAK,SAAS;gBACZ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtB,MAAM;YACR,KAAK,MAAM;gBACT,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtB,MAAM;YACR;gBACE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM;QACV,CAAC;QACD,OAAO,IAAA,kBAAO,EAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;CACF;AApCD,8CAoCC;AAED;;;GAGG;AACH,MAAa,cAAe,SAAQ,kBAAO,CAAC,UAAU;IACpD;;;OAGG;IACH,YAAmB,QAAmC;QACpD,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,OAAiB,EAAE,GAAG,UAAqB;QACxD,OAAO,IAAA,kBAAO,EAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACO,IAAI,CAAC,OAAe,EAAE,OAAwB;QACtD,QAAQ;QACR,OAAO,IAAA,kBAAO,EAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;CACF;AAvBD,wCAuBC;AAED;;;GAGG;AACH,MAAa,oBAAoB;IAW/B;;;;OAIG;IACH,YAAmB,IAAqB,EAAE,IAAiB;QACzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF;AApBD,oDAoBC","sourcesContent":["/*\n * Copyright (c) 2025 Erik Fortune\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Logging, MessageLogLevel, Success, succeed } from '@fgv/ts-utils';\nimport type { IUserLogger, IObservabilityContext } from './interfaces';\n\n/**\n * Console-based user logger that extends diagnostic logging with success method.\n * @public\n */\nexport class ConsoleUserLogger extends Logging.LoggerBase implements IUserLogger {\n  /**\n   * Creates a new console user logger.\n   * @param logLevel - The level of logging to be used.\n   */\n  public constructor(logLevel?: Logging.ReporterLogLevel) {\n    super(logLevel);\n  }\n\n  /**\n   * {@inheritDoc ObservabilityTools.IUserLogger.success}\n   */\n  public success(message?: unknown, ...parameters: unknown[]): Success<string | undefined> {\n    return this.log('info', message, ...parameters);\n  }\n\n  /**\n   * implements base class _log.\n   */\n  protected _log(message: string, level: MessageLogLevel): Success<string | undefined> {\n    switch (level) {\n      case 'error':\n        console.error(message);\n        break;\n      case 'warning':\n        console.warn(message);\n        break;\n      case 'info':\n        console.info(message);\n        break;\n      default:\n        console.log(message);\n        break;\n    }\n    return succeed(message);\n  }\n}\n\n/**\n * No-op user logger that suppresses all output.\n * @public\n */\nexport class NoOpUserLogger extends Logging.LoggerBase implements IUserLogger {\n  /**\n   * Creates a new no-op user logger.\n   * @param logLevel - The level of logging to be used.\n   */\n  public constructor(logLevel?: Logging.ReporterLogLevel) {\n    super(logLevel);\n  }\n\n  /**\n   * {@inheritDoc ObservabilityTools.IUserLogger.success}\n   */\n  public success(message?: unknown, ...parameters: unknown[]): Success<string | undefined> {\n    return succeed(undefined);\n  }\n\n  /**\n   * Implements base class _log method.\n   */\n  protected _log(message: string, __level: MessageLogLevel): Success<string | undefined> {\n    // no-op\n    return succeed(message);\n  }\n}\n\n/**\n * Observability context that provides both diagnostic and user logging capabilities.\n * @public\n */\nexport class ObservabilityContext implements IObservabilityContext {\n  /**\n   * {@inheritDoc ObservabilityTools.IObservabilityContext.diag}\n   */\n  public readonly diag: Logging.ILogger;\n\n  /**\n   * {@inheritDoc ObservabilityTools.IObservabilityContext.user}\n   */\n  public readonly user: IUserLogger;\n\n  /**\n   * Creates a new observability context.\n   * @param diag - The diagnostic logger.\n   * @param user - The user logger.\n   */\n  public constructor(diag: Logging.ILogger, user: IUserLogger) {\n    this.diag = diag;\n    this.user = user;\n  }\n}\n"]}