{"version":3,"file":"downloadHelper.js","sourceRoot":"","sources":["../../src/utils/downloadHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail, captureResult } from '@fgv/ts-utils';\n\n/**\n * Download utilities namespace for file export functionality\n * @public\n */\nexport namespace DownloadUtils {\n  /**\n   * Options for customizing file downloads\n   * @public\n   */\n  export interface DownloadOptions {\n    /** Base filename (without extension). If not provided, uses 'ts-res-export' */\n    baseFilename?: string;\n    /** File extension (without dot). Defaults to 'json' */\n    extension?: string;\n    /** Include timestamp in filename. Defaults to true */\n    includeTimestamp?: boolean;\n    /** Custom timestamp format. If not provided, uses ISO format with colons replaced */\n    timestampFormat?: string;\n    /** MIME type for the blob. Defaults to 'application/json' for json, 'text/plain' for others */\n    mimeType?: string;\n    /** Custom filename transformer function */\n    filenameTransformer?: (baseFilename: string) => string;\n  }\n\n  /**\n   * Creates a timestamp string suitable for filenames\n   * @public\n   */\n  export function createTimestamp(customFormat?: string): string {\n    if (customFormat) {\n      return customFormat;\n    }\n    return new Date().toISOString().replace(/[:]/g, '-').split('.')[0];\n  }\n\n  /**\n   * Generates a filename based on options\n   * @public\n   */\n  export function generateFilename(\n    baseFilename: string,\n    type?: string,\n    options: DownloadOptions = {}\n  ): Result<string> {\n    if (!baseFilename || !baseFilename.trim()) {\n      return fail('Base filename cannot be empty');\n    }\n\n    const { extension = 'json', includeTimestamp = true, timestampFormat, filenameTransformer } = options;\n\n    let filename = baseFilename.trim();\n\n    // Add type if provided\n    if (type) {\n      filename = `${filename}-${type}`;\n    }\n\n    // Add timestamp if requested\n    if (includeTimestamp) {\n      const timestamp = createTimestamp(timestampFormat);\n      filename = `${filename}-${timestamp}`;\n    }\n\n    // Apply custom transformer if provided\n    if (filenameTransformer) {\n      filename = filenameTransformer(filename);\n    }\n\n    // Add extension\n    filename = `${filename}.${extension}`;\n\n    return succeed(filename);\n  }\n\n  /**\n   * Downloads data as a file using the browser's download mechanism\n   * @public\n   */\n  export function downloadFile(data: unknown, type: string, options: DownloadOptions = {}): Result<void> {\n    const { baseFilename = 'ts-res-export', extension = 'json', mimeType } = options;\n\n    // Generate filename\n    const filenameResult = generateFilename(baseFilename, type, options);\n    if (filenameResult.isFailure()) {\n      return fail(`Failed to generate filename: ${filenameResult.message}`);\n    }\n\n    return captureResult(() => {\n      // Convert data to string\n      let content: string;\n      if (typeof data === 'string') {\n        content = data;\n      } else if (extension === 'json') {\n        content = JSON.stringify(data, null, 2);\n      } else {\n        content = String(data);\n      }\n\n      // Determine MIME type\n      const finalMimeType = mimeType ?? (extension === 'json' ? 'application/json' : 'text/plain');\n\n      // Create blob and download\n      const blob = new Blob([content], { type: finalMimeType });\n      const url = URL.createObjectURL(blob);\n\n      // Create temporary download link\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filenameResult.value;\n      link.style.display = 'none';\n\n      // Trigger download\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }).withErrorFormat((error) => `Failed to download file: ${error}`);\n  }\n\n  /**\n   * Downloads JSON data with ts-res specific defaults\n   * @public\n   */\n  export function downloadTsResJson(data: unknown, type: string): Result<void> {\n    return downloadFile(data, type, {\n      baseFilename: 'ts-res',\n      extension: 'json',\n      includeTimestamp: true,\n      mimeType: 'application/json'\n    });\n  }\n\n  /**\n   * Downloads a bundle with enhanced naming\n   * @public\n   */\n  export function downloadBundle(data: unknown, resourceCount?: number, configName?: string): Result<void> {\n    const options: DownloadOptions = {\n      baseFilename: 'ts-res-bundle',\n      extension: 'json',\n      includeTimestamp: true,\n      mimeType: 'application/json',\n      filenameTransformer: (base) => {\n        let enhanced = base;\n\n        // Add resource count if available\n        if (resourceCount !== undefined && resourceCount > 0) {\n          enhanced = `${enhanced}-${resourceCount}res`;\n        }\n\n        // Add config name if available\n        if (configName) {\n          const cleanConfigName = configName.replace(/[^a-zA-Z0-9-_]/g, '-');\n          enhanced = `${enhanced}-${cleanConfigName}`;\n        }\n\n        return enhanced;\n      }\n    };\n\n    return downloadFile(data, '', options);\n  }\n\n  /**\n   * Downloads resource data with enhanced naming\n   * @public\n   */\n  export function downloadResources(\n    data: unknown,\n    resourceCount?: number,\n    collectionName?: string\n  ): Result<void> {\n    const options: DownloadOptions = {\n      baseFilename: 'ts-res-resources',\n      extension: 'json',\n      includeTimestamp: true,\n      mimeType: 'application/json',\n      filenameTransformer: (base) => {\n        let enhanced = base;\n\n        // Add resource count if available\n        if (resourceCount !== undefined && resourceCount > 0) {\n          enhanced = `${enhanced}-${resourceCount}items`;\n        }\n\n        // Add collection name if available\n        if (collectionName) {\n          const cleanName = collectionName.replace(/[^a-zA-Z0-9-_]/g, '-');\n          enhanced = `${enhanced}-${cleanName}`;\n        }\n\n        return enhanced;\n      }\n    };\n\n    return downloadFile(data, '', options);\n  }\n\n  /**\n   * Downloads compiled resources with specific naming\n   * @public\n   */\n  export function downloadCompiledResources(data: unknown, resourceCount?: number): Result<void> {\n    return downloadFile(data, 'compiled', {\n      baseFilename: 'ts-res',\n      extension: 'json',\n      includeTimestamp: true,\n      mimeType: 'application/json',\n      filenameTransformer: (base) => {\n        if (resourceCount !== undefined && resourceCount > 0) {\n          return `${base}-${resourceCount}res`;\n        }\n        return base;\n      }\n    });\n  }\n\n  /**\n   * Downloads source resources with specific naming\n   * @public\n   */\n  export function downloadSourceResources(data: unknown, resourceCount?: number): Result<void> {\n    return downloadFile(data, 'source', {\n      baseFilename: 'ts-res',\n      extension: 'json',\n      includeTimestamp: true,\n      mimeType: 'application/json',\n      filenameTransformer: (base) => {\n        if (resourceCount !== undefined && resourceCount > 0) {\n          return `${base}-${resourceCount}res`;\n        }\n        return base;\n      }\n    });\n  }\n}\n"]}