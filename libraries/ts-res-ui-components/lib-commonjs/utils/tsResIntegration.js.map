{"version":3,"file":"tsResIntegration.js","sourceRoot":"","sources":["../../src/utils/tsResIntegration.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail, FileTree } from '@fgv/ts-utils';\nimport {\n  QualifierTypes,\n  Qualifiers,\n  ResourceTypes,\n  Resources,\n  Import,\n  Runtime,\n  ResourceJson,\n  Config\n} from '@fgv/ts-res';\nimport { ImportedDirectory, ImportedFile } from '../types';\n\n/**\n * Get the default system configuration from ts-res library\n */\nexport function getDefaultSystemConfiguration(): Config.Model.ISystemConfiguration {\n  const defaultResult = Config.getPredefinedDeclaration('default');\n  if (defaultResult.isSuccess()) {\n    return defaultResult.value;\n  }\n\n  // Fallback configuration if predefined default is not available\n  return {\n    name: 'Browser Default Configuration',\n    description: 'Fallback default configuration for ts-res browser tool',\n    qualifierTypes: [\n      {\n        name: 'language',\n        systemType: 'language',\n        configuration: {\n          allowContextList: true\n        }\n      },\n      {\n        name: 'territory',\n        systemType: 'territory',\n        configuration: {\n          allowContextList: false\n        }\n      }\n    ],\n    qualifiers: [\n      {\n        name: 'currentTerritory',\n        token: 'geo',\n        typeName: 'territory',\n        defaultPriority: 850\n      },\n      {\n        name: 'language',\n        token: 'lang',\n        typeName: 'language',\n        defaultPriority: 800\n      }\n    ],\n    resourceTypes: [\n      {\n        name: 'json',\n        typeName: 'json'\n      }\n    ]\n  };\n}\n\n/**\n * Create a simple context provider from qualifier values\n */\nexport function createSimpleContext(\n  qualifiers: Qualifiers.IReadOnlyQualifierCollector,\n  values: Record<string, string | undefined>\n): Result<Runtime.ValidatingSimpleContextQualifierProvider> {\n  try {\n    return Runtime.ValidatingSimpleContextQualifierProvider.create({\n      qualifiers\n    });\n  } catch (error) {\n    return fail(`Failed to create context: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Convert ImportedDirectory to FileTree format\n */\nexport function convertImportedDirectoryToFileTree(directory: ImportedDirectory): FileTree.FileTree {\n  // Convert files to IInMemoryFile format and flatten the directory structure\n  const flattenFiles = (dir: ImportedDirectory, parentPath: string = ''): Array<{ path: string; contents: string }> => {\n    const files: Array<{ path: string; contents: string }> = [];\n    \n    // Add files from current directory\n    if (dir.files) {\n      dir.files.forEach(file => {\n        const filePath = parentPath ? `${parentPath}/${file.name}` : file.name;\n        files.push({\n          path: filePath,\n          contents: file.content\n        });\n      });\n    }\n    \n    // Recursively process subdirectories\n    if (dir.subdirectories) {\n      dir.subdirectories.forEach(subdir => {\n        const subdirPath = parentPath ? `${parentPath}/${subdir.name}` : subdir.name;\n        files.push(...flattenFiles(subdir, subdirPath));\n      });\n    }\n    \n    return files;\n  };\n  \n  const inMemoryFiles = flattenFiles(directory);\n  \n  // Use ts-res's inMemory FileTree utility\n  const fileTreeResult = FileTree.inMemory(inMemoryFiles);\n  if (fileTreeResult.isFailure()) {\n    throw new Error(`Failed to create file tree: ${fileTreeResult.message}`);\n  }\n  \n  return fileTreeResult.value;\n}\n\n/**\n * Create ts-res system from configuration\n */\nexport function createTsResSystemFromConfig(\n  systemConfig?: Config.Model.ISystemConfiguration\n): Result<{\n  qualifierTypes: QualifierTypes.ReadOnlyQualifierTypeCollector;\n  qualifiers: Qualifiers.IReadOnlyQualifierCollector;\n  resourceTypes: ResourceTypes.ReadOnlyResourceTypeCollector;\n  resourceManager: Resources.ResourceManagerBuilder;\n  importManager: Import.ImportManager;\n  contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n}> {\n  const configToUse = systemConfig ?? getDefaultSystemConfiguration();\n\n  return Config.SystemConfiguration.create(configToUse).onSuccess((systemConfiguration) => {\n    try {\n      // Set up resource manager\n      const resourceManager = Resources.ResourceManagerBuilder.create({\n        qualifiers: systemConfiguration.qualifiers,\n        resourceTypes: systemConfiguration.resourceTypes\n      }).orThrow();\n\n      // Set up import manager\n      const importManager = Import.ImportManager.create({\n        resources: resourceManager\n      }).orThrow();\n\n      // Set up context qualifier provider\n      const contextQualifierProvider = Runtime.ValidatingSimpleContextQualifierProvider.create({\n        qualifiers: systemConfiguration.qualifiers\n      }).orThrow();\n\n      return succeed({\n        qualifierTypes: systemConfiguration.qualifierTypes,\n        qualifiers: systemConfiguration.qualifiers,\n        resourceTypes: systemConfiguration.resourceTypes,\n        resourceManager,\n        importManager,\n        contextQualifierProvider\n      });\n    } catch (error) {\n      return fail(\n        `Failed to create ts-res system: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  });\n}\n\n/**\n * Process imported files using the ts-res system\n */\nexport function processImportedFiles(\n  files: ImportedFile[],\n  systemConfig?: Config.Model.ISystemConfiguration\n): Result<{\n  system: {\n    qualifierTypes: QualifierTypes.ReadOnlyQualifierTypeCollector;\n    qualifiers: Qualifiers.IReadOnlyQualifierCollector;\n    resourceTypes: ResourceTypes.ReadOnlyResourceTypeCollector;\n    resourceManager: Resources.ResourceManagerBuilder;\n    importManager: Import.ImportManager;\n    contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n  };\n  compiledCollection: ResourceJson.Compiled.ICompiledResourceCollection;\n  resolver: Runtime.ResourceResolver;\n  resourceCount: number;\n  summary: {\n    totalResources: number;\n    resourceIds: string[];\n    errorCount: number;\n    warnings: string[];\n  };\n}> {\n  if (files.length === 0) {\n    return fail('No files provided for processing');\n  }\n\n  const systemResult = createTsResSystemFromConfig(systemConfig);\n  if (systemResult.isFailure()) {\n    return systemResult as any; // Type assertion needed for return type compatibility\n  }\n  \n  const tsResSystem = systemResult.value;\n  \n  // Convert ImportedFile[] to IInMemoryFile[] format\n  const inMemoryFiles = files.map((file) => ({\n    path: file.path || file.name,\n    contents: file.content\n  }));\n\n  return (FileTree.inMemory(inMemoryFiles) as any)\n    .onSuccess((fileTree: any) => {\n      return (Import.ImportManager.create({\n        fileTree,\n        resources: tsResSystem.resourceManager\n      }) as any);\n    })\n      .onSuccess((importManager: any) => {\n        // Import each file using its filesystem path\n        for (const file of files) {\n          const importResult = importManager.importFromFileSystem(file.path || file.name);\n          if (importResult.isFailure()) {\n            return fail(`Failed to import file ${file.path || file.name}: ${importResult.message}`);\n          }\n        }\n        \n        // Finalize processing\n        const updatedSystem = {\n          ...tsResSystem,\n          importManager\n        };\n        return finalizeProcessing(updatedSystem);\n      })\n      .withErrorFormat((message: string) => `processImportedFiles failed: ${message}`);\n}\n\n/**\n * Process imported directory using the ts-res system\n */\nexport function processImportedDirectory(\n  directory: ImportedDirectory,\n  systemConfig?: Config.Model.ISystemConfiguration\n): Result<{\n  system: {\n    qualifierTypes: QualifierTypes.ReadOnlyQualifierTypeCollector;\n    qualifiers: Qualifiers.IReadOnlyQualifierCollector;\n    resourceTypes: ResourceTypes.ReadOnlyResourceTypeCollector;\n    resourceManager: Resources.ResourceManagerBuilder;\n    importManager: Import.ImportManager;\n    contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n  };\n  compiledCollection: ResourceJson.Compiled.ICompiledResourceCollection;\n  resolver: Runtime.ResourceResolver;\n  resourceCount: number;\n  summary: {\n    totalResources: number;\n    resourceIds: string[];\n    errorCount: number;\n    warnings: string[];\n  };\n}> {\n  const systemResult = createTsResSystemFromConfig(systemConfig);\n  if (systemResult.isFailure()) {\n    return systemResult as any; // Type assertion needed for return type compatibility\n  }\n  \n  const tsResSystem = systemResult.value;\n  \n  // Convert directory to file tree\n  const fileTree = convertImportedDirectoryToFileTree(directory);\n  \n  return (Import.ImportManager.create({\n    fileTree,\n    resources: tsResSystem.resourceManager\n  }) as any).onSuccess((importManager: any) => {\n      // Import from root path\n      const importResult = importManager.importFromFileSystem('/');\n      if (importResult.isFailure()) {\n        return fail(`Failed to import directory ${directory.name}: ${importResult.message}`);\n      }\n\n      // Finalize processing\n      const updatedSystem = {\n        ...tsResSystem,\n        importManager\n      };\n      return finalizeProcessing(updatedSystem);\n    })\n    .withErrorFormat((message: string) => `processImportedDirectory failed: ${message}`);\n}\n\n/**\n * Finalizes processing and creates compiled resources\n */\nfunction finalizeProcessing(system: {\n  qualifierTypes: QualifierTypes.ReadOnlyQualifierTypeCollector;\n  qualifiers: Qualifiers.IReadOnlyQualifierCollector;\n  resourceTypes: ResourceTypes.ReadOnlyResourceTypeCollector;\n  resourceManager: Resources.ResourceManagerBuilder;\n  importManager: Import.ImportManager;\n  contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n}): Result<{\n  system: typeof system;\n  compiledCollection: ResourceJson.Compiled.ICompiledResourceCollection;\n  resolver: Runtime.ResourceResolver;\n  resourceCount: number;\n  summary: {\n    totalResources: number;\n    resourceIds: string[];\n    errorCount: number;\n    warnings: string[];\n  };\n}> {\n  return system.resourceManager\n    .getCompiledResourceCollection({ includeMetadata: true })\n    .onSuccess((compiledCollection: ResourceJson.Compiled.ICompiledResourceCollection) => {\n      return Runtime.ResourceResolver.create({\n        resourceManager: system.resourceManager,\n        qualifierTypes: system.qualifierTypes,\n        contextQualifierProvider: system.contextQualifierProvider\n      }).onSuccess((resolver) => {\n        // Create summary\n        const resourceIds = Array.from(system.resourceManager.resources.keys());\n        const summary = {\n          totalResources: resourceIds.length,\n          resourceIds,\n          errorCount: 0,\n          warnings: []\n        };\n\n        return succeed({\n          system,\n          compiledCollection,\n          resolver,\n          resourceCount: resourceIds.length,\n          summary\n        });\n      });\n    })\n    .withErrorFormat((message: string) => `Failed to finalize processing: ${message}`);\n}"]}