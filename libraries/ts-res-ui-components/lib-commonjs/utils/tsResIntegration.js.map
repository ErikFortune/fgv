{"version":3,"file":"tsResIntegration.js","sourceRoot":"","sources":["../../src/utils/tsResIntegration.ts"],"names":[],"mappings":";;AAkBA,sEA0CC;AAMD,kDAOC;AAMD,gFA8CC;AAMD,kEAsDC;AAMD,oDAmDC;AAMD,4DA2GC;;AAnWD,4CAAgE;AAChE,wCASqB;AAErB,mFAA6D;AAE7D;;GAEG;AACH,gBAAgB;AAChB,SAAgB,6BAA6B;IAC3C,OAAO,eAAM,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;QAC1D,gEAAgE;QAChE,IAAI,EAAE,+BAA+B;QACrC,WAAW,EAAE,wDAAwD;QACrE,cAAc,EAAE;YACd;gBACE,IAAI,EAAE,UAAU;gBAChB,UAAU,EAAE,UAAU;gBACtB,aAAa,EAAE;oBACb,gBAAgB,EAAE,IAAI;iBACvB;aACF;YACD;gBACE,IAAI,EAAE,WAAW;gBACjB,UAAU,EAAE,WAAW;gBACvB,aAAa,EAAE;oBACb,gBAAgB,EAAE,KAAK;iBACxB;aACF;SACF;QACD,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,kBAAkB;gBACxB,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,WAAW;gBACrB,eAAe,EAAE,GAAG;aACrB;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,UAAU;gBACpB,eAAe,EAAE,GAAG;aACrB;SACF;QACD,aAAa,EAAE;YACb;gBACE,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,MAAM;aACjB;SACF;KACF,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,gBAAgB;AAChB,SAAgB,mBAAmB,CACjC,UAAkD,EAClD,MAA0C;IAE1C,OAAO,gBAAO,CAAC,wCAAwC,CAAC,MAAM,CAAC;QAC7D,UAAU;KACX,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC;AAC9D,CAAC;AAED;;GAEG;AACH,gBAAgB;AAChB,SAAgB,kCAAkC,CAChD,SAA4B,EAC5B,OAAiD,kBAAkB,CAAC,2BAA2B;IAE/F,4EAA4E;IAC5E,MAAM,YAAY,GAAG,CACnB,GAAsB,EACtB,aAAqB,EAAE,EACoB,EAAE;QAC7C,MAAM,KAAK,GAA8C,EAAE,CAAC;QAE5D,mCAAmC;QACnC,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACzB,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACvE,KAAK,CAAC,IAAI,CAAC;oBACT,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,IAAI,CAAC,OAAO;iBACvB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;QAED,qCAAqC;QACrC,IAAI,GAAG,CAAC,cAAc,EAAE,CAAC;YACvB,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACpC,MAAM,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;gBAC7E,KAAK,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IAEF,MAAM,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAE9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wEAAwE,EAAE;QACvF,aAAa,EAAE,SAAS,CAAC,IAAI;QAC7B,aAAa,EAAE,SAAS,CAAC,IAAI;QAC7B,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC;QACtC,UAAU,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,IAAI,CAAC;QACjD,mBAAmB,EAAE,aAAa,CAAC,MAAM;QACzC,WAAW,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;KAC1D,CAAC,CAAC;IAEH,yCAAyC;IACzC,OAAO,mBAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,+BAA+B,GAAG,EAAE,CAAC,CAAC;AACjG,CAAC;AAED;;GAEG;AACH,gBAAgB;AAChB,SAAgB,2BAA2B,CACzC,YAAgD,EAChD,oBAGC,EACD,mBAGC;IASD,MAAM,WAAW,GAAG,YAAY,IAAI,6BAA6B,EAAE,CAAC;IAEpE,OAAO,eAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,WAAW,EAAE;QACpD,oBAAoB;QACpB,mBAAmB;KACpB,CAAC;SACC,SAAS,CAAC,CAAC,mBAAmB,EAAE,EAAE;QACjC,OAAO,kBAAS,CAAC,sBAAsB,CAAC,MAAM,CAAC;YAC7C,UAAU,EAAE,mBAAmB,CAAC,UAAU;YAC1C,aAAa,EAAE,mBAAmB,CAAC,aAAa;SACjD,CAAC;aACC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,sCAAsC,CAAC,EAAE,CAAC;aACjE,SAAS,CAAC,CAAC,eAAe,EAAE,EAAE;YAC7B,OAAO,eAAM,CAAC,aAAa,CAAC,MAAM,CAAC;gBACjC,SAAS,EAAE,eAAe;aAC3B,CAAC;iBACC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,oCAAoC,CAAC,EAAE,CAAC;iBAC/D,SAAS,CAAC,CAAC,aAAa,EAAE,EAAE;gBAC3B,OAAO,gBAAO,CAAC,wCAAwC,CAAC,MAAM,CAAC;oBAC7D,UAAU,EAAE,mBAAmB,CAAC,UAAU;iBAC3C,CAAC;qBACC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gDAAgD,CAAC,EAAE,CAAC;qBAC3E,SAAS,CAAC,CAAC,wBAAwB,EAAE,EAAE;oBACtC,OAAO,IAAA,kBAAO,EAAC;wBACb,cAAc,EAAE,mBAAmB,CAAC,cAAc;wBAClD,UAAU,EAAE,mBAAmB,CAAC,UAAU;wBAC1C,aAAa,EAAE,mBAAmB,CAAC,aAAa;wBAChD,eAAe;wBACf,aAAa;wBACb,wBAAwB;qBACzB,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;SACD,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,mCAAmC,CAAC,EAAE,CAAC,CAAC;AACpE,CAAC;AAED;;GAEG;AACH,gBAAgB;AAChB,SAAgB,oBAAoB,CAClC,KAAqB,EACrB,YAAgD,EAChD,oBAGC,EACD,mBAGC,EACD,OAAiD,kBAAkB,CAAC,2BAA2B;IAE/F,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,OAAO,IAAA,eAAI,EAAC,kCAAkC,CAAC,CAAC;IAClD,CAAC;IAED,OAAO,2BAA2B,CAAC,YAAY,EAAE,oBAAoB,EAAE,mBAAmB,CAAC;SACxF,SAAS,CAA6B,CAAC,WAAW,EAAE,EAAE;QACrD,mDAAmD;QACnD,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACzC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI;YAC5B,QAAQ,EAAE,IAAI,CAAC,OAAO;SACvB,CAAC,CAAC,CAAC;QAEJ,OAAO,mBAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC;aACpC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YACtB,OAAO,eAAM,CAAC,aAAa,CAAC,MAAM,CAAC;gBACjC,QAAQ;gBACR,SAAS,EAAE,WAAW,CAAC,eAAe;aACvC,CAAC,CAAC;QACL,CAAC,CAAC;aACD,SAAS,CAAC,CAAC,aAAa,EAAE,EAAE;YAC3B,6CAA6C;YAC7C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,YAAY,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChF,IAAI,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC;oBAC7B,OAAO,IAAA,eAAI,EAAC,yBAAyB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1F,CAAC;YACH,CAAC;YAED,sBAAsB;YACtB,MAAM,aAAa,GAAG;gBACpB,GAAG,WAAW;gBACd,aAAa;aACd,CAAC;YACF,MAAM,WAAW,GAAG,YAAY,IAAI,6BAA6B,EAAE,CAAC;YACpE,OAAO,kBAAkB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;SACD,eAAe,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,gCAAgC,OAAO,EAAE,CAAC,CAAC;AAC7E,CAAC;AAED;;GAEG;AACH,gBAAgB;AAChB,SAAgB,wBAAwB,CACtC,SAA4B,EAC5B,YAAgD,EAChD,oBAGC,EACD,mBAGC,EACD,OAAiD,kBAAkB,CAAC,2BAA2B;IAE/F,OAAO,2BAA2B,CAAC,YAAY,EAAE,oBAAoB,EAAE,mBAAmB,CAAC;SACxF,SAAS,CAA6B,CAAC,WAAW,EAAE,EAAE;QACrD,iCAAiC;QACjC,MAAM,QAAQ,GAAG,kCAAkC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAErE,OAAO,eAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YACjC,QAAQ;YACR,SAAS,EAAE,WAAW,CAAC,eAAe;SACvC,CAAC,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,EAAE;YAC7B,gDAAgD;YAChD,oEAAoE;YACpE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,2DAA2D,CAAC,CAAC;YAE5E,MAAM,YAAY,GAAG,aAAa,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC7D,IAAI,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;gBAEzF,yDAAyD;gBACzD,6DAA6D;gBAC7D,IAAI,aAAa,GAAG,CAAC,CAAC;gBACtB,MAAM,aAAa,GAA2C,EAAE,CAAC;gBAEjE,MAAM,eAAe,GAAG,CAAC,OAAe,EAAQ,EAAE;oBAChD,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBACjD,IAAI,SAAS,CAAC,SAAS,EAAE,EAAE,CAAC;wBAC1B,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC;wBAC5B,MAAM,cAAc,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;wBACzC,IAAI,cAAc,CAAC,SAAS,EAAE,EAAE,CAAC;4BAC/B,KAAK,MAAM,KAAK,IAAI,cAAc,CAAC,KAAK,EAAE,CAAC;gCACzC,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;oCAC1D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;oCAC3E,MAAM,gBAAgB,GAAG,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;oCAChF,IAAI,gBAAgB,CAAC,SAAS,EAAE,EAAE,CAAC;wCACjC,aAAa,EAAE,CAAC;wCAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4CAA4C,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;oCACnF,CAAC;yCAAM,CAAC;wCACN,IAAI,CAAC,IAAI,CAAC,IAAI,CACZ,uCAAuC,KAAK,CAAC,YAAY,KAAK,gBAAgB,CAAC,OAAO,EAAE,CACzF,CAAC;wCACF,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,EAAE,KAAK,EAAE,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;oCACpF,CAAC;gCACH,CAAC;qCAAM,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;oCACtC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gCACtC,CAAC;4BACH,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC,CAAC;gBAEF,kBAAkB;gBAClB,eAAe,CAAC,GAAG,CAAC,CAAC;gBAErB,iCAAiC;gBACjC,IAAI,aAAa,KAAK,CAAC,EAAE,CAAC;oBACxB,eAAe,CAAC,EAAE,CAAC,CAAC;gBACtB,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gDAAgD,aAAa,QAAQ,CAAC,CAAC;gBAEtF,IAAI,aAAa,KAAK,CAAC,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACpD,oCAAoC;oBACpC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAoB,CAAC;oBACjD,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;wBACxC,iEAAiE;wBACjE,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;wBACvC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;4BACjC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;wBAClC,CAAC;wBACD,YAAY,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1C,CAAC,CAAC,CAAC;oBAEH,IAAI,YAAY,GAAG,oEAAoE,CAAC;oBACxF,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;wBACpC,YAAY,IAAI,KAAK,KAAK,KAAK,KAAK,CAAC,MAAM,QAAQ,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;oBACtF,CAAC,CAAC,CAAC;oBAEH,OAAO,IAAA,eAAI,EAAC,YAAY,CAAC,CAAC;gBAC5B,CAAC;qBAAM,IAAI,aAAa,KAAK,CAAC,EAAE,CAAC;oBAC/B,OAAO,IAAA,eAAI,EAAC,8BAA8B,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC9D,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8DAA8D,CAAC,CAAC;YACjF,CAAC;YAED,sBAAsB;YACtB,MAAM,aAAa,GAAG;gBACpB,GAAG,WAAW;gBACd,aAAa;aACd,CAAC;YACF,MAAM,WAAW,GAAG,YAAY,IAAI,6BAA6B,EAAE,CAAC;YACpE,OAAO,kBAAkB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;SACD,eAAe,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,oCAAoC,OAAO,EAAE,CAAC,CAAC;AACjF,CAAC;AAED;;GAEG;AACH,SAAS,kBAAkB,CACzB,MAOC,EACD,YAAgD;IAEhD,OAAO,MAAM,CAAC,eAAe;SAC1B,6BAA6B,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;SACxD,SAAS,CAAC,CAAC,kBAAqE,EAAE,EAAE;QACnF,sEAAsE;QACtE,OAAO,gBAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC;YACrC,eAAe,EAAE,MAAM,CAAC,eAAe;YACvC,cAAc,EAAE,MAAM,CAAC,cAAc;YACrC,wBAAwB,EAAE,MAAM,CAAC,wBAAwB;SAC1D,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YACxB,iBAAiB;YACjB,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;YACxE,MAAM,OAAO,GAAG;gBACd,cAAc,EAAE,WAAW,CAAC,MAAM;gBAClC,WAAW;gBACX,UAAU,EAAE,CAAC;gBACb,QAAQ,EAAE,EAAc;aACzB,CAAC;YAEF,OAAO,IAAA,kBAAO,EAAC;gBACb,MAAM;gBACN,kBAAkB;gBAClB,QAAQ;gBACR,aAAa,EAAE,WAAW,CAAC,MAAM;gBACjC,OAAO;gBACP,GAAG,CAAC,YAAY,IAAI,EAAE,mBAAmB,EAAE,YAAY,EAAE,CAAC;aAC3D,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;SACD,eAAe,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,kCAAkC,OAAO,EAAE,CAAC,CAAC;AAC/E,CAAC;AAED,uFAAuF;AACvF,yEAAyE","sourcesContent":["import { Result, succeed, fail, FileTree } from '@fgv/ts-utils';\nimport {\n  QualifierTypes,\n  Qualifiers,\n  ResourceTypes,\n  Resources,\n  Import,\n  Runtime,\n  ResourceJson,\n  Config\n} from '@fgv/ts-res';\nimport { ImportedDirectory, ImportedFile, ExtendedProcessedResources } from '../types';\nimport * as ObservabilityTools from '../utils/observability';\n\n/**\n * Get the default system configuration from ts-res library\n */\n/** @internal */\nexport function getDefaultSystemConfiguration(): Config.Model.ISystemConfiguration {\n  return Config.getPredefinedDeclaration('default').orDefault({\n    // Fallback configuration if predefined default is not available\n    name: 'Browser Default Configuration',\n    description: 'Fallback default configuration for ts-res browser tool',\n    qualifierTypes: [\n      {\n        name: 'language',\n        systemType: 'language',\n        configuration: {\n          allowContextList: true\n        }\n      },\n      {\n        name: 'territory',\n        systemType: 'territory',\n        configuration: {\n          allowContextList: false\n        }\n      }\n    ],\n    qualifiers: [\n      {\n        name: 'currentTerritory',\n        token: 'geo',\n        typeName: 'territory',\n        defaultPriority: 850\n      },\n      {\n        name: 'language',\n        token: 'lang',\n        typeName: 'language',\n        defaultPriority: 800\n      }\n    ],\n    resourceTypes: [\n      {\n        name: 'json',\n        typeName: 'json'\n      }\n    ]\n  });\n}\n\n/**\n * Create a simple context provider from qualifier values\n */\n/** @internal */\nexport function createSimpleContext(\n  qualifiers: Qualifiers.IReadOnlyQualifierCollector,\n  values: Record<string, string | undefined>\n): Result<Runtime.ValidatingSimpleContextQualifierProvider> {\n  return Runtime.ValidatingSimpleContextQualifierProvider.create({\n    qualifiers\n  }).withErrorFormat((e) => `Failed to create context: ${e}`);\n}\n\n/**\n * Convert ImportedDirectory to FileTree format\n */\n/** @internal */\nexport function convertImportedDirectoryToFileTree(\n  directory: ImportedDirectory,\n  o11y: ObservabilityTools.IObservabilityContext = ObservabilityTools.DefaultObservabilityContext\n): FileTree.FileTree {\n  // Convert files to IInMemoryFile format and flatten the directory structure\n  const flattenFiles = (\n    dir: ImportedDirectory,\n    parentPath: string = ''\n  ): Array<{ path: string; contents: string }> => {\n    const files: Array<{ path: string; contents: string }> = [];\n\n    // Add files from current directory\n    if (dir.files) {\n      dir.files.forEach((file) => {\n        const filePath = parentPath ? `${parentPath}/${file.name}` : file.name;\n        files.push({\n          path: filePath,\n          contents: file.content\n        });\n      });\n    }\n\n    // Recursively process subdirectories\n    if (dir.subdirectories) {\n      dir.subdirectories.forEach((subdir) => {\n        const subdirPath = parentPath ? `${parentPath}/${subdir.name}` : subdir.name;\n        files.push(...flattenFiles(subdir, subdirPath));\n      });\n    }\n\n    return files;\n  };\n\n  const inMemoryFiles = flattenFiles(directory);\n\n  o11y.diag.info('[convertImportedDirectoryToFileTree] Converting directory to FileTree:', {\n    directoryName: directory.name,\n    directoryPath: directory.path,\n    numFiles: directory.files?.length || 0,\n    numSubdirs: directory.subdirectories?.length || 0,\n    totalFlattenedFiles: inMemoryFiles.length,\n    sampleFiles: inMemoryFiles.slice(0, 3).map((f) => f.path)\n  });\n\n  // Use ts-res's inMemory FileTree utility\n  return FileTree.inMemory(inMemoryFiles).orThrow((msg) => `Failed to create file tree: ${msg}`);\n}\n\n/**\n * Create ts-res system from configuration\n */\n/** @internal */\nexport function createTsResSystemFromConfig(\n  systemConfig?: Config.Model.ISystemConfiguration,\n  qualifierTypeFactory?: Config.IConfigInitFactory<\n    QualifierTypes.Config.IAnyQualifierTypeConfig,\n    QualifierTypes.QualifierType\n  >,\n  resourceTypeFactory?: Config.IConfigInitFactory<\n    ResourceTypes.Config.IResourceTypeConfig,\n    ResourceTypes.ResourceType\n  >\n): Result<{\n  qualifierTypes: QualifierTypes.ReadOnlyQualifierTypeCollector;\n  qualifiers: Qualifiers.IReadOnlyQualifierCollector;\n  resourceTypes: ResourceTypes.ReadOnlyResourceTypeCollector;\n  resourceManager: Resources.ResourceManagerBuilder;\n  importManager: Import.ImportManager;\n  contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n}> {\n  const configToUse = systemConfig ?? getDefaultSystemConfiguration();\n\n  return Config.SystemConfiguration.create(configToUse, {\n    qualifierTypeFactory,\n    resourceTypeFactory\n  })\n    .onSuccess((systemConfiguration) => {\n      return Resources.ResourceManagerBuilder.create({\n        qualifiers: systemConfiguration.qualifiers,\n        resourceTypes: systemConfiguration.resourceTypes\n      })\n        .withErrorFormat((e) => `Failed to create resource manager: ${e}`)\n        .onSuccess((resourceManager) => {\n          return Import.ImportManager.create({\n            resources: resourceManager\n          })\n            .withErrorFormat((e) => `Failed to create import manager: ${e}`)\n            .onSuccess((importManager) => {\n              return Runtime.ValidatingSimpleContextQualifierProvider.create({\n                qualifiers: systemConfiguration.qualifiers\n              })\n                .withErrorFormat((e) => `Failed to create context qualifier provider: ${e}`)\n                .onSuccess((contextQualifierProvider) => {\n                  return succeed({\n                    qualifierTypes: systemConfiguration.qualifierTypes,\n                    qualifiers: systemConfiguration.qualifiers,\n                    resourceTypes: systemConfiguration.resourceTypes,\n                    resourceManager,\n                    importManager,\n                    contextQualifierProvider\n                  });\n                });\n            });\n        });\n    })\n    .withErrorFormat((e) => `Failed to create ts-res system: ${e}`);\n}\n\n/**\n * Process imported files using the ts-res system\n */\n/** @internal */\nexport function processImportedFiles(\n  files: ImportedFile[],\n  systemConfig?: Config.Model.ISystemConfiguration,\n  qualifierTypeFactory?: Config.IConfigInitFactory<\n    QualifierTypes.Config.IAnyQualifierTypeConfig,\n    QualifierTypes.QualifierType\n  >,\n  resourceTypeFactory?: Config.IConfigInitFactory<\n    ResourceTypes.Config.IResourceTypeConfig,\n    ResourceTypes.ResourceType\n  >,\n  o11y: ObservabilityTools.IObservabilityContext = ObservabilityTools.DefaultObservabilityContext\n): Result<ExtendedProcessedResources> {\n  if (files.length === 0) {\n    return fail('No files provided for processing');\n  }\n\n  return createTsResSystemFromConfig(systemConfig, qualifierTypeFactory, resourceTypeFactory)\n    .onSuccess<ExtendedProcessedResources>((tsResSystem) => {\n      // Convert ImportedFile[] to IInMemoryFile[] format\n      const inMemoryFiles = files.map((file) => ({\n        path: file.path || file.name,\n        contents: file.content\n      }));\n\n      return FileTree.inMemory(inMemoryFiles)\n        .onSuccess((fileTree) => {\n          return Import.ImportManager.create({\n            fileTree,\n            resources: tsResSystem.resourceManager\n          });\n        })\n        .onSuccess((importManager) => {\n          // Import each file using its filesystem path\n          for (const file of files) {\n            const importResult = importManager.importFromFileSystem(file.path || file.name);\n            if (importResult.isFailure()) {\n              return fail(`Failed to import file ${file.path || file.name}: ${importResult.message}`);\n            }\n          }\n\n          // Finalize processing\n          const updatedSystem = {\n            ...tsResSystem,\n            importManager\n          };\n          const configToUse = systemConfig ?? getDefaultSystemConfiguration();\n          return finalizeProcessing(updatedSystem, configToUse);\n        });\n    })\n    .withErrorFormat((message) => `processImportedFiles failed: ${message}`);\n}\n\n/**\n * Process imported directory using the ts-res system\n */\n/** @internal */\nexport function processImportedDirectory(\n  directory: ImportedDirectory,\n  systemConfig?: Config.Model.ISystemConfiguration,\n  qualifierTypeFactory?: Config.IConfigInitFactory<\n    QualifierTypes.Config.IAnyQualifierTypeConfig,\n    QualifierTypes.QualifierType\n  >,\n  resourceTypeFactory?: Config.IConfigInitFactory<\n    ResourceTypes.Config.IResourceTypeConfig,\n    ResourceTypes.ResourceType\n  >,\n  o11y: ObservabilityTools.IObservabilityContext = ObservabilityTools.DefaultObservabilityContext\n): Result<ExtendedProcessedResources> {\n  return createTsResSystemFromConfig(systemConfig, qualifierTypeFactory, resourceTypeFactory)\n    .onSuccess<ExtendedProcessedResources>((tsResSystem) => {\n      // Convert directory to file tree\n      const fileTree = convertImportedDirectoryToFileTree(directory, o11y);\n\n      return Import.ImportManager.create({\n        fileTree,\n        resources: tsResSystem.resourceManager\n      }).onSuccess((importManager) => {\n        // Simply try to import from the filesystem root\n        // The ImportManager will handle finding and importing all resources\n        o11y.diag.info('[tsResIntegration] Starting resource import from FileTree');\n\n        const importResult = importManager.importFromFileSystem('/');\n        if (importResult.isFailure()) {\n          o11y.diag.warn(`[tsResIntegration] Failed to import from root, trying individual files`);\n\n          // If root import fails, try to import files individually\n          // We'll recursively traverse the tree using the FileTree API\n          let importedCount = 0;\n          const failedImports: Array<{ file: string; error: string }> = [];\n\n          const importDirectory = (dirPath: string): void => {\n            const dirResult = fileTree.getDirectory(dirPath);\n            if (dirResult.isSuccess()) {\n              const dir = dirResult.value;\n              const childrenResult = dir.getChildren();\n              if (childrenResult.isSuccess()) {\n                for (const child of childrenResult.value) {\n                  if (child.type === 'file' && child.name.endsWith('.json')) {\n                    o11y.diag.info(`[tsResIntegration] Importing file: ${child.absolutePath}`);\n                    const fileImportResult = importManager.importFromFileSystem(child.absolutePath);\n                    if (fileImportResult.isSuccess()) {\n                      importedCount++;\n                      o11y.diag.info(`[tsResIntegration] Successfully imported ${child.absolutePath}`);\n                    } else {\n                      o11y.diag.warn(\n                        `[tsResIntegration] Failed to import ${child.absolutePath}: ${fileImportResult.message}`\n                      );\n                      failedImports.push({ file: child.absolutePath, error: fileImportResult.message });\n                    }\n                  } else if (child.type === 'directory') {\n                    importDirectory(child.absolutePath);\n                  }\n                }\n              }\n            }\n          };\n\n          // Start from root\n          importDirectory('/');\n\n          // Also try without leading slash\n          if (importedCount === 0) {\n            importDirectory('');\n          }\n\n          o11y.diag.info(`[tsResIntegration] Import complete. Imported ${importedCount} files`);\n\n          if (importedCount === 0 && failedImports.length > 0) {\n            // Create a summary of unique errors\n            const errorSummary = new Map<string, string[]>();\n            failedImports.forEach(({ file, error }) => {\n              // Extract the main error (e.g., \"invalid item: role: not found\")\n              const mainError = error.split('\\n')[0];\n              if (!errorSummary.has(mainError)) {\n                errorSummary.set(mainError, []);\n              }\n              errorSummary.get(mainError)!.push(file);\n            });\n\n            let errorMessage = `Failed to import resources. Missing qualifiers in configuration:\\n`;\n            errorSummary.forEach((files, error) => {\n              errorMessage += `- ${error} (${files.length} file${files.length > 1 ? 's' : ''})\\n`;\n            });\n\n            return fail(errorMessage);\n          } else if (importedCount === 0) {\n            return fail(`No resource files found in ${directory.name}`);\n          }\n        } else {\n          o11y.diag.info('[tsResIntegration] Successfully imported resources from root');\n        }\n\n        // Finalize processing\n        const updatedSystem = {\n          ...tsResSystem,\n          importManager\n        };\n        const configToUse = systemConfig ?? getDefaultSystemConfiguration();\n        return finalizeProcessing(updatedSystem, configToUse);\n      });\n    })\n    .withErrorFormat((message) => `processImportedDirectory failed: ${message}`);\n}\n\n/**\n * Finalizes processing and creates compiled resources\n */\nfunction finalizeProcessing(\n  system: {\n    qualifierTypes: QualifierTypes.ReadOnlyQualifierTypeCollector;\n    qualifiers: Qualifiers.IReadOnlyQualifierCollector;\n    resourceTypes: ResourceTypes.ReadOnlyResourceTypeCollector;\n    resourceManager: Resources.ResourceManagerBuilder;\n    importManager: Import.ImportManager;\n    contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n  },\n  systemConfig?: Config.Model.ISystemConfiguration\n): Result<ExtendedProcessedResources> {\n  return system.resourceManager\n    .getCompiledResourceCollection({ includeMetadata: true })\n    .onSuccess((compiledCollection: ResourceJson.Compiled.ICompiledResourceCollection) => {\n      // Create resolver directly without CompiledResourceCollection manager\n      return Runtime.ResourceResolver.create({\n        resourceManager: system.resourceManager,\n        qualifierTypes: system.qualifierTypes,\n        contextQualifierProvider: system.contextQualifierProvider\n      }).onSuccess((resolver) => {\n        // Create summary\n        const resourceIds = Array.from(system.resourceManager.resources.keys());\n        const summary = {\n          totalResources: resourceIds.length,\n          resourceIds,\n          errorCount: 0,\n          warnings: [] as string[]\n        };\n\n        return succeed({\n          system,\n          compiledCollection,\n          resolver,\n          resourceCount: resourceIds.length,\n          summary,\n          ...(systemConfig && { activeConfiguration: systemConfig })\n        });\n      });\n    })\n    .withErrorFormat((message) => `Failed to finalize processing: ${message}`);\n}\n\n// Note: createCompiledResourceCollectionManager was removed as part of the refactoring\n// We now always use ResourceManagerBuilder as the primary data structure\n"]}