{"version":3,"file":"filterResources.js","sourceRoot":"","sources":["../../src/utils/filterResources.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { Runtime, Import, Resources } from '@fgv/ts-res';\nimport { ProcessedResources, FilteredResource, FilterResult } from '../types';\n\n/**\n * Options for configuring filtering behavior and output.\n *\n * @public\n */\nexport interface FilterOptions {\n  /** Allow partial context matches when filtering resources */\n  partialContextMatch?: boolean;\n  /** Enable detailed console logging for debugging filter operations */\n  enableDebugLogging?: boolean;\n  /** Attempt to reduce qualifier complexity during filtering */\n  reduceQualifiers?: boolean;\n}\n\n// Helper function for conditional debug logging\nconst debugLog = (enableDebug: boolean, ...args: unknown[]) => {\n  if (enableDebug) {\n    console.log(...args);\n  }\n};\n\n/**\n * Checks if a filter values object contains any meaningful (non-empty) filter values.\n *\n * Utility function to determine whether filtering should be applied based on\n * the presence of actual filter values. Ignores undefined and empty string values.\n *\n * @example\n * ```typescript\n * import { FilterTools } from '@fgv/ts-res-ui-components';\n *\n * const filterValues = { language: 'en-US', platform: '', region: undefined };\n *\n * if (FilterTools.hasFilterValues(filterValues)) {\n *   console.log('Has active filters'); // Will print this\n *   const result = await FilterTools.createFilteredResourceManagerSimple(resources, filterValues);\n * } else {\n *   console.log('No filters applied');\n * }\n * ```\n *\n * @param values - Object containing filter key-value pairs\n * @returns True if any filter has a meaningful value, false otherwise\n * @public\n */\nexport function hasFilterValues(values: Record<string, string | undefined>): boolean {\n  return Object.values(values).some((value) => value !== undefined && value !== '');\n}\n\n/**\n * Creates a human-readable summary string of active filter values.\n *\n * Generates a comma-separated string representation of all non-empty filter values,\n * useful for displaying current filter state to users or in debug output.\n *\n * @example\n * ```typescript\n * import { FilterTools } from '@fgv/ts-res-ui-components';\n *\n * const filterValues = {\n *   language: 'en-US',\n *   platform: 'web',\n *   region: '',\n *   theme: undefined\n * };\n *\n * const summary = FilterTools.getFilterSummary(filterValues);\n * console.log(summary); // \"language=en-US, platform=web\"\n *\n * // For empty filters\n * const emptyFilters = {};\n * console.log(FilterTools.getFilterSummary(emptyFilters)); // \"No filters\"\n * ```\n *\n * @param values - Object containing filter key-value pairs\n * @returns Human-readable string summarizing active filters\n * @public\n */\nexport function getFilterSummary(values: Record<string, string | undefined>): string {\n  const activeFilters = Object.entries(values)\n    .filter(([, value]) => value !== undefined && value !== '')\n    .map(([key, value]) => `${key}=${value}`);\n  return activeFilters.length > 0 ? activeFilters.join(', ') : 'No filters';\n}\n\n/**\n * Creates a filtered resource manager using the ResourceManagerBuilder.clone() method.\n * This is a simplified implementation that leverages the built-in filtering functionality.\n */\n/**\n * Creates a filtered resource manager by applying context filters to reduce resource candidates.\n *\n * This function takes an original resource system and applies partial context filtering\n * to create a new resource manager with reduced candidate sets. Useful for creating\n * preview modes, testing specific configurations, or optimizing resource resolution.\n *\n * @example\n * ```typescript\n * import { FilterTools } from '@fgv/ts-res-ui-components';\n *\n * // Basic filtering with partial context\n * const originalResources = getProcessedResources();\n * const filterContext = { language: 'en-US', platform: 'web' };\n *\n * const filteredResult = await FilterTools.createFilteredResourceManagerSimple(\n *   originalResources.system,\n *   filterContext\n * );\n *\n * if (filteredResult.isSuccess()) {\n *   console.log('Filtered resources created successfully');\n *   const analysis = FilterTools.analyzeFilteredResources(\n *     originalResources.summary.resourceIds,\n *     filteredResult.value,\n *     originalResources\n *   );\n *   console.log(`Reduced candidates in ${analysis.filteredResources.length} resources`);\n * }\n * ```\n *\n * @example\n * ```typescript\n * // With advanced options and debug logging\n * const result = await FilterTools.createFilteredResourceManagerSimple(\n *   originalSystem,\n *   { language: 'fr-CA', region: 'quebec' },\n *   {\n *     partialContextMatch: true,\n *     enableDebugLogging: true,\n *     reduceQualifiers: false\n *   }\n * );\n *\n * if (result.isFailure()) {\n *   console.error('Filtering failed:', result.message);\n * }\n * ```\n *\n * @param originalSystem - The original resource system to filter\n * @param partialContext - Filter values to apply for candidate reduction\n * @param options - Configuration options for filtering behavior\n * @returns Result containing the filtered ProcessedResources or error message\n * @public\n */\nexport const createFilteredResourceManagerSimple = async (\n  originalSystem: ProcessedResources['system'],\n  partialContext: Record<string, string | undefined>,\n  options: FilterOptions = { partialContextMatch: true }\n): Promise<Result<ProcessedResources>> => {\n  const enableDebug = options.enableDebugLogging === true;\n\n  debugLog(enableDebug, '=== SIMPLE FILTER CREATION ===');\n  debugLog(enableDebug, 'Original system:', originalSystem);\n  debugLog(enableDebug, 'Partial context:', partialContext);\n\n  // Validate the original system\n  if (!originalSystem?.resourceManager) {\n    return fail('Original system or resourceManager is undefined');\n  }\n\n  // Filter out undefined values from the context before processing\n  const filteredContext = Object.fromEntries(\n    Object.entries(partialContext).filter(([, value]) => value !== undefined)\n  ) as Record<string, string>;\n\n  // Try to use ResourceManagerBuilder.clone() for proper filtering first\n  debugLog(enableDebug, 'Using ResourceManagerBuilder for proper filtering');\n  debugLog(enableDebug, 'Validating context and cloning manager:', filteredContext);\n  const resourceManagerBuilder = originalSystem.resourceManager;\n\n  return resourceManagerBuilder\n    .validateContext(filteredContext)\n    .onSuccess((validatedContext) => {\n      debugLog(enableDebug, 'Context validated, creating clone with context:', validatedContext);\n      return resourceManagerBuilder.clone({\n        filterForContext: validatedContext,\n        reduceQualifiers: options.reduceQualifiers\n      });\n    })\n    .withErrorFormat((e) => `Failed to validate context or clone: ${e}`)\n    .onSuccess((filteredManager) => {\n      debugLog(enableDebug, 'Filtered manager created:', filteredManager);\n\n      // Create new ImportManager for the filtered system\n      return Import.ImportManager.create({\n        resources: filteredManager\n      })\n        .withErrorFormat((e) => `Failed to create filtered import manager: ${e}`)\n        .onSuccess((newImportManager) => {\n          // Create new ContextQualifierProvider for the filtered system\n          return Runtime.ValidatingSimpleContextQualifierProvider.create({\n            qualifiers: originalSystem.qualifiers\n          })\n            .withErrorFormat((e) => `Failed to create filtered context provider: ${e}`)\n            .onSuccess((newContextQualifierProvider) => {\n              // Build the new system object\n              const newSystem = {\n                qualifierTypes: originalSystem.qualifierTypes,\n                qualifiers: originalSystem.qualifiers,\n                resourceTypes: originalSystem.resourceTypes,\n                resourceManager: filteredManager,\n                importManager: newImportManager,\n                contextQualifierProvider: newContextQualifierProvider\n              };\n\n              // Get compiled collection from the filtered manager\n              return filteredManager\n                .getCompiledResourceCollection({ includeMetadata: true })\n                .withErrorFormat((e) => `Failed to get compiled collection: ${e}`)\n                .onSuccess((compiledCollection) => {\n                  // Create resolver for the filtered system\n                  return Runtime.ResourceResolver.create({\n                    resourceManager: filteredManager,\n                    qualifierTypes: originalSystem.qualifierTypes,\n                    contextQualifierProvider: newContextQualifierProvider\n                  })\n                    .withErrorFormat((e) => `Failed to create resolver: ${e}`)\n                    .onSuccess((resolver) => {\n                      // Create summary\n                      const resourceIds = Array.from(filteredManager.resources.keys());\n                      const summary = {\n                        totalResources: resourceIds.length,\n                        resourceIds,\n                        errorCount: 0,\n                        warnings: [] as string[]\n                      };\n\n                      const processedResources: ProcessedResources = {\n                        system: newSystem,\n                        compiledCollection,\n                        resolver,\n                        resourceCount: resourceIds.length,\n                        summary\n                      };\n\n                      debugLog(enableDebug, '=== FILTERED PROCESSING COMPLETE ===');\n                      debugLog(enableDebug, 'Filtered resource count:', resourceIds.length);\n                      debugLog(enableDebug, 'Filtered resource IDs:', resourceIds);\n\n                      return succeed(processedResources);\n                    });\n                });\n            });\n        });\n    })\n    .onFailure((error) => {\n      debugLog(enableDebug, 'Failed to create filtered resource manager:', error);\n      return fail(`Failed to create filtered resource manager: ${error}`);\n    });\n};\n\n/**\n * Analyze filtered resources compared to original resources\n */\n/**\n * Analyzes the impact of filtering on resources by comparing original and filtered resource sets.\n *\n * Compares original and filtered resources to provide detailed analysis of how filtering\n * affected each resource's candidate count. Identifies resources with potential issues\n * and provides warnings for resources that may have been over-filtered or have no candidates.\n *\n * @example\n * ```typescript\n * import { FilterTools } from '@fgv/ts-res-ui-components';\n *\n * // After creating filtered resources\n * const originalIds = originalResources.summary.resourceIds;\n * const analysis = FilterTools.analyzeFilteredResources(\n *   originalIds,\n *   filteredResources,\n *   originalResources\n * );\n *\n * if (analysis.success) {\n *   console.log(`Analyzed ${analysis.filteredResources.length} resources`);\n *\n *   // Find resources with significant candidate reduction\n *   const heavilyFiltered = analysis.filteredResources.filter(r =>\n *     r.originalCandidateCount > 5 && r.filteredCandidateCount === 1\n *   );\n *   console.log(`${heavilyFiltered.length} resources heavily filtered`);\n *\n *   // Check for warnings\n *   if (analysis.warnings.length > 0) {\n *     console.warn('Filter warnings:', analysis.warnings);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using analysis for UI display\n * const analysis = FilterTools.analyzeFilteredResources(resourceIds, filtered, original);\n *\n * const resourcesWithIssues = analysis.filteredResources.filter(r => r.hasWarning);\n * if (resourcesWithIssues.length > 0) {\n *   showWarningDialog(\n *     `${resourcesWithIssues.length} resources may be over-filtered`,\n *     resourcesWithIssues.map(r => r.id)\n *   );\n * }\n * ```\n *\n * @param originalResourceIds - Array of resource IDs from the original system\n * @param filteredProcessedResources - The filtered resource system to analyze\n * @param originalProcessedResources - The original resource system for comparison\n * @returns Analysis result with per-resource filtering impact and warnings\n * @public\n */\nexport function analyzeFilteredResources(\n  originalResourceIds: string[],\n  filteredProcessedResources: ProcessedResources,\n  originalProcessedResources: ProcessedResources\n): FilterResult {\n  const filteredResources: FilteredResource[] = [];\n  const warnings: string[] = [];\n\n  for (const resourceId of originalResourceIds) {\n    // Get original resource info\n    const originalResourceResult =\n      originalProcessedResources.system.resourceManager.getBuiltResource(resourceId);\n    const originalCandidateCount = originalResourceResult.isSuccess()\n      ? originalResourceResult.value.candidates.length\n      : 0;\n\n    // Get filtered resource info\n    const filteredResourceResult =\n      filteredProcessedResources.system.resourceManager.getBuiltResource(resourceId);\n    const filteredCandidateCount = filteredResourceResult.isSuccess()\n      ? filteredResourceResult.value.candidates.length\n      : 0;\n\n    const hasWarning = filteredCandidateCount === 0 && originalCandidateCount > 0;\n    if (hasWarning) {\n      warnings.push(`Resource ${resourceId} has no matching candidates after filtering`);\n    }\n\n    filteredResources.push({\n      id: resourceId,\n      originalCandidateCount,\n      filteredCandidateCount,\n      hasWarning\n    });\n  }\n\n  return {\n    success: true,\n    filteredResources,\n    processedResources: filteredProcessedResources,\n    warnings\n  };\n}\n"]}