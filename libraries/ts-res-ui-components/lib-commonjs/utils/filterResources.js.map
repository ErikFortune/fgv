{"version":3,"file":"filterResources.js","sourceRoot":"","sources":["../../src/utils/filterResources.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { Context, Runtime, Import, Resources } from '@fgv/ts-res';\nimport { ProcessedResources } from '../types';\n\nexport interface FilterOptions {\n  partialContextMatch?: boolean;\n  enableDebugLogging?: boolean;\n  reduceQualifiers?: boolean;\n}\n\nexport interface FilteredResource {\n  id: string;\n  originalCandidateCount: number;\n  filteredCandidateCount: number;\n  hasWarning: boolean;\n}\n\nexport interface FilterResult {\n  success: boolean;\n  filteredResources: FilteredResource[];\n  processedResources?: ProcessedResources;\n  error?: string;\n  warnings: string[];\n}\n\n// Helper function for conditional debug logging\nconst debugLog = (enableDebug: boolean, ...args: any[]) => {\n  if (enableDebug) {\n    console.log(...args);\n  }\n};\n\n/**\n * Check if filter values object has any meaningful values\n */\nexport function hasFilterValues(values: Record<string, string | undefined>): boolean {\n  return Object.values(values).some(value => value !== undefined && value !== '');\n}\n\n/**\n * Get a summary string of active filter values\n */\nexport function getFilterSummary(values: Record<string, string | undefined>): string {\n  const activeFilters = Object.entries(values)\n    .filter(([, value]) => value !== undefined && value !== '')\n    .map(([key, value]) => `${key}=${value}`);\n  return activeFilters.length > 0 ? activeFilters.join(', ') : 'No filters';\n}\n\n/**\n * Creates a filtered resource manager using the ResourceManagerBuilder.clone() method.\n * This is a simplified implementation that leverages the built-in filtering functionality.\n */\nexport const createFilteredResourceManagerSimple = async (\n  originalSystem: {\n    resourceManager: Resources.ResourceManagerBuilder;\n    qualifiers: any;\n    qualifierTypes: any;\n    resourceTypes: any;\n    importManager: any;\n    contextQualifierProvider: Runtime.ValidatingSimpleContextQualifierProvider;\n  },\n  partialContext: Record<string, string | undefined>,\n  options: FilterOptions = { partialContextMatch: true }\n): Promise<Result<ProcessedResources>> => {\n  try {\n    const enableDebug = options.enableDebugLogging === true;\n\n    debugLog(enableDebug, '=== SIMPLE FILTER CREATION ===');\n    debugLog(enableDebug, 'Original system:', originalSystem);\n    debugLog(enableDebug, 'Partial context:', partialContext);\n\n    // Validate the original system\n    if (!originalSystem?.resourceManager) {\n      return fail('Original system or resourceManager is undefined');\n    }\n\n    // Filter out undefined values from the context before processing\n    const filteredContext = Object.fromEntries(\n      Object.entries(partialContext).filter(([, value]) => value !== undefined)\n    ) as Record<string, string>;\n\n    // Use Result pattern chaining as recommended\n    debugLog(enableDebug, 'Validating context and cloning manager:', filteredContext);\n    const cloneResult = originalSystem.resourceManager\n      .validateContext(filteredContext)\n      .onSuccess((validatedContext) => {\n        debugLog(enableDebug, 'Context validated, creating clone with context:', validatedContext);\n        return originalSystem.resourceManager.clone({\n          filterForContext: validatedContext,\n          reduceQualifiers: options.reduceQualifiers\n        });\n      })\n      .onFailure((error) => {\n        debugLog(enableDebug, 'Failed to validate context or clone:', error);\n        return fail(error);\n      });\n\n    if (cloneResult.isFailure()) {\n      return fail(`Failed to create filtered resource manager: ${cloneResult.message}`);\n    }\n\n    const filteredManager = cloneResult.value;\n    debugLog(enableDebug, 'Filtered manager created:', filteredManager);\n\n    // Create new ImportManager for the filtered system\n    const newImportManagerResult = Import.ImportManager.create({\n      resources: filteredManager\n    });\n\n    if (newImportManagerResult.isFailure()) {\n      return fail(`Failed to create filtered import manager: ${newImportManagerResult.message}`);\n    }\n\n    // Create new ContextQualifierProvider for the filtered system\n    const newContextQualifierProviderResult = Runtime.ValidatingSimpleContextQualifierProvider.create({\n      qualifiers: originalSystem.qualifiers\n    });\n\n    if (newContextQualifierProviderResult.isFailure()) {\n      return fail(`Failed to create filtered context provider: ${newContextQualifierProviderResult.message}`);\n    }\n\n    // Build the new system object\n    const newSystem = {\n      qualifierTypes: originalSystem.qualifierTypes,\n      qualifiers: originalSystem.qualifiers,\n      resourceTypes: originalSystem.resourceTypes,\n      resourceManager: filteredManager,\n      importManager: newImportManagerResult.value,\n      contextQualifierProvider: newContextQualifierProviderResult.value\n    };\n\n    // Get compiled collection from the filtered manager\n    const compiledCollectionResult = filteredManager.getCompiledResourceCollection({ includeMetadata: true });\n    if (compiledCollectionResult.isFailure()) {\n      return fail(`Failed to get compiled collection: ${compiledCollectionResult.message}`);\n    }\n\n    // Create resolver for the filtered system\n    const resolverResult = Runtime.ResourceResolver.create({\n      resourceManager: filteredManager,\n      qualifierTypes: originalSystem.qualifierTypes,\n      contextQualifierProvider: newContextQualifierProviderResult.value\n    });\n\n    if (resolverResult.isFailure()) {\n      return fail(`Failed to create resolver: ${resolverResult.message}`);\n    }\n\n    // Create summary\n    const resourceIds = Array.from(filteredManager.resources.keys());\n    const summary = {\n      totalResources: resourceIds.length,\n      resourceIds,\n      errorCount: 0,\n      warnings: []\n    };\n\n    const processedResources: ProcessedResources = {\n      system: newSystem,\n      compiledCollection: compiledCollectionResult.value,\n      resolver: resolverResult.value,\n      resourceCount: resourceIds.length,\n      summary\n    };\n\n    debugLog(enableDebug, '=== FILTERED PROCESSING COMPLETE ===');\n    debugLog(enableDebug, 'Filtered resource count:', resourceIds.length);\n    debugLog(enableDebug, 'Filtered resource IDs:', resourceIds);\n\n    return succeed(processedResources);\n  } catch (error) {\n    return fail(`Failed to create filtered resource manager: ${error instanceof Error ? error.message : String(error)}`);\n  }\n};\n\n/**\n * Analyze filtered resources compared to original resources\n */\nexport function analyzeFilteredResources(\n  originalResourceIds: string[],\n  filteredProcessedResources: ProcessedResources,\n  originalProcessedResources: ProcessedResources\n): FilterResult {\n  const filteredResources: FilteredResource[] = [];\n  const warnings: string[] = [];\n\n  for (const resourceId of originalResourceIds) {\n    // Get original resource info\n    const originalResourceResult = originalProcessedResources.system.resourceManager.getBuiltResource(resourceId);\n    const originalCandidateCount = originalResourceResult.isSuccess() ? originalResourceResult.value.candidates.length : 0;\n\n    // Get filtered resource info\n    const filteredResourceResult = filteredProcessedResources.system.resourceManager.getBuiltResource(resourceId);\n    const filteredCandidateCount = filteredResourceResult.isSuccess() ? filteredResourceResult.value.candidates.length : 0;\n\n    const hasWarning = filteredCandidateCount === 0 && originalCandidateCount > 0;\n    if (hasWarning) {\n      warnings.push(`Resource ${resourceId} has no matching candidates after filtering`);\n    }\n\n    filteredResources.push({\n      id: resourceId,\n      originalCandidateCount,\n      filteredCandidateCount,\n      hasWarning\n    });\n  }\n\n  return {\n    success: true,\n    filteredResources,\n    processedResources: filteredProcessedResources,\n    warnings\n  };\n}"]}