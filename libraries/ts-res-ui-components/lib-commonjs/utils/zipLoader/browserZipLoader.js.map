{"version":3,"file":"browserZipLoader.js","sourceRoot":"","sources":["../../../src/utils/zipLoader/browserZipLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { \n  IZipLoader, \n  ZipLoadOptions, \n  ZipLoadResult, \n  ZipProgressCallback, \n  ZipFileTree, \n  ZipFileItem,\n  ZipLoadingStage\n} from './types';\nimport { \n  parseManifest, \n  parseConfiguration, \n  zipTreeToFiles, \n  zipTreeToDirectory,\n  isZipFile\n} from './zipUtils';\nimport { processImportedFiles, processImportedDirectory } from '../tsResIntegration';\n\n// Dynamic import for JSZip to support both Node.js and browser environments\nlet JSZip: any = null;\n\n/**\n * Get JSZip instance (assumes JSZip is available)\n */\nfunction getJSZip(): any {\n  if (JSZip) return JSZip;\n  \n  // Check if JSZip is globally available\n  if (typeof window !== 'undefined' && (window as any).JSZip) {\n    JSZip = (window as any).JSZip;\n    return JSZip;\n  }\n  \n  // Try to get JSZip from require/import (will work in bundled environments)\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    JSZip = require('jszip');\n    return JSZip;\n  } catch (error) {\n    throw new Error(\n      'JSZip is not available. Please install jszip as a dependency: npm install jszip'\n    );\n  }\n}\n\n/**\n * Browser-based ZIP loader implementation\n */\nexport class BrowserZipLoader implements IZipLoader {\n  /**\n   * Load ZIP from File object\n   */\n  async loadFromFile(\n    file: File, \n    options: ZipLoadOptions = {},\n    onProgress?: ZipProgressCallback\n  ): Promise<Result<ZipLoadResult>> {\n    onProgress?.('reading-file', 0, `Reading file: ${file.name}`);\n    \n    if (!isZipFile(file.name)) {\n      return fail(`File ${file.name} is not a ZIP file`);\n    }\n\n    try {\n      const buffer = await file.arrayBuffer();\n      onProgress?.('reading-file', 100, 'File read complete');\n      \n      return this.loadFromBuffer(buffer, options, onProgress);\n    } catch (error) {\n      return fail(`Failed to read file: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Load ZIP from ArrayBuffer\n   */\n  async loadFromBuffer(\n    buffer: ArrayBuffer, \n    options: ZipLoadOptions = {},\n    onProgress?: ZipProgressCallback\n  ): Promise<Result<ZipLoadResult>> {\n    try {\n      onProgress?.('parsing-zip', 0, 'Parsing ZIP archive');\n      \n      const JSZipClass = getJSZip();\n      const zip = new JSZipClass();\n      const loadedZip = await zip.loadAsync(buffer);\n      \n      onProgress?.('parsing-zip', 100, 'ZIP archive parsed');\n      \n      // Build file tree\n      const fileTree = await this.buildFileTree(loadedZip, onProgress);\n      \n      // Load manifest\n      onProgress?.('loading-manifest', 0, 'Loading manifest');\n      const manifest = await this.loadManifest(loadedZip);\n      onProgress?.('loading-manifest', 100, 'Manifest loaded');\n      \n      // Load configuration\n      onProgress?.('loading-config', 0, 'Loading configuration');\n      const config = await this.loadConfiguration(loadedZip, options);\n      onProgress?.('loading-config', 100, 'Configuration loaded');\n      \n      // Extract files and directory structure\n      onProgress?.('extracting-files', 0, 'Extracting files');\n      const files = zipTreeToFiles(fileTree);\n      const directory = zipTreeToDirectory(fileTree);\n      onProgress?.('extracting-files', 100, `Extracted ${files.length} files`);\n      \n      // Process resources if requested\n      let processedResources = null;\n      if (options.autoProcessResources) {\n        onProgress?.('processing-resources', 0, 'Processing resources');\n        \n        const configToUse = options.overrideConfig || config;\n        \n        if (directory) {\n          const processResult = await processImportedDirectory(directory, configToUse || undefined);\n          if (processResult.isSuccess()) {\n            processedResources = processResult.value;\n          }\n        } else if (files.length > 0) {\n          const processResult = await processImportedFiles(files, configToUse || undefined);\n          if (processResult.isSuccess()) {\n            processedResources = processResult.value;\n          }\n        }\n        \n        onProgress?.('processing-resources', 100, 'Resources processed');\n      }\n      \n      onProgress?.('complete', 100, 'ZIP loading complete');\n      \n      return succeed({\n        manifest,\n        config: options.overrideConfig || config,\n        files,\n        directory,\n        processedResources\n      });\n      \n    } catch (error) {\n      return fail(`Failed to load ZIP: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Load ZIP from URL\n   */\n  async loadFromUrl(\n    url: string, \n    options: ZipLoadOptions = {},\n    onProgress?: ZipProgressCallback\n  ): Promise<Result<ZipLoadResult>> {\n    onProgress?.('reading-file', 0, `Fetching from URL: ${url}`);\n    \n    try {\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        return fail(`Failed to fetch ZIP from URL: ${response.status} ${response.statusText}`);\n      }\n      \n      const buffer = await response.arrayBuffer();\n      onProgress?.('reading-file', 100, 'URL fetch complete');\n      \n      return this.loadFromBuffer(buffer, options, onProgress);\n    } catch (error) {\n      return fail(`Failed to fetch ZIP from URL: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Build file tree from JSZip instance\n   */\n  private async buildFileTree(\n    zip: any, \n    onProgress?: ZipProgressCallback\n  ): Promise<ZipFileTree> {\n    const files = new Map<string, ZipFileItem>();\n    const directories = new Set<string>();\n    \n    const zipFiles = Object.keys(zip.files);\n    let processed = 0;\n    \n    // Pre-load all file contents for performance\n    for (const filename of zipFiles) {\n      const zipEntry = zip.files[filename];\n      \n      if (zipEntry.dir) {\n        directories.add(filename);\n        files.set(filename, {\n          name: filename.split('/').filter(p => p).pop() || filename,\n          path: filename,\n          size: 0,\n          isDirectory: true,\n          lastModified: zipEntry.date\n        });\n      } else {\n        // Load file content\n        const content = await zipEntry.async('string');\n        \n        files.set(filename, {\n          name: filename.split('/').pop() || filename,\n          path: filename,\n          size: content.length,\n          isDirectory: false,\n          lastModified: zipEntry.date,\n          content\n        });\n      }\n      \n      processed++;\n      const progress = Math.round((processed / zipFiles.length) * 100);\n      onProgress?.('extracting-files', progress, `Processing ${filename}`);\n    }\n    \n    return {\n      files,\n      directories,\n      root: this.findCommonRoot(Array.from(files.keys()))\n    };\n  }\n\n  /**\n   * Load manifest from ZIP\n   */\n  private async loadManifest(zip: any): Promise<any> {\n    const manifestFile = zip.files['manifest.json'];\n    if (!manifestFile) {\n      return null;\n    }\n    \n    try {\n      const manifestData = await manifestFile.async('string');\n      const parseResult = parseManifest(manifestData);\n      return parseResult.isSuccess() ? parseResult.value : null;\n    } catch (error) {\n      console.warn('Failed to load manifest:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Load configuration from ZIP\n   */\n  private async loadConfiguration(zip: any, options: ZipLoadOptions): Promise<any> {\n    if (options.overrideConfig) {\n      return options.overrideConfig;\n    }\n    \n    const configFile = zip.files['config.json'];\n    if (!configFile) {\n      return null;\n    }\n    \n    try {\n      const configData = await configFile.async('string');\n      const parseResult = parseConfiguration(configData);\n      return parseResult.isSuccess() ? parseResult.value : null;\n    } catch (error) {\n      console.warn('Failed to load configuration:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Find common root directory from file paths\n   */\n  private findCommonRoot(paths: string[]): string {\n    if (paths.length === 0) return '';\n    if (paths.length === 1) return paths[0].split('/')[0] || '';\n    \n    const parts = paths[0].split('/');\n    let commonLength = 0;\n    \n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      if (paths.every(path => path.split('/')[i] === part)) {\n        commonLength = i + 1;\n      } else {\n        break;\n      }\n    }\n    \n    return parts.slice(0, commonLength).join('/');\n  }\n}\n\n/**\n * Create a new browser ZIP loader instance\n */\nexport function createBrowserZipLoader(): IZipLoader {\n  return new BrowserZipLoader();\n}\n\n/**\n * Convenience function to load ZIP from File with default options\n */\nexport async function loadZipFile(\n  file: File,\n  options?: ZipLoadOptions,\n  onProgress?: ZipProgressCallback\n): Promise<Result<ZipLoadResult>> {\n  const loader = createBrowserZipLoader();\n  return loader.loadFromFile(file, options, onProgress);\n}\n\n/**\n * Convenience function to load ZIP from URL with default options\n */\nexport async function loadZipFromUrl(\n  url: string,\n  options?: ZipLoadOptions,\n  onProgress?: ZipProgressCallback\n): Promise<Result<ZipLoadResult>> {\n  const loader = createBrowserZipLoader();\n  return loader.loadFromUrl(url, options, onProgress);\n}"]}