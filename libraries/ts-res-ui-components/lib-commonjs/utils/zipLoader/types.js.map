{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/utils/zipLoader/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Result } from '@fgv/ts-utils';\nimport { Config } from '@fgv/ts-res';\nimport { ImportedDirectory, ImportedFile, ProcessedResources } from '../../types';\n\n/**\n * ZIP manifest metadata structure\n */\nexport interface ZipManifest {\n  timestamp: string;\n  input?: {\n    type: 'file' | 'directory';\n    originalPath: string;\n    archivePath: string;\n  };\n  config?: {\n    type: 'file';\n    originalPath: string;\n    archivePath: string;\n  };\n}\n\n/**\n * Options for creating ZIP archives\n */\nexport interface ZipArchiveOptions {\n  /** Output directory for the ZIP file */\n  outputDir?: string;\n  /** Custom filename (without extension) */\n  filename?: string;\n  /** Compression level (0-9) */\n  compressionLevel?: number;\n  /** Include configuration file */\n  includeConfig?: boolean;\n  /** Custom configuration to include */\n  config?: Config.Model.ISystemConfiguration;\n}\n\n/**\n * Result of ZIP archive creation\n */\nexport interface ZipArchiveResult {\n  /** Path to the created ZIP file */\n  filePath: string;\n  /** Size of the ZIP file in bytes */\n  fileSize: number;\n  /** Generated manifest */\n  manifest: ZipManifest;\n  /** Timestamp when created */\n  timestamp: string;\n}\n\n/**\n * Options for loading ZIP archives\n */\nexport interface ZipLoadOptions {\n  /** Whether to auto-apply configuration found in ZIP */\n  autoApplyConfig?: boolean;\n  /** Whether to auto-process resources after loading */\n  autoProcessResources?: boolean;\n  /** Custom configuration to use instead of ZIP config */\n  overrideConfig?: Config.Model.ISystemConfiguration;\n}\n\n/**\n * Result of ZIP loading operation\n */\nexport interface ZipLoadResult {\n  /** Manifest from the ZIP */\n  manifest: ZipManifest | null;\n  /** Configuration found in ZIP */\n  config: Config.Model.ISystemConfiguration | null;\n  /** Loaded files */\n  files: ImportedFile[];\n  /** Loaded directory structure */\n  directory: ImportedDirectory | null;\n  /** Processed resources if auto-processing was enabled */\n  processedResources: ProcessedResources | null;\n}\n\n/**\n * ZIP loading progress stages\n */\nexport type ZipLoadingStage = \n  | 'reading-file'\n  | 'parsing-zip' \n  | 'loading-manifest'\n  | 'loading-config'\n  | 'extracting-files'\n  | 'processing-resources'\n  | 'complete';\n\n/**\n * Progress callback for ZIP operations\n */\nexport interface ZipProgressCallback {\n  (stage: ZipLoadingStage, progress: number, message?: string): void;\n}\n\n/**\n * ZIP builder interface (Node.js environment)\n */\nexport interface IZipBuilder {\n  /**\n   * Create ZIP from files\n   */\n  createFromFiles(\n    files: ImportedFile[], \n    options?: ZipArchiveOptions\n  ): Promise<Result<ZipArchiveResult>>;\n\n  /**\n   * Create ZIP from directory\n   */\n  createFromDirectory(\n    directory: ImportedDirectory, \n    options?: ZipArchiveOptions\n  ): Promise<Result<ZipArchiveResult>>;\n\n  /**\n   * Create ZIP from file system path\n   */\n  createFromPath(\n    path: string, \n    options?: ZipArchiveOptions\n  ): Promise<Result<ZipArchiveResult>>;\n}\n\n/**\n * ZIP loader interface (Browser environment)\n */\nexport interface IZipLoader {\n  /**\n   * Load ZIP from File object\n   */\n  loadFromFile(\n    file: File, \n    options?: ZipLoadOptions,\n    onProgress?: ZipProgressCallback\n  ): Promise<Result<ZipLoadResult>>;\n\n  /**\n   * Load ZIP from ArrayBuffer\n   */\n  loadFromBuffer(\n    buffer: ArrayBuffer, \n    options?: ZipLoadOptions,\n    onProgress?: ZipProgressCallback\n  ): Promise<Result<ZipLoadResult>>;\n\n  /**\n   * Load ZIP from URL\n   */\n  loadFromUrl(\n    url: string, \n    options?: ZipLoadOptions,\n    onProgress?: ZipProgressCallback\n  ): Promise<Result<ZipLoadResult>>;\n}\n\n/**\n * File item within a ZIP archive\n */\nexport interface ZipFileItem {\n  name: string;\n  path: string;\n  size: number;\n  isDirectory: boolean;\n  lastModified?: Date;\n  content?: string | ArrayBuffer;\n}\n\n/**\n * ZIP file tree representation\n */\nexport interface ZipFileTree {\n  files: Map<string, ZipFileItem>;\n  directories: Set<string>;\n  root: string;\n}"]}