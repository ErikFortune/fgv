{"version":3,"file":"zipUtils.js","sourceRoot":"","sources":["../../../src/utils/zipLoader/zipUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { Config } from '@fgv/ts-res';\nimport { ZipManifest, ZipFileItem, ZipFileTree } from './types';\nimport { ImportedDirectory, ImportedFile } from '../../types';\n\n/**\n * Generate a timestamp-based filename for ZIP archives\n */\nexport function generateZipFilename(customName?: string): string {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', '_').slice(0, -5);\n  return customName ? `${customName}-${timestamp}.zip` : `ts-res-bundle-${timestamp}.zip`;\n}\n\n/**\n * Create a ZIP manifest object\n */\nexport function createManifest(\n  inputType: 'file' | 'directory',\n  originalPath: string,\n  archivePath: string,\n  configPath?: string\n): ZipManifest {\n  const manifest: ZipManifest = {\n    timestamp: new Date().toISOString(),\n    input: {\n      type: inputType,\n      originalPath,\n      archivePath\n    }\n  };\n\n  if (configPath) {\n    manifest.config = {\n      type: 'file',\n      originalPath: configPath,\n      archivePath: 'config.json'\n    };\n  }\n\n  return manifest;\n}\n\n/**\n * Parse and validate a ZIP manifest\n */\nexport function parseManifest(manifestData: string): Result<ZipManifest> {\n  try {\n    const parsed = JSON.parse(manifestData);\n    \n    // Basic validation\n    if (!parsed.timestamp || typeof parsed.timestamp !== 'string') {\n      return fail('Invalid manifest: missing or invalid timestamp');\n    }\n\n    // Validate input section if present\n    if (parsed.input) {\n      if (!parsed.input.type || !['file', 'directory'].includes(parsed.input.type)) {\n        return fail('Invalid manifest: invalid input type');\n      }\n      if (!parsed.input.originalPath || !parsed.input.archivePath) {\n        return fail('Invalid manifest: missing input paths');\n      }\n    }\n\n    // Validate config section if present\n    if (parsed.config) {\n      if (parsed.config.type !== 'file') {\n        return fail('Invalid manifest: invalid config type');\n      }\n      if (!parsed.config.originalPath || !parsed.config.archivePath) {\n        return fail('Invalid manifest: missing config paths');\n      }\n    }\n\n    return succeed(parsed as ZipManifest);\n  } catch (error) {\n    return fail(`Failed to parse manifest: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Parse and validate configuration JSON\n */\nexport function parseConfiguration(configData: string): Result<Config.Model.ISystemConfiguration> {\n  try {\n    const parsed = JSON.parse(configData);\n    \n    // Basic validation - check for expected properties\n    if (typeof parsed !== 'object' || parsed === null) {\n      return fail('Invalid configuration: not an object');\n    }\n\n    // More detailed validation could be added here using ts-res validators\n    return succeed(parsed as Config.Model.ISystemConfiguration);\n  } catch (error) {\n    return fail(`Failed to parse configuration: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Convert ZIP file tree to ImportedFiles array\n */\nexport function zipTreeToFiles(tree: ZipFileTree): ImportedFile[] {\n  const files: ImportedFile[] = [];\n  \n  for (const [path, item] of Array.from(tree.files.entries())) {\n    if (!item.isDirectory && item.content && typeof item.content === 'string') {\n      files.push({\n        name: item.name,\n        path: path,\n        content: item.content,\n        type: getFileType(item.name)\n      });\n    }\n  }\n  \n  return files;\n}\n\n/**\n * Convert ZIP file tree to ImportedDirectory structure\n */\nexport function zipTreeToDirectory(tree: ZipFileTree): ImportedDirectory | null {\n  if (tree.files.size === 0) {\n    return null;\n  }\n\n  // Build directory structure\n  const directories = new Map<string, ImportedDirectory>();\n  const rootDir: ImportedDirectory = {\n    name: tree.root || 'root',\n    files: [],\n    subdirectories: []\n  };\n  directories.set('', rootDir);\n\n  // Process all paths to build directory structure\n  for (const [path, item] of Array.from(tree.files.entries())) {\n    const pathParts = path.split('/').filter((part: string) => part.length > 0);\n    \n    if (pathParts.length === 0) continue;\n\n    // Ensure all parent directories exist\n    let currentPath = '';\n    for (let i = 0; i < pathParts.length - 1; i++) {\n      const parentPath = currentPath;\n      currentPath = currentPath ? `${currentPath}/${pathParts[i]}` : pathParts[i];\n      \n      if (!directories.has(currentPath)) {\n        const newDir: ImportedDirectory = {\n          name: pathParts[i],\n          files: [],\n          subdirectories: []\n        };\n        directories.set(currentPath, newDir);\n        \n        // Add to parent directory\n        const parentDir = directories.get(parentPath);\n        if (parentDir) {\n          parentDir.subdirectories = parentDir.subdirectories || [];\n          parentDir.subdirectories.push(newDir);\n        }\n      }\n    }\n\n    // Add file to its parent directory\n    if (!item.isDirectory && item.content && typeof item.content === 'string') {\n      const fileName = pathParts[pathParts.length - 1];\n      const parentPath = pathParts.length > 1 ? pathParts.slice(0, -1).join('/') : '';\n      const parentDir = directories.get(parentPath);\n      \n      if (parentDir) {\n        parentDir.files.push({\n          name: fileName,\n          path: path,\n          content: item.content,\n          type: getFileType(fileName)\n        });\n      }\n    }\n  }\n\n  return rootDir;\n}\n\n/**\n * Get file type based on extension\n */\nfunction getFileType(filename: string): string {\n  const ext = filename.toLowerCase().split('.').pop();\n  switch (ext) {\n    case 'json': return 'application/json';\n    case 'yaml': case 'yml': return 'application/yaml';\n    case 'xml': return 'application/xml';\n    case 'txt': return 'text/plain';\n    case 'md': return 'text/markdown';\n    case 'js': return 'application/javascript';\n    case 'ts': return 'application/typescript';\n    default: return 'application/octet-stream';\n  }\n}\n\n/**\n * Normalize path separators for cross-platform compatibility\n */\nexport function normalizePath(path: string): string {\n  return path.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n}\n\n/**\n * Extract directory name from a file path\n */\nexport function getDirectoryName(path: string): string {\n  const normalized = normalizePath(path);\n  const parts = normalized.split('/');\n  return parts[parts.length - 1] || 'archive';\n}\n\n/**\n * Create a safe filename by removing invalid characters\n */\nexport function sanitizeFilename(filename: string): string {\n  return filename\n    .replace(/[<>:\"/\\\\|?*]/g, '_')\n    .replace(/\\s+/g, '_')\n    .replace(/_+/g, '_')\n    .trim();\n}\n\n/**\n * Format file size in human readable format\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  \n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  const size = bytes / Math.pow(1024, i);\n  \n  return `${size.toFixed(i === 0 ? 0 : 1)} ${sizes[i]}`;\n}\n\n/**\n * Validate ZIP file extension\n */\nexport function isZipFile(filename: string): boolean {\n  return filename.toLowerCase().endsWith('.zip');\n}\n\n/**\n * Extract base name from filename (without extension)\n */\nexport function getBaseName(filename: string): string {\n  const name = filename.split('/').pop() || filename;\n  const dotIndex = name.lastIndexOf('.');\n  return dotIndex > 0 ? name.substring(0, dotIndex) : name;\n}"]}