{"version":3,"file":"zipProcessingHelpers.js","sourceRoot":"","sources":["../../../src/utils/zipLoader/zipProcessingHelpers.ts"],"names":[],"mappings":";;AAUA,kDAqBC;AAMD,oDAWC;;AAhDD,4CAAsD;AAGtD,0DAAqF;AACrF,6EAAuD;AAEvD;;;GAGG;AACI,KAAK,UAAU,mBAAmB,CACvC,KAAqB,EACrB,SAAwC,EACxC,MAA0C,EAC1C,OAAiD,kBAAkB,CAAC,2BAA2B;IAE/F,IAAI,CAAC;QACH,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,IAAA,2CAAwB,EAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,eAAe,CAC5F,CAAC,OAAO,EAAE,EAAE,CAAC,+CAA+C,OAAO,EAAE,CACtE,CAAC;QACJ,CAAC;aAAM,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,OAAO,IAAA,uCAAoB,EAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,eAAe,CACpF,CAAC,OAAO,EAAE,EAAE,CAAC,2CAA2C,OAAO,EAAE,CAClE,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO,IAAA,eAAI,EAAC,kDAAkD,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,IAAA,eAAI,EAAC,mCAAmC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC3G,CAAC;AACH,CAAC;AAED;;;GAGG;AACI,KAAK,UAAU,oBAAoB,CACxC,SAIC,EACD,cAAkD,EAClD,OAAiD,kBAAkB,CAAC,2BAA2B;IAE/F,MAAM,WAAW,GAAG,cAAc,IAAI,SAAS,CAAC,MAAM,CAAC;IACvD,OAAO,mBAAmB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;AACtF,CAAC","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { Config } from '@fgv/ts-res';\nimport { ImportedDirectory, ImportedFile, ProcessedResources } from '../../types';\nimport { processImportedFiles, processImportedDirectory } from '../tsResIntegration';\nimport * as ObservabilityTools from '../observability';\n\n/**\n * Helper function to process resources from ZIP data using ts-res-ui-components integration\n * @public\n */\nexport async function processZipResources(\n  files: ImportedFile[],\n  directory: ImportedDirectory | undefined,\n  config?: Config.Model.ISystemConfiguration,\n  o11y: ObservabilityTools.IObservabilityContext = ObservabilityTools.DefaultObservabilityContext\n): Promise<Result<ProcessedResources>> {\n  try {\n    if (directory) {\n      return processImportedDirectory(directory, config, undefined, undefined, o11y).withErrorFormat(\n        (message) => `Failed to process resources from directory: ${message}`\n      );\n    } else if (files.length > 0) {\n      return processImportedFiles(files, config, undefined, undefined, o11y).withErrorFormat(\n        (message) => `Failed to process resources from files: ${message}`\n      );\n    } else {\n      return fail('No files or directory structure found to process');\n    }\n  } catch (error) {\n    return fail(`Error processing ZIP resources: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Helper function to process resources from a ZIP load result\n * @public\n */\nexport async function processZipLoadResult(\n  zipResult: {\n    files: ImportedFile[];\n    directory?: ImportedDirectory;\n    config?: Config.Model.ISystemConfiguration;\n  },\n  overrideConfig?: Config.Model.ISystemConfiguration,\n  o11y: ObservabilityTools.IObservabilityContext = ObservabilityTools.DefaultObservabilityContext\n): Promise<Result<ProcessedResources>> {\n  const configToUse = overrideConfig || zipResult.config;\n  return processZipResources(zipResult.files, zipResult.directory, configToUse, o11y);\n}\n"]}