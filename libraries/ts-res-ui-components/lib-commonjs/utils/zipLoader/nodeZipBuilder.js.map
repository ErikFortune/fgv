{"version":3,"file":"nodeZipBuilder.js","sourceRoot":"","sources":["../../../src/utils/zipLoader/nodeZipBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { \n  IZipBuilder, \n  ZipArchiveOptions, \n  ZipArchiveResult,\n  ZipManifest\n} from './types';\nimport { ImportedDirectory, ImportedFile } from '../../types';\nimport { \n  generateZipFilename, \n  createManifest, \n  sanitizeFilename,\n  normalizePath\n} from './zipUtils';\n\n/**\n * Node.js-based ZIP builder implementation\n * \n * Note: This is a placeholder implementation for interface compatibility.\n * The actual Node.js ZIP building functionality should be implemented\n * in a separate Node.js-specific package or tool.\n */\nexport class NodeZipBuilder implements IZipBuilder {\n  /**\n   * Create ZIP from files\n   */\n  async createFromFiles(\n    files: ImportedFile[], \n    options: ZipArchiveOptions = {}\n  ): Promise<Result<ZipArchiveResult>> {\n    return fail('Node.js ZIP building not implemented in browser library. Use @fgv/ts-res-browser-cli for ZIP creation.');\n  }\n\n  /**\n   * Create ZIP from directory\n   */\n  async createFromDirectory(\n    directory: ImportedDirectory, \n    options: ZipArchiveOptions = {}\n  ): Promise<Result<ZipArchiveResult>> {\n    return fail('Node.js ZIP building not implemented in browser library. Use @fgv/ts-res-browser-cli for ZIP creation.');\n  }\n\n  /**\n   * Create ZIP from file system path\n   */\n  async createFromPath(\n    path: string, \n    options: ZipArchiveOptions = {}\n  ): Promise<Result<ZipArchiveResult>> {\n    return fail('Node.js ZIP building not implemented in browser library. Use @fgv/ts-res-browser-cli for ZIP creation.');\n  }\n}\n\n/**\n * Create a new Node.js ZIP builder instance\n * \n * Note: This returns a placeholder implementation.\n * For actual ZIP building, use the ts-res-browser-cli tool.\n */\nexport function createNodeZipBuilder(): IZipBuilder {\n  return new NodeZipBuilder();\n}\n\n/**\n * Browser-compatible ZIP creation interface\n * \n * This provides a way to prepare ZIP data in the browser,\n * though actual ZIP file creation requires server-side processing\n * or a separate Node.js tool.\n */\nexport interface BrowserZipData {\n  files: Array<{\n    path: string;\n    content: string;\n  }>;\n  manifest: ZipManifest;\n  config?: any;\n}\n\n/**\n * Prepare ZIP data structure for browser download or server processing\n */\nexport function prepareZipData(\n  files: ImportedFile[],\n  options: ZipArchiveOptions = {}\n): Result<BrowserZipData> {\n  try {\n    const timestamp = new Date().toISOString();\n    const filename = options.filename || 'ts-res-bundle';\n    \n    // Create manifest\n    const manifest = createManifest(\n      'file',\n      'browser-files',\n      'files/',\n      options.includeConfig ? 'config.json' : undefined\n    );\n\n    // Prepare file data\n    const zipFiles = files.map(file => ({\n      path: normalizePath(file.path || file.name),\n      content: file.content\n    }));\n\n    // Add manifest\n    zipFiles.push({\n      path: 'manifest.json',\n      content: JSON.stringify(manifest, null, 2)\n    });\n\n    // Add configuration if provided\n    if (options.includeConfig && options.config) {\n      zipFiles.push({\n        path: 'config.json',\n        content: JSON.stringify(options.config, null, 2)\n      });\n    }\n\n    return succeed({\n      files: zipFiles,\n      manifest,\n      config: options.config\n    });\n  } catch (error) {\n    return fail(`Failed to prepare ZIP data: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Prepare ZIP data from directory structure\n */\nexport function prepareZipDataFromDirectory(\n  directory: ImportedDirectory,\n  options: ZipArchiveOptions = {}\n): Result<BrowserZipData> {\n  try {\n    // Flatten directory to files\n    const files: ImportedFile[] = [];\n    \n    const collectFiles = (dir: ImportedDirectory, basePath: string = '') => {\n      // Add files from current directory\n      dir.files.forEach(file => {\n        files.push({\n          ...file,\n          path: basePath ? `${basePath}/${file.name}` : file.name\n        });\n      });\n      \n      // Recursively collect from subdirectories\n      if (dir.subdirectories) {\n        dir.subdirectories.forEach(subdir => {\n          const subdirPath = basePath ? `${basePath}/${subdir.name}` : subdir.name;\n          collectFiles(subdir, subdirPath);\n        });\n      }\n    };\n    \n    collectFiles(directory);\n    \n    return prepareZipData(files, {\n      ...options,\n      filename: options.filename || sanitizeFilename(directory.name)\n    });\n  } catch (error) {\n    return fail(`Failed to prepare ZIP data from directory: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}"]}