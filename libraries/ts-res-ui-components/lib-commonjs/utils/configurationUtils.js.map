{"version":3,"file":"configurationUtils.js","sourceRoot":"","sources":["../../src/utils/configurationUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { Config, QualifierTypes, Qualifiers, ResourceTypes } from '@fgv/ts-res';\n\n/**\n * Configuration change tracking\n * @internal\n */\nexport interface ConfigurationChanges {\n  hasChanges: boolean;\n  changedSections: string[];\n  timestamp: Date;\n}\n\n/**\n * Configuration validation result\n * @internal\n */\nexport interface ConfigurationValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Configuration export options\n * @internal\n */\nexport interface ConfigurationExportOptions {\n  format: 'json' | 'yaml';\n  pretty: boolean;\n  includeComments?: boolean;\n  filename?: string;\n}\n\n/**\n * Configuration template using predefined configurations from ts-res\n * @internal\n */\nexport interface ConfigurationTemplate {\n  id: Config.PredefinedSystemConfiguration;\n  name: string;\n  description: string;\n  configuration: Config.Model.ISystemConfiguration;\n  category: 'basic' | 'intermediate' | 'advanced';\n}\n\n/**\n * Default system configuration\n * @public\n */\nexport function getDefaultConfiguration(): Config.Model.ISystemConfiguration {\n  return Config.getPredefinedDeclaration('default').orThrow();\n}\n\n/**\n * Validate a system configuration\n */\n/**\n * Validates a ts-res system configuration for completeness and correctness.\n *\n * Performs comprehensive validation of configuration structure, required fields,\n * type relationships, and logical consistency. Returns detailed validation results\n * with specific error and warning messages for debugging and user feedback.\n *\n * @example\n * ```typescript\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * const config = {\n *   qualifierTypes: [{ name: 'language', systemType: 'language' }],\n *   qualifiers: [{ name: 'en', typeName: 'language', defaultPriority: 100 }],\n *   resourceTypes: [{ name: 'string', defaultValue: '' }]\n * };\n *\n * const validation = ConfigurationTools.validateConfiguration(config);\n * if (!validation.isValid) {\n *   console.error('Configuration errors:', validation.errors);\n *   console.warn('Configuration warnings:', validation.warnings);\n * }\n * ```\n *\n * @param config - The system configuration to validate\n * @returns Validation result with errors, warnings, and validity status\n * @public\n */\nexport function validateConfiguration(\n  config: Config.Model.ISystemConfiguration\n): ConfigurationValidationResult {\n  const validate = Config.Convert.validateSystemConfiguration(config);\n  if (validate.isSuccess()) {\n    return {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n  } else {\n    return {\n      isValid: false,\n      errors: [validate.message],\n      warnings: []\n    };\n  }\n}\n\n/**\n * Create a deep copy of a configuration\n */\n/**\n * Creates a deep copy of a system configuration object.\n *\n * Performs a deep clone of the configuration to ensure complete isolation\n * from the original. Useful for creating editable copies, implementing undo/redo,\n * or preserving original state during modifications.\n *\n * @example\n * ```typescript\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * const originalConfig = getSystemConfiguration();\n * const editableConfig = ConfigurationTools.cloneConfiguration(originalConfig);\n *\n * // Modify the clone without affecting the original\n * editableConfig.qualifiers.push(newQualifier);\n * console.log('Original unchanged:', originalConfig.qualifiers.length);\n * console.log('Clone modified:', editableConfig.qualifiers.length);\n * ```\n *\n * @param config - The configuration to clone\n * @returns A deep copy of the configuration\n * @public\n */\nexport function cloneConfiguration(\n  config: Config.Model.ISystemConfiguration\n): Config.Model.ISystemConfiguration {\n  return JSON.parse(JSON.stringify(config));\n}\n\n/**\n * Compare two configurations for equality\n */\n/** @internal */\nexport function compareConfigurations(\n  config1: Config.Model.ISystemConfiguration,\n  config2: Config.Model.ISystemConfiguration\n): boolean {\n  return JSON.stringify(config1) === JSON.stringify(config2);\n}\n\n/**\n * Track changes between configurations\n */\n/** @internal */\nexport function trackConfigurationChanges(\n  original: Config.Model.ISystemConfiguration,\n  current: Config.Model.ISystemConfiguration\n): ConfigurationChanges {\n  const changedSections: string[] = [];\n\n  // Check qualifierTypes\n  if (JSON.stringify(original.qualifierTypes) !== JSON.stringify(current.qualifierTypes)) {\n    changedSections.push('qualifierTypes');\n  }\n\n  // Check qualifiers\n  if (JSON.stringify(original.qualifiers) !== JSON.stringify(current.qualifiers)) {\n    changedSections.push('qualifiers');\n  }\n\n  // Check resourceTypes\n  if (JSON.stringify(original.resourceTypes) !== JSON.stringify(current.resourceTypes)) {\n    changedSections.push('resourceTypes');\n  }\n\n  return {\n    hasChanges: changedSections.length > 0,\n    changedSections,\n    timestamp: new Date()\n  };\n}\n\n/**\n * Export configuration to JSON string\n */\n/**\n * Exports a system configuration to a formatted string representation.\n *\n * Converts the configuration object to a serialized format (JSON or YAML) with\n * optional formatting and metadata. Supports pretty-printing for human readability\n * and can include comments and custom filenames for enhanced usability.\n *\n * @example\n * ```typescript\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * const config = getCurrentConfiguration();\n *\n * // Export as pretty-printed JSON\n * const jsonResult = ConfigurationTools.exportConfiguration(config, {\n *   format: 'json',\n *   pretty: true,\n *   includeComments: true\n * });\n *\n * if (jsonResult.isSuccess()) {\n *   downloadFile(jsonResult.value, 'my-config.json');\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Export as compact JSON for API transmission\n * const compactResult = ConfigurationTools.exportConfiguration(config, {\n *   format: 'json',\n *   pretty: false\n * });\n *\n * if (compactResult.isSuccess()) {\n *   await sendToApi(compactResult.value);\n * }\n * ```\n *\n * @param config - The configuration to export\n * @param options - Export formatting options\n * @returns Result containing the formatted configuration string or error message\n * @public\n */\nexport function exportConfiguration(\n  config: Config.Model.ISystemConfiguration,\n  options: ConfigurationExportOptions = { format: 'json', pretty: true }\n): Result<string> {\n  try {\n    if (options.format === 'json') {\n      return succeed(JSON.stringify(config, null, options.pretty ? 2 : 0));\n    } else {\n      return fail('YAML export not implemented yet');\n    }\n  } catch (error) {\n    return fail(`Failed to export configuration: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Import configuration from JSON string\n */\n/**\n * Imports and validates a system configuration from a serialized string.\n *\n * Parses configuration data from JSON or YAML format and performs validation\n * to ensure the imported configuration is structurally sound and contains\n * required fields. Provides detailed error messages for parsing or validation failures.\n *\n * @example\n * ```typescript\n * import { ConfigurationTools } from '@fgv/ts-res-ui-components';\n *\n * // Import from JSON string\n * const jsonData = '{\"qualifierTypes\": [...], \"qualifiers\": [...]}';\n * const importResult = ConfigurationTools.importConfiguration(jsonData);\n *\n * if (importResult.isSuccess()) {\n *   console.log('Configuration imported successfully');\n *   applyConfiguration(importResult.value);\n * } else {\n *   console.error('Import failed:', importResult.message);\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Import from file upload\n * const handleFileImport = async (file: File) => {\n *   const text = await file.text();\n *   const result = ConfigurationTools.importConfiguration(text);\n *\n *   if (result.isFailure()) {\n *     showError(`Failed to import ${file.name}: ${result.message}`);\n *     return;\n *   }\n *\n *   // Validate before applying\n *   const validation = ConfigurationTools.validateConfiguration(result.value);\n *   if (!validation.isValid) {\n *     showWarning('Configuration has validation issues', validation.warnings);\n *   }\n *\n *   setConfiguration(result.value);\n * };\n * ```\n *\n * @param data - The serialized configuration string (JSON or YAML)\n * @returns Result containing the parsed configuration or error message\n * @public\n */\nexport function importConfiguration(data: string): Result<Config.Model.ISystemConfiguration> {\n  try {\n    const parsed = JSON.parse(data);\n    return Config.Convert.validateSystemConfiguration(parsed);\n  } catch (error) {\n    return fail(`Failed to parse configuration: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Get predefined configuration templates from ts-res\n */\n/** @internal */\nexport function getConfigurationTemplates(): ConfigurationTemplate[] {\n  return Config.allPredefinedSystemConfigurations.map((configId) => {\n    const config = Config.getPredefinedDeclaration(configId).orThrow();\n\n    // Determine category based on configuration complexity\n    let category: 'basic' | 'intermediate' | 'advanced';\n    if (configId === 'default') {\n      category = 'basic';\n    } else if (configId === 'extended-example') {\n      category = 'advanced';\n    } else {\n      category = 'intermediate';\n    }\n\n    return {\n      id: configId,\n      name: config.name || `${configId.charAt(0).toUpperCase() + configId.slice(1).replace(/-/g, ' ')}`,\n      description: config.description || `Predefined ${configId} system configuration`,\n      category,\n      configuration: config\n    };\n  });\n}\n\n/**\n * Generate a filename for configuration export\n */\n/** @internal */\nexport function generateConfigurationFilename(configName?: string, format: 'json' | 'yaml' = 'json'): string {\n  const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');\n  const baseName = configName ? `${configName}-config` : 'ts-res-config';\n  return `${baseName}-${timestamp}.${format}`;\n}\n"]}