{"version":3,"file":"resourceSelectors.js","sourceRoot":"","sources":["../../src/utils/resourceSelectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResourceJson } from '@fgv/ts-res';\nimport { Result, succeed, fail } from '@fgv/ts-utils';\n\n/**\n * Helper functions for working with pending resources and resource IDs.\n * These utilities provide standardized ways to work with resource identification\n * and selection patterns commonly needed by host applications.\n *\n * @public\n */\n\n/**\n * Gets pending resources filtered by resource type.\n *\n * @param pendingResources - Map of pending resources (keys are guaranteed to be full resource IDs)\n * @param resourceType - Resource type to filter by (e.g., 'json', 'string')\n * @returns Array of pending resources of the specified type\n *\n * @example\n * ```typescript\n * const jsonResources = getPendingAdditionsByType(pendingResources, 'json');\n * const languageConfigs = getPendingAdditionsByType(pendingResources, 'languageConfig');\n * ```\n *\n * @public\n */\nexport function getPendingAdditionsByType(\n  pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>,\n  resourceType: string\n): Array<{ id: string; resource: ResourceJson.Json.ILooseResourceDecl }> {\n  const results: Array<{ id: string; resource: ResourceJson.Json.ILooseResourceDecl }> = [];\n\n  pendingResources.forEach((resource, id) => {\n    if (resource.resourceTypeName === resourceType) {\n      results.push({ id, resource });\n    }\n  });\n\n  return results;\n}\n\n/**\n * Checks if a resource ID corresponds to a pending addition.\n *\n * @param resourceId - Resource ID to check (should be full resource ID)\n * @param pendingResources - Map of pending resources\n * @returns True if the resource ID exists in pending resources\n *\n * @example\n * ```typescript\n * if (isPendingAddition('platform.languages.az-AZ', pendingResources)) {\n *   console.log('This is a pending resource');\n * }\n * ```\n *\n * @public\n */\nexport function isPendingAddition(\n  resourceId: string,\n  pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>\n): boolean {\n  return pendingResources.has(resourceId);\n}\n\n/**\n * Derives a leaf ID from a full resource ID.\n * Extracts the last segment after the final dot.\n *\n * @param fullResourceId - Full resource ID (e.g., 'platform.languages.az-AZ')\n * @returns Result containing the leaf ID (e.g., 'az-AZ') or error if invalid format\n *\n * @example\n * ```typescript\n * const leafResult = deriveLeafId('platform.languages.az-AZ');\n * if (leafResult.isSuccess()) {\n *   console.log(leafResult.value); // 'az-AZ'\n * }\n *\n * const invalidResult = deriveLeafId('invalid');\n * if (invalidResult.isFailure()) {\n *   console.log(invalidResult.message); // 'Resource ID must contain at least one dot'\n * }\n * ```\n *\n * @public\n */\nexport function deriveLeafId(fullResourceId: string): Result<string> {\n  if (!fullResourceId || fullResourceId.trim().length === 0) {\n    return fail('Resource ID cannot be empty');\n  }\n\n  const parts = fullResourceId.split('.');\n  if (parts.length < 2) {\n    return fail('Resource ID must contain at least one dot separator (e.g., \"platform.languages.az-AZ\")');\n  }\n\n  const leafId = parts[parts.length - 1];\n  if (!leafId || leafId.trim().length === 0) {\n    return fail('Leaf ID cannot be empty (resource ID cannot end with a dot)');\n  }\n\n  return succeed(leafId);\n}\n\n/**\n * Constructs a full resource ID from a root path and leaf ID.\n *\n * @param rootPath - Root path (e.g., 'platform.languages')\n * @param leafId - Leaf identifier (e.g., 'az-AZ')\n * @returns Result containing the full resource ID or error if invalid inputs\n *\n * @example\n * ```typescript\n * const fullIdResult = deriveFullId('platform.languages', 'az-AZ');\n * if (fullIdResult.isSuccess()) {\n *   console.log(fullIdResult.value); // 'platform.languages.az-AZ'\n * }\n *\n * const invalidResult = deriveFullId('', 'az-AZ');\n * if (invalidResult.isFailure()) {\n *   console.log(invalidResult.message); // 'Root path cannot be empty'\n * }\n * ```\n *\n * @public\n */\nexport function deriveFullId(rootPath: string, leafId: string): Result<string> {\n  if (!rootPath || rootPath.trim().length === 0) {\n    return fail('Root path cannot be empty');\n  }\n\n  if (!leafId || leafId.trim().length === 0) {\n    return fail('Leaf ID cannot be empty');\n  }\n\n  // Remove leading/trailing dots from root path\n  const cleanRootPath = rootPath.replace(/^\\.+|\\.+$/g, '');\n  if (cleanRootPath.length === 0) {\n    return fail('Root path cannot consist only of dots');\n  }\n\n  // Remove leading/trailing dots from leaf ID\n  const cleanLeafId = leafId.replace(/^\\.+|\\.+$/g, '');\n  if (cleanLeafId.length === 0) {\n    return fail('Leaf ID cannot consist only of dots');\n  }\n\n  const fullId = `${cleanRootPath}.${cleanLeafId}`;\n  return succeed(fullId);\n}\n\n/**\n * Gets all unique resource types from pending resources.\n *\n * @param pendingResources - Map of pending resources\n * @returns Array of unique resource type names\n *\n * @example\n * ```typescript\n * const types = getPendingResourceTypes(pendingResources);\n * console.log(types); // ['json', 'string', 'languageConfig']\n * ```\n *\n * @public\n */\nexport function getPendingResourceTypes(\n  pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>\n): string[] {\n  const types = new Set<string>();\n\n  pendingResources.forEach((resource) => {\n    if (resource.resourceTypeName) {\n      types.add(resource.resourceTypeName);\n    }\n  });\n\n  return Array.from(types).sort();\n}\n\n/**\n * Gets statistics about pending resources.\n * Provides summary information useful for UI displays.\n *\n * @param pendingResources - Map of pending resources\n * @returns Statistics object with counts and breakdowns\n *\n * @example\n * ```typescript\n * const stats = getPendingResourceStats(pendingResources);\n * console.log(`${stats.totalCount} pending resources`);\n * console.log(`Types: ${Object.keys(stats.byType).join(', ')}`);\n * ```\n *\n * @public\n */\nexport function getPendingResourceStats(\n  pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>\n): {\n  totalCount: number;\n  byType: Record<string, number>;\n  resourceIds: string[];\n} {\n  const stats = {\n    totalCount: pendingResources.size,\n    byType: {} as Record<string, number>,\n    resourceIds: Array.from(pendingResources.keys()).sort()\n  };\n\n  pendingResources.forEach((resource) => {\n    if (resource.resourceTypeName) {\n      stats.byType[resource.resourceTypeName] = (stats.byType[resource.resourceTypeName] || 0) + 1;\n    }\n  });\n\n  return stats;\n}\n\n/**\n * Validates that all keys in a pending resources map are properly formatted as full resource IDs.\n * This is a diagnostic function to ensure the pending resource key invariant is maintained.\n *\n * @param pendingResources - Map of pending resources to validate\n * @returns Result indicating whether all keys are valid full resource IDs, or details about any issues found\n *\n * @example\n * ```typescript\n * const validation = validatePendingResourceKeys(pendingResources);\n * if (validation.isFailure()) {\n *   console.error('Pending resource key validation failed:', validation.message);\n * }\n * ```\n *\n * @public\n */\nexport function validatePendingResourceKeys(\n  pendingResources: Map<string, ResourceJson.Json.ILooseResourceDecl>\n): Result<void> {\n  const issues: string[] = [];\n\n  pendingResources.forEach((resource, key) => {\n    // Check for empty keys\n    if (!key || key.trim().length === 0) {\n      issues.push('Found empty resource ID key');\n      return;\n    }\n\n    // Check for temporary IDs (should not be in pending resources)\n    if (key.startsWith('new-resource-')) {\n      issues.push(`Found temporary ID key: ${key}`);\n    }\n\n    // Check for minimum structure (at least one dot)\n    if (!key.includes('.')) {\n      issues.push(`Resource ID '${key}' appears to be a leaf ID rather than a full resource ID`);\n    }\n\n    // Check for trailing dots\n    if (key.endsWith('.')) {\n      issues.push(`Resource ID '${key}' ends with a dot`);\n    }\n\n    // Check for leading dots\n    if (key.startsWith('.')) {\n      issues.push(`Resource ID '${key}' starts with a dot`);\n    }\n\n    // Check for double dots\n    if (key.includes('..')) {\n      issues.push(`Resource ID '${key}' contains consecutive dots`);\n    }\n  });\n\n  if (issues.length > 0) {\n    return fail(`Pending resource key validation failed: ${issues.join('; ')}`);\n  }\n\n  return succeed(undefined);\n}\n"]}