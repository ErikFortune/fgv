{"version":3,"file":"fileProcessing.js","sourceRoot":"","sources":["../../src/utils/fileProcessing.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImportedFile, ImportedDirectory } from '../types';\n\n/**\n * Read files from file input element\n */\n/** @internal */\nexport async function readFilesFromInput(files: FileList): Promise<ImportedFile[]> {\n  const importedFiles: ImportedFile[] = [];\n\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    const content = await readFileContent(file);\n    importedFiles.push({\n      name: file.name,\n      path: file.webkitRelativePath || file.name,\n      content,\n      type: file.type\n    });\n  }\n\n  return importedFiles;\n}\n\n/**\n * Read file content as text\n */\nfunction readFileContent(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      resolve(e.target?.result as string);\n    };\n    reader.onerror = (e) => {\n      reject(new Error(`Failed to read file ${file.name}: ${e}`));\n    };\n    reader.readAsText(file);\n  });\n}\n\n/**\n * Convert flat file list to directory structure\n */\n/** @internal */\nexport function filesToDirectory(files: ImportedFile[]): ImportedDirectory {\n  // Group files by directory path\n  const filesByPath = new Map<string, ImportedFile[]>();\n  const dirPaths = new Set<string>();\n\n  files.forEach((file) => {\n    if (file.path) {\n      const parts = file.path.split('/');\n      if (parts.length > 1) {\n        // File is in a subdirectory\n        const dirPath = parts.slice(0, -1).join('/');\n        dirPaths.add(dirPath);\n\n        if (!filesByPath.has(dirPath)) {\n          filesByPath.set(dirPath, []);\n        }\n        filesByPath.get(dirPath)!.push({\n          ...file,\n          name: parts[parts.length - 1]\n        });\n      } else {\n        // File is in root\n        if (!filesByPath.has('')) {\n          filesByPath.set('', []);\n        }\n        filesByPath.get('')!.push(file);\n      }\n    } else {\n      // No path, add to root\n      if (!filesByPath.has('')) {\n        filesByPath.set('', []);\n      }\n      filesByPath.get('')!.push(file);\n    }\n  });\n\n  // Build directory tree\n  const buildDirectory = (path: string, name: string): ImportedDirectory => {\n    const dir: ImportedDirectory = {\n      name,\n      path,\n      files: filesByPath.get(path) || [],\n      subdirectories: []\n    };\n\n    // Find subdirectories\n    const prefix = path ? `${path}/` : '';\n    dirPaths.forEach((dirPath) => {\n      if (dirPath.startsWith(prefix)) {\n        const remaining = dirPath.slice(prefix.length);\n        if (remaining && !remaining.includes('/')) {\n          // This is a direct subdirectory\n          dir.subdirectories!.push(buildDirectory(dirPath, remaining));\n        }\n      }\n    });\n\n    return dir;\n  };\n\n  return buildDirectory('', 'root');\n}\n\n/**\n * Export data as JSON file\n */\n/** @internal */\nexport function exportAsJson(data: any, filename: string): void {\n  const json = JSON.stringify(data, null, 2);\n  const blob = new Blob([json], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Export data using File System Access API if available\n */\n/** @internal */\nexport async function exportUsingFileSystemAPI(\n  data: any,\n  suggestedName: string,\n  description: string = 'JSON files'\n): Promise<boolean> {\n  if (!('showSaveFilePicker' in window)) {\n    return false;\n  }\n\n  try {\n    const fileHandle = await (window as any).showSaveFilePicker({\n      suggestedName,\n      types: [\n        {\n          description,\n          accept: {\n            'application/json': ['.json']\n          }\n        }\n      ]\n    });\n\n    const json = JSON.stringify(data, null, 2);\n    const writable = await fileHandle.createWritable();\n    await writable.write(json);\n    await writable.close();\n\n    return true;\n  } catch (error) {\n    // User cancelled or other error\n    if ((error as Error).name === 'AbortError') {\n      return false;\n    }\n    throw error;\n  }\n}\n"]}