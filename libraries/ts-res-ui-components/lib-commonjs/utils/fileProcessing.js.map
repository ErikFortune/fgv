{"version":3,"file":"fileProcessing.js","sourceRoot":"","sources":["../../src/utils/fileProcessing.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImportedFile, ImportedDirectory } from '../types';\n\n/**\n * Read files from file input element\n */\nexport async function readFilesFromInput(files: FileList): Promise<ImportedFile[]> {\n  const importedFiles: ImportedFile[] = [];\n  \n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    const content = await readFileContent(file);\n    importedFiles.push({\n      name: file.name,\n      path: file.webkitRelativePath || file.name,\n      content,\n      type: file.type\n    });\n  }\n  \n  return importedFiles;\n}\n\n/**\n * Read file content as text\n */\nfunction readFileContent(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      resolve(e.target?.result as string);\n    };\n    reader.onerror = (e) => {\n      reject(new Error(`Failed to read file ${file.name}: ${e}`));\n    };\n    reader.readAsText(file);\n  });\n}\n\n/**\n * Convert flat file list to directory structure\n */\nexport function filesToDirectory(files: ImportedFile[]): ImportedDirectory {\n  // Group files by directory path\n  const filesByPath = new Map<string, ImportedFile[]>();\n  const dirPaths = new Set<string>();\n  \n  files.forEach(file => {\n    if (file.path) {\n      const parts = file.path.split('/');\n      if (parts.length > 1) {\n        // File is in a subdirectory\n        const dirPath = parts.slice(0, -1).join('/');\n        dirPaths.add(dirPath);\n        \n        if (!filesByPath.has(dirPath)) {\n          filesByPath.set(dirPath, []);\n        }\n        filesByPath.get(dirPath)!.push({\n          ...file,\n          name: parts[parts.length - 1]\n        });\n      } else {\n        // File is in root\n        if (!filesByPath.has('')) {\n          filesByPath.set('', []);\n        }\n        filesByPath.get('')!.push(file);\n      }\n    } else {\n      // No path, add to root\n      if (!filesByPath.has('')) {\n        filesByPath.set('', []);\n      }\n      filesByPath.get('')!.push(file);\n    }\n  });\n  \n  // Build directory tree\n  const buildDirectory = (path: string, name: string): ImportedDirectory => {\n    const dir: ImportedDirectory = {\n      name,\n      path,\n      files: filesByPath.get(path) || [],\n      subdirectories: []\n    };\n    \n    // Find subdirectories\n    const prefix = path ? `${path}/` : '';\n    dirPaths.forEach(dirPath => {\n      if (dirPath.startsWith(prefix)) {\n        const remaining = dirPath.slice(prefix.length);\n        if (remaining && !remaining.includes('/')) {\n          // This is a direct subdirectory\n          dir.subdirectories!.push(buildDirectory(dirPath, remaining));\n        }\n      }\n    });\n    \n    return dir;\n  };\n  \n  return buildDirectory('', 'root');\n}\n\n/**\n * Export data as JSON file\n */\nexport function exportAsJson(data: any, filename: string): void {\n  const json = JSON.stringify(data, null, 2);\n  const blob = new Blob([json], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n  \n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Export data using File System Access API if available\n */\nexport async function exportUsingFileSystemAPI(\n  data: any,\n  suggestedName: string,\n  description: string = 'JSON files'\n): Promise<boolean> {\n  if (!('showSaveFilePicker' in window)) {\n    return false;\n  }\n  \n  try {\n    const fileHandle = await (window as any).showSaveFilePicker({\n      suggestedName,\n      types: [\n        {\n          description,\n          accept: {\n            'application/json': ['.json']\n          }\n        }\n      ]\n    });\n    \n    const json = JSON.stringify(data, null, 2);\n    const writable = await fileHandle.createWritable();\n    await writable.write(json);\n    await writable.close();\n    \n    return true;\n  } catch (error) {\n    // User cancelled or other error\n    if ((error as Error).name === 'AbortError') {\n      return false;\n    }\n    throw error;\n  }\n}"]}