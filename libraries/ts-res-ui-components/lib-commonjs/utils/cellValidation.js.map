{"version":3,"file":"cellValidation.js","sourceRoot":"","sources":["../../src/utils/cellValidation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Result, succeed, fail } from '@fgv/ts-utils';\nimport { JsonValue } from '@fgv/ts-json-base';\nimport { GridCellValidation } from '../types';\n\n/**\n * Validation result for a grid cell value.\n */\nexport interface CellValidationResult {\n  /** Whether the value is valid */\n  isValid: boolean;\n  /** Error message if validation failed */\n  error?: string;\n  /** Cleaned/normalized value (e.g., trimmed strings) */\n  normalizedValue?: JsonValue;\n}\n\n/**\n * Validates a cell value according to the column's validation rules.\n *\n * @param value - The value to validate\n * @param validation - Validation configuration\n * @returns Result containing validation outcome\n * @public\n */\nexport function validateCellValue(\n  value: JsonValue,\n  validation?: GridCellValidation\n): Result<CellValidationResult> {\n  if (!validation) {\n    return succeed({ isValid: true, normalizedValue: value });\n  }\n\n  try {\n    // Handle null/undefined values\n    const isEmpty = value === null || value === undefined || value === '';\n\n    // Required field validation\n    if (validation.required && isEmpty) {\n      return succeed({\n        isValid: false,\n        error: 'This field is required',\n        normalizedValue: value\n      });\n    }\n\n    // If empty and not required, it's valid\n    if (isEmpty && !validation.required) {\n      return succeed({ isValid: true, normalizedValue: value });\n    }\n\n    // String-specific validations\n    if (typeof value === 'string') {\n      const trimmedValue = value.trim();\n\n      // Length validations\n      if (validation.minLength !== undefined && trimmedValue.length < validation.minLength) {\n        return succeed({\n          isValid: false,\n          error: `Minimum length is ${validation.minLength} characters`,\n          normalizedValue: trimmedValue\n        });\n      }\n\n      if (validation.maxLength !== undefined && trimmedValue.length > validation.maxLength) {\n        return succeed({\n          isValid: false,\n          error: `Maximum length is ${validation.maxLength} characters`,\n          normalizedValue: trimmedValue\n        });\n      }\n\n      // Pattern validation\n      if (validation.pattern && !validation.pattern.test(trimmedValue)) {\n        return succeed({\n          isValid: false,\n          error: 'Value does not match the required format',\n          normalizedValue: trimmedValue\n        });\n      }\n\n      // Custom validation\n      if (validation.custom) {\n        const customError = validation.custom(trimmedValue);\n        if (customError) {\n          return succeed({\n            isValid: false,\n            error: customError,\n            normalizedValue: trimmedValue\n          });\n        }\n      }\n\n      return succeed({ isValid: true, normalizedValue: trimmedValue });\n    }\n\n    // Non-string values: only custom validation applies\n    if (validation.custom) {\n      const customError = validation.custom(value);\n      if (customError) {\n        return succeed({\n          isValid: false,\n          error: customError,\n          normalizedValue: value\n        });\n      }\n    }\n\n    return succeed({ isValid: true, normalizedValue: value });\n  } catch (error) {\n    return fail(`Validation error: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Common validation patterns for reuse.\n * @public\n */\nexport const ValidationPatterns = {\n  /** Email address validation */\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  /** URL validation (basic) */\n  url: /^https?:\\/\\/.+/,\n  /** Phone number (flexible format) */\n  phone: /^[\\+]?[1-9][\\d]{0,15}$/,\n  /** Alphanumeric only */\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  /** No whitespace */\n  noWhitespace: /^\\S+$/,\n  /** Positive integer */\n  positiveInteger: /^[1-9]\\d*$/,\n  /** Non-negative integer (including 0) */\n  nonNegativeInteger: /^\\d+$/\n};\n\n/**\n * Common validation functions for reuse.\n * @public\n */\nexport const ValidationFunctions = {\n  /** Validates that a string represents a valid JSON */\n  validJson: (value: JsonValue): string | null => {\n    if (typeof value !== 'string') return null;\n    try {\n      JSON.parse(value);\n      return null;\n    } catch {\n      return 'Must be valid JSON';\n    }\n  },\n\n  /** Validates that a number is within a range */\n  numberRange:\n    (min: number, max: number) =>\n    (value: JsonValue): string | null => {\n      const num = typeof value === 'string' ? parseFloat(value) : value;\n      if (typeof num !== 'number' || isNaN(num)) {\n        return 'Must be a valid number';\n      }\n      if (num < min || num > max) {\n        return `Must be between ${min} and ${max}`;\n      }\n      return null;\n    },\n\n  /** Validates that a value is one of the allowed options */\n  oneOf:\n    (allowedValues: JsonValue[]) =>\n    (value: JsonValue): string | null => {\n      if (!allowedValues.includes(value)) {\n        return `Must be one of: ${allowedValues.join(', ')}`;\n      }\n      return null;\n    },\n\n  /** Validates that a string doesn't contain certain characters */\n  excludeCharacters:\n    (forbiddenChars: string) =>\n    (value: JsonValue): string | null => {\n      if (typeof value !== 'string') return null;\n\n      for (const char of forbiddenChars) {\n        if (value.includes(char)) {\n          return `Cannot contain the character: ${char}`;\n        }\n      }\n      return null;\n    }\n};\n\n/**\n * Grid validation state management utility.\n * @public\n */\nexport class GridValidationState {\n  private cellErrors = new Map<string, Map<string, string>>();\n\n  /**\n   * Set validation error for a specific cell.\n   *\n   * @param resourceId - Resource ID for the row\n   * @param columnId - Column ID for the cell\n   * @param error - Error message, or null to clear error\n   */\n  setCellError(resourceId: string, columnId: string, error: string | null): void {\n    if (!this.cellErrors.has(resourceId)) {\n      this.cellErrors.set(resourceId, new Map());\n    }\n\n    const resourceErrors = this.cellErrors.get(resourceId)!;\n\n    if (error) {\n      resourceErrors.set(columnId, error);\n    } else {\n      resourceErrors.delete(columnId);\n\n      // Clean up empty resource error maps\n      if (resourceErrors.size === 0) {\n        this.cellErrors.delete(resourceId);\n      }\n    }\n  }\n\n  /**\n   * Get validation error for a specific cell.\n   */\n  getCellError(resourceId: string, columnId: string): string | null {\n    return this.cellErrors.get(resourceId)?.get(columnId) || null;\n  }\n\n  /**\n   * Check if a specific cell has validation errors.\n   */\n  hasCellError(resourceId: string, columnId: string): boolean {\n    return !!this.getCellError(resourceId, columnId);\n  }\n\n  /**\n   * Get all validation errors for a resource.\n   */\n  getResourceErrors(resourceId: string): Map<string, string> {\n    return this.cellErrors.get(resourceId) || new Map();\n  }\n\n  /**\n   * Check if any cells have validation errors.\n   */\n  get hasErrors(): boolean {\n    return this.cellErrors.size > 0;\n  }\n\n  /**\n   * Get total count of validation errors.\n   */\n  get errorCount(): number {\n    let count = 0;\n    for (const resourceErrors of this.cellErrors.values()) {\n      count += resourceErrors.size;\n    }\n    return count;\n  }\n\n  /**\n   * Get all error messages as a flat array.\n   */\n  getAllErrors(): Array<{ resourceId: string; columnId: string; error: string }> {\n    const errors: Array<{ resourceId: string; columnId: string; error: string }> = [];\n\n    for (const [resourceId, resourceErrors] of this.cellErrors.entries()) {\n      for (const [columnId, error] of resourceErrors.entries()) {\n        errors.push({ resourceId, columnId, error });\n      }\n    }\n\n    return errors;\n  }\n\n  /**\n   * Clear all validation errors.\n   */\n  clearAll(): void {\n    this.cellErrors.clear();\n  }\n\n  /**\n   * Clear validation errors for a specific resource.\n   */\n  clearResource(resourceId: string): void {\n    this.cellErrors.delete(resourceId);\n  }\n\n  /**\n   * Clear validation error for a specific cell.\n   */\n  clearCell(resourceId: string, columnId: string): void {\n    this.setCellError(resourceId, columnId, null);\n  }\n}\n"]}