// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JsonFsHelper class processJsonDirectorySync function with a converter reads JSON files from a folder, ignoring non-JSON: toSucceedAndMatchSnapshot 1`] = `
Array [
  Object {
    "filename": "thing1.json",
    "item": Object {
      "name": "thing1",
      "optionalString": "thing 1 optional string",
    },
  },
  Object {
    "filename": "thing2.json",
    "item": Object {
      "name": "thing2",
    },
  },
]
`;

exports[`JsonFsHelper class processJsonDirectorySync function with a validator reads JSON files from a folder, ignoring non-JSON by default 1`] = `
Array [
  Object {
    "filename": "thing1.json",
    "item": Object {
      "name": "thing1",
      "optionalString": "thing 1 optional string",
    },
  },
  Object {
    "filename": "thing2.json",
    "item": Object {
      "name": "thing2",
    },
  },
]
`;

exports[`JsonFsHelper class processJsonDirectorySync function with a validator reads JSON files from a folder, using file filter if supplied 1`] = `
Array [
  Object {
    "filename": "thing9.txt",
    "item": Object {
      "name": "thing2",
    },
  },
]
`;

exports[`JsonFsHelper class processJsonDirectoryToMapSync function applies a name transformation to the returned map if supplied: toSucceedAndMatchSnapshot 1`] = `
Map {
  "thing:thing1" => Object {
    "name": "thing1",
    "optionalString": "thing 1 optional string",
  },
  "thing:thing2" => Object {
    "name": "thing2",
  },
}
`;

exports[`JsonFsHelper class processJsonDirectoryToMapSync function reads JSON files from a folder, ignoring non-JSON by default: toSucceedAndMatchSnapshot 1`] = `
Map {
  "thing1" => Object {
    "name": "thing1",
    "optionalString": "thing 1 optional string",
  },
  "thing2" => Object {
    "name": "thing2",
  },
}
`;
